{"functions":[{"extended":{"hasExtended":true,"docs":"<pre>accessibleProperties([ properties ]) &lt;!--- In `models/User.cfc`, only `isActive` can be set through mass assignment operations like `updateAll()` ---&gt;\n&lt;cffunction name=&quot;init&quot;&gt;\n    &lt;cfset accessibleProperties(&quot;isActive&quot;)&gt;\n&lt;/cffunction&gt;</pre>"},"hint":"Use this method to specify which properties can be set through mass assignment.","returntype":"","slug":"accessibleproperties","parameters":[{"default":"","required":"No","hint":"Property name (or list of property names) that are allowed to be altered through mass assignment.","name":"properties","type":"string"}],"name":"accessibleProperties","availableIn":{},"tags":{"categoryClass":"","sectionClass":"","category":"","section":""}},{"extended":{"hasExtended":true,"docs":"<pre>&lt;!--- Adds the default routes to your application (done in `config/routes.cfm`) ---&gt;\n&lt;cfset addDefaultRoutes()&gt;</pre>"},"hint":"Adds the default CFWheels routes (for example, [controller]/[action]/[key], etc.) to your application. Only use this method if you have set loadDefaultRoutes to false and want to control exactly where in the route order you want to place the default routes.","returntype":"","slug":"adddefaultroutes","parameters":[],"name":"addDefaultRoutes","availableIn":{},"tags":{"categoryClass":"","sectionClass":"","category":"","section":""}},{"extended":{"hasExtended":true,"docs":"<pre>addError(property, message [, name ]) &lt;!--- Add an error to the `email` property ---&gt;\n&lt;cfset this.addError(property=&quot;email&quot;, message=&quot;Sorry, you are not allowed to use that email. Try again, please.&quot;)&gt;</pre>"},"hint":"Adds an error on a specific property.","returntype":"","slug":"adderror","parameters":[{"default":"","required":"Yes","hint":"The name of the property you want to add an error on.","name":"property","type":"string"},{"default":"","required":"Yes","hint":"The error message (such as \"Please enter a correct name in the form field\" for example).","name":"message","type":"string"},{"default":"","required":"No","hint":"A name to identify the error by (useful when you need to distinguish one error from another one set on the same object and you don't want to use the error message itself for that).","name":"name","type":"string"}],"name":"addError","availableIn":{},"tags":{"categoryClass":"","sectionClass":"","category":"","section":""}},{"extended":{"hasExtended":true,"docs":"<pre>Adds an error on the object as a whole (not related to any specific property). &lt;!--- Add an error on the object ---&gt;\n&lt;cfset this.addErrorToBase(message=&quot;Your email address must be the same as your domain name.&quot;)&gt;</pre>"},"hint":"Adds an error on a specific property.","returntype":"","slug":"adderrortobase","parameters":[{"default":"","required":"Yes","hint":"The error message (such as \"Please enter a correct name in the form field\" for example).","name":"message","type":"string"},{"default":"","required":"No","hint":"A name to identify the error by (useful when you need to distinguish one error from another one set on the same object and you don't want to use the error message itself for that).","name":"name","type":"string"}],"name":"addErrorToBase","availableIn":{},"tags":{"categoryClass":"","sectionClass":"","category":"","section":""}},{"extended":{"hasExtended":true,"docs":"<pre>&lt;!--- Add the `js` format ---&gt;\n&lt;cfset addFormat(extension=&quot;js&quot;, mimeType=&quot;text/javascript&quot;)&gt;\n\n&lt;!--- Add the `ppt` and `pptx` formats ---&gt;\n&lt;cfset addFormat(extension=&quot;ppt&quot;, mimeType=&quot;application/vnd.ms-powerpoint&quot;)&gt;\n&lt;cfset addFormat(extension=&quot;pptx&quot;, mimeType=&quot;application/vnd.ms-powerpoint&quot;)&gt;</pre>"},"hint":"Adds a new MIME format to your Wheels application for use with responding to multiple formats.","returntype":"","slug":"addformat","parameters":[{"default":"","required":"true","hint":"File extension to add.","name":"extension","type":"string"},{"default":"","required":"true","hint":"Matching MIME type to associate with the file extension.","name":"mimeType","type":"string"}],"name":"addFormat","availableIn":{},"tags":{"categoryClass":"","sectionClass":"","category":"","section":""}},{"extended":{"hasExtended":true,"docs":"<pre>&lt;!--- Example 1: Adds a route which will invoke the `profile` action on the `user` controller with `params.userName` set when the URL matches the `pattern` argument ---&gt;\n&lt;cfset addRoute(name=&quot;userProfile&quot;, pattern=&quot;user/[username]&quot;, controller=&quot;user&quot;, action=&quot;profile&quot;)&gt;\n\n&lt;!--- Example 2: Category/product URLs. Note the order of precedence is such that the more specific route should be defined first so Wheels will fall back to the less-specific version if it's not found ---&gt;\n&lt;cfset addRoute(name=&quot;product&quot;, pattern=&quot;products/[categorySlug]/[productSlug]&quot;, controller=&quot;products&quot;, action=&quot;product&quot;)&gt;\n&lt;cfset addRoute(name=&quot;productCategory&quot;, pattern=&quot;products/[categorySlug]&quot;, controller=&quot;products&quot;, action=&quot;category&quot;)&gt;\n&lt;cfset addRoute(name=&quot;products&quot;, pattern=&quot;products&quot;, controller=&quot;products&quot;, action=&quot;index&quot;)&gt;\n\n&lt;!--- Example 3: Change the `home` route. This should be listed last because it is least specific ---&gt;\n&lt;cfset addRoute(name=&quot;home&quot;, pattern=&quot;&quot;, controller=&quot;main&quot;, action=&quot;index&quot;)&gt;</pre>"},"hint":"Adds a new route to your application.","returntype":"","slug":"addroute","parameters":[{"default":"","required":"false","hint":"Name for the route. This is referenced as the name argument in functions based on URLFor() like linkTo(), startFormTag(), etc.","name":"name","type":"string"},{"default":"","required":"true","hint":"The URL pattern that the route will match.","name":"pattern","type":"string"},{"default":"","required":"false","hint":"Controller to call when route matches (unless the controller name exists in the pattern).","name":"controller","type":"string"},{"default":"","required":"false","hint":"Action to call when route matches (unless the action name exists in the pattern).","name":"action","type":"string"}],"name":"addRoute","availableIn":{},"tags":{"categoryClass":"","sectionClass":"","category":"","section":""}},{"extended":{"hasExtended":true,"docs":"<pre>&lt;!--- Instruct CFWheels to call the `fixObj` method ---&gt;\n&lt;cfset afterCreate(&quot;fixObj&quot;)&gt;</pre>"},"hint":"Registers method(s) that should be called after a new object is created.","returntype":"","slug":"aftercreate","parameters":[{"default":"","required":"false","hint":"See documentation for afterNew.","name":"methods","type":"string"}],"name":"afterCreate","availableIn":{},"tags":{"categoryClass":"","sectionClass":"","category":"","section":""}},{"extended":{"hasExtended":true,"docs":"<pre>&lt;!--- Instruct CFWheels to call the `fixObj` method ---&gt;\n&lt;cfset afterDelete(&quot;fixObj&quot;)&gt;</pre>"},"hint":"Registers method(s) that should be called after an object is deleted.","returntype":"","slug":"afterdelete","parameters":[{"default":"","required":"false","hint":"See documentation for afterNew.","name":"methods","type":"string"}],"name":"afterDelete","availableIn":{},"tags":{"categoryClass":"","sectionClass":"","category":"","section":""}},{"extended":{"hasExtended":true,"docs":"<pre>&lt;!--- Instruct CFWheels to call the `setTime` method after getting objects or records with one of the finder methods ---&gt;\n&lt;cffunction name=&quot;init&quot;&gt;\n\t&lt;cfset afterFind(&quot;setTime&quot;)&gt;\n&lt;/cffunction&gt;\n\n&lt;cffunction name=&quot;setTime&quot;&gt;\n\t&lt;cfset arguments.fetchedAt = Now()&gt;\n\t&lt;cfreturn arguments&gt;\n&lt;/cffunction&gt;</pre>"},"hint":"Registers method(s) that should be called after an existing object has been initialized (which is usually done with the findByKey or findOne method).","returntype":"","slug":"afterfind","parameters":[{"default":"","required":"false","hint":"See documentation for afterNew.","name":"methods","type":"string"}],"name":"afterFind","availableIn":{},"tags":{"categoryClass":"","sectionClass":"","category":"","section":""}},{"extended":{"hasExtended":true,"docs":"<pre>&lt;!--- Instruct CFWheels to call the `fixObj` method ---&gt;\n&lt;cfset afterInitialization(&quot;fixObj&quot;)&gt;</pre>"},"hint":"Registers method(s) that should be called after an object has been initialized.","returntype":"","slug":"afterinitialization","parameters":[{"default":"","required":"false","hint":"See documentation for afterNew.","name":"methods","type":"string"}],"name":"afterInitialization","availableIn":{},"tags":{"categoryClass":"","sectionClass":"","category":"","section":""}},{"extended":{"hasExtended":true,"docs":"<pre>&lt;!--- Instruct CFWheels to call the `fixObj` method ---&gt;\n&lt;cfset afterNew(&quot;fixObj&quot;)&gt;</pre>"},"hint":"Registers method(s) that should be called after a new object has been initialized (which is usually done with the new method).","returntype":"","slug":"afternew","parameters":[{"default":"","required":"false","hint":"Method name or list of method names that should be called when this callback event occurs in an object's life cycle (can also be called with the method argument).","name":"methods","type":"string"}],"name":"afterNew","availableIn":{},"tags":{"categoryClass":"","sectionClass":"","category":"","section":""}},{"extended":{"hasExtended":true,"docs":"<pre>&lt;!--- Instruct CFWheels to call the `fixObj` method ---&gt;\n&lt;cfset afterSave(&quot;fixObj&quot;)&gt;</pre>"},"hint":"Registers method(s) that should be called after an object is saved.","returntype":"","slug":"aftersave","parameters":[{"default":"","required":"false","hint":"See documentation for afterNew.","name":"methods","type":"string"}],"name":"afterSave","availableIn":{},"tags":{"categoryClass":"","sectionClass":"","category":"","section":""}},{"extended":{"hasExtended":true,"docs":"<pre>&lt;!--- Instruct CFWheels to call the `fixObj` method ---&gt;\n&lt;cfset afterUpdate(&quot;fixObj&quot;)&gt;</pre>"},"hint":"Registers method(s) that should be called after an existing object is updated.","returntype":"","slug":"afterupdate","parameters":[{"default":"","required":"false","hint":"See documentation for afterNew.","name":"methods","type":"string"}],"name":"afterUpdate","availableIn":{},"tags":{"categoryClass":"","sectionClass":"","category":"","section":""}},{"extended":{"hasExtended":true,"docs":"<pre>&lt;!--- Instruct CFWheels to call the `fixObj` method ---&gt;\n&lt;cfset afterValidation(&quot;fixObj&quot;)&gt;</pre>"},"hint":"Registers method(s) that should be called after an object is validated.","returntype":"","slug":"aftervalidation","parameters":[{"default":"","required":"false","hint":"See documentation for afterNew.","name":"methods","type":"string"}],"name":"afterValidation","availableIn":{},"tags":{"categoryClass":"","sectionClass":"","category":"","section":""}},{"extended":{"hasExtended":true,"docs":"<pre>&lt;!--- Instruct CFWheels to call the `fixObj` method ---&gt;\n&lt;cfset afterValidationOnCreate(&quot;fixObj&quot;)&gt;</pre>"},"hint":"Registers method(s) that should be called after a new object is validated.","returntype":"","slug":"aftervalidationoncreate","parameters":[{"default":"","required":"false","hint":"See documentation for afterNew.","name":"methods","type":"string"}],"name":"afterValidationOnCreate","availableIn":{},"tags":{"categoryClass":"","sectionClass":"","category":"","section":""}},{"extended":{"hasExtended":true,"docs":"<pre>&lt;!--- Instruct CFWheels to call the `fixObj` method ---&gt;\n&lt;cfset afterValidationOnUpdate(&quot;fixObj&quot;)&gt;</pre>"},"hint":"Registers method(s) that should be called after an existing object is validated.","returntype":"","slug":"aftervalidationonupdate","parameters":[{"default":"","required":"false","hint":"See documentation for afterNew.","name":"methods","type":"string"}],"name":"afterValidationOnUpdate","availableIn":{},"tags":{"categoryClass":"","sectionClass":"","category":"","section":""}},{"extended":{"hasExtended":true,"docs":"<pre>allChanges() &lt;!--- Get an object, change it, and then ask for its changes (will return a struct containing the changes, both property names and their values) ---&gt;\n&lt;cfset member = model(&quot;member&quot;).findByKey(params.memberId)&gt;\n&lt;cfset member.firstName = params.newFirstName&gt;\n&lt;cfset member.email = params.newEmail&gt;\n&lt;cfset allChanges = member.allChanges()&gt;</pre>"},"hint":"Returns a struct detailing all changes that have been made on the object but not yet saved to the database.","returntype":"","slug":"allchanges","parameters":[],"name":"allChanges","availableIn":{},"tags":{"categoryClass":"","sectionClass":"","category":"","section":""}},{"extended":{"hasExtended":true,"docs":"<pre>allErrors() &lt;!--- Get all the errors for the `user` object ---&gt;\n&lt;cfset errorInfo = user.allErrors()&gt; &lt;!--- Sample Return of Function ---&gt;\n[\n\t{\n  \tmessage:'Username must not be blank',\n    name:'usernameError',\n    property:'username'\n  },\n  {\n  \tmessage:'Password must not be blank',\n    name:'passwordError',\n    property:'password'\n  }\n]</pre>"},"hint":"Returns an array of all the errors on the object.","returntype":"","slug":"allerrors","parameters":[],"name":"allErrors","availableIn":{},"tags":{"categoryClass":"","sectionClass":"","category":"","section":""}},{"extended":{"hasExtended":true,"docs":"<pre>#autoLink(&quot;Download CFWheels from http://cfwheels.org/download&quot;)#\n-&gt; Download CFWheels from &lt;a href=&quot;http://cfwheels.org/download&quot;&gt;http://cfwheels.org/download&lt;/a&gt;\n\n#autoLink(&quot;Email us at info@cfwheels.org&quot;)#\n-&gt; Email us at &lt;a href=&quot;mailto:info@cfwheels.org&quot;&gt;info@cfwheels.org&lt;/a&gt;</pre>"},"hint":"Turns all URLs and email addresses into hyperlinks.","returntype":"","slug":"autolink","parameters":[{"default":"","required":"true","hint":"The text to create links in.","name":"text","type":"string"},{"default":"all","required":"false","hint":"Whether to link URLs, email addresses or both. Possible values are: all (default), URLs and emailAddresses.","name":"link","type":"string"},{"default":"true","required":"false","hint":"Should we autolink relative urls","name":"relative","type":"boolean"}],"name":"autoLink","availableIn":{},"tags":{"categoryClass":"","sectionClass":"","category":"","section":""}},{"extended":{"hasExtended":true,"docs":"<pre>// In `models/User.cfc`, disable automatic validations. In this case, automatic validations are probably enabled globally, but we want to disable just for this model.\n&lt;cffunction name=&quot;init&quot;&gt;\n\t&lt;cfscript&gt;\n\t\tautomaticValidations(false);\n\t&lt;/cfscript&gt;\n&lt;/cffunction&gt;</pre>"},"hint":"Whether or not to enable default validations for this model.","returntype":"","slug":"automaticvalidations","parameters":[{"default":"","required":"true","hint":"Set to true or false.","name":"value","type":"boolean"}],"name":"automaticValidations","availableIn":{},"tags":{"categoryClass":"","sectionClass":"","category":"","section":""}},{"extended":{"hasExtended":true,"docs":"<pre>// Get the average salary for all employees\navgSalary = model(&quot;employee&quot;).average(&quot;salary&quot;);\n\n// Get the average salary for employees in a given department\navgSalary = model(&quot;employee&quot;).average(property=&quot;salary&quot;, where=&quot;departmentId=##params.key##&quot;);\n\n// Make sure a numeric value is always returned if no records are calculated\navgSalary = model(&quot;employee&quot;).average(property=&quot;salary&quot;, where=&quot;salary BETWEEN ##params.min## AND ##params.max##&quot;, ifNull=0);</pre>"},"hint":"Calculates the average value for a given property. Uses the SQL function AVG. If no records can be found to perform the calculation on you can use the ifNull argument to decide what should be returned.","returntype":"","slug":"average","parameters":[{"default":"","required":"true","hint":"Name of the property to calculate the average for.","name":"property","type":"string"},{"default":"","required":"false","hint":"See documentation for findAll.","name":"where","type":"string"},{"default":"","required":"false","hint":"See documentation for findAll.","name":"include","type":"string"},{"default":"false","required":"false","hint":"When true, AVG will be performed only on each unique instance of a value, regardless of how many times the value occurs.","name":"distinct","type":"boolean"},{"default":"true","required":"false","hint":"See documentation for findAll.","name":"parameterize","type":"any"},{"default":"","required":"false","hint":"The value returned if no records are found. Common usage is to set this to 0 to make sure a numeric value is always returned instead of a blank string.","name":"ifNull","type":"any"},{"default":"false","required":"false","hint":"See documentation for findAll.","name":"includeSoftDeletes","type":"boolean"},{"default":"","required":"false","hint":"See documentation for findAll.","name":"group","type":"string"}],"name":"average","availableIn":{},"tags":{"categoryClass":"","sectionClass":"","category":"","section":""}},{"extended":{"hasExtended":true,"docs":"<pre>&lt;!--- Instruct CFWheels to call the `fixObj` method ---&gt;\n&lt;cfset beforeCreate(&quot;fixObj&quot;)&gt;</pre>"},"hint":"Registers method(s) that should be called before a new object is created.","returntype":"","slug":"beforecreate","parameters":[{"default":"","required":"false","hint":"See documentation for afterNew.","name":"methods","type":"string"}],"name":"beforeCreate","availableIn":{},"tags":{"categoryClass":"","sectionClass":"","category":"","section":""}},{"extended":{"hasExtended":true,"docs":"<pre>&lt;!--- Instruct CFWheels to call the `fixObj` method ---&gt;\n&lt;cfset beforeDelete(&quot;fixObj&quot;)&gt;</pre>"},"hint":"Registers method(s) that should be called before an object is deleted.","returntype":"","slug":"beforedelete","parameters":[{"default":"","required":"false","hint":"See documentation for afterNew.","name":"methods","type":"string"}],"name":"beforeDelete","availableIn":{},"tags":{"categoryClass":"","sectionClass":"","category":"","section":""}},{"extended":{"hasExtended":true,"docs":"<pre>&lt;!--- Instruct CFWheels to call the `fixObj` method ---&gt;\n&lt;cfset beforeSave(&quot;fixObj&quot;)&gt;</pre>"},"hint":"Registers method(s) that should be called before an object is saved.","returntype":"","slug":"beforesave","parameters":[{"default":"","required":"false","hint":"See documentation for afterNew.","name":"methods","type":"string"}],"name":"beforeSave","availableIn":{},"tags":{"categoryClass":"","sectionClass":"","category":"","section":""}},{"extended":{"hasExtended":true,"docs":"<pre>&lt;!--- Instruct CFWheels to call the `fixObj` method ---&gt;\n&lt;cfset beforeUpdate(&quot;fixObj&quot;)&gt;</pre>"},"hint":"Registers method(s) that should be called before an existing object is updated.","returntype":"","slug":"beforeupdate","parameters":[{"default":"","required":"false","hint":"See documentation for afterNew.","name":"methods","type":"string"}],"name":"beforeUpdate","availableIn":{},"tags":{"categoryClass":"","sectionClass":"","category":"","section":""}},{"extended":{"hasExtended":true,"docs":"<pre>&lt;!--- Instruct CFWheels to call the `fixObj` method ---&gt;\n&lt;cfset beforeValidation(&quot;fixObj&quot;)&gt;</pre>"},"hint":"Registers method(s) that should be called before an object is validated.","returntype":"","slug":"beforevalidation","parameters":[{"default":"","required":"false","hint":"See documentation for afterNew.","name":"methods","type":"string"}],"name":"beforeValidation","availableIn":{},"tags":{"categoryClass":"","sectionClass":"","category":"","section":""}},{"extended":{"hasExtended":true,"docs":"<pre>&lt;!--- Instruct CFWheels to call the `fixObj` method ---&gt;\n&lt;cfset beforeValidationOnCreate(&quot;fixObj&quot;)&gt;</pre>"},"hint":"Registers method(s) that should be called before a new object is validated.","returntype":"","slug":"beforevalidationoncreate","parameters":[{"default":"","required":"false","hint":"See documentation for afterNew.","name":"methods","type":"string"}],"name":"beforeValidationOnCreate","availableIn":{},"tags":{"categoryClass":"","sectionClass":"","category":"","section":""}},{"extended":{"hasExtended":true,"docs":"<pre>&lt;!--- Instruct CFWheels to call the `fixObj` method ---&gt;\n&lt;cfset beforeValidationOnUpdate(&quot;fixObj&quot;)&gt;</pre>"},"hint":"Registers method(s) that should be called before an existing object is validated.","returntype":"","slug":"beforevalidationonupdate","parameters":[{"default":"","required":"false","hint":"See documentation for afterNew.","name":"methods","type":"string"}],"name":"beforeValidationOnUpdate","availableIn":{},"tags":{"categoryClass":"","sectionClass":"","category":"","section":""}},{"extended":{"hasExtended":true,"docs":"<pre>// Specify that instances of this model belong to an author. (The table for this model should have a foreign key set on it, typically named `authorid`.)\nbelongsTo(&quot;author&quot;);\n\n// Same as above, but because we have broken away from the foreign key naming convention, we need to set `modelName` and `foreignKey`\nbelongsTo(name=&quot;bookWriter&quot;, modelName=&quot;author&quot;, foreignKey=&quot;authorId&quot;);</pre>"},"hint":"Sets up a belongsTo association between this model and the specified one. Use this association when this model contains a foreign key referencing another model.","returntype":"","slug":"belongsto","parameters":[{"default":"","required":"true","hint":"Gives the association a name that you refer to when working with the association (in the include argument to findAll, to name one example).","name":"name","type":"string"},{"default":"","required":"false","hint":"Name of associated model (usually not needed if you follow CFWheels conventions because the model name will be deduced from the name argument).","name":"modelName","type":"string"},{"default":"","required":"false","hint":"Foreign key property name (usually not needed if you follow CFWheels conventions since the foreign key name will be deduced from the name argument).","name":"foreignKey","type":"string"},{"default":"","required":"false","hint":"Column name to join to if not the primary key (usually not needed if you follow wheels conventions since the join key will be the tables primary key/keys).","name":"joinKey","type":"string"},{"default":"inner","required":"false","hint":"Use to set the join type when joining associated tables. Possible values are inner (for INNER JOIN) and outer (for LEFT OUTER JOIN).","name":"joinType","type":"string"}],"name":"belongsTo","availableIn":{},"tags":{"categoryClass":"","sectionClass":"","category":"","section":""}},{"extended":{"hasExtended":true,"docs":"<pre>&lt;!--- view code ---&gt;\n&lt;cfoutput&gt;\n    #startFormTag(action=&quot;something&quot;)#\n        &lt;!--- form controls go here ---&gt;\n        #buttonTag(content=&quot;Submit this form&quot;, value=&quot;save&quot;)#\n    #endFormTag()#\n&lt;/cfoutput&gt;</pre>"},"hint":"Builds and returns a string containing a button form control.","returntype":"","slug":"buttontag","parameters":[{"default":"Save changes","required":"false","hint":"Content to display inside the button.","name":"content","type":"string"},{"default":"submit","required":"false","hint":"The type for the button: button, reset, or submit.","name":"type","type":"string"},{"default":"save","required":"false","hint":"The value of the button when submitted.","name":"value","type":"string"},{"default":"","required":"false","hint":"File name of the image file to use in the button form control.","name":"image","type":"string"},{"default":"","required":"false","hint":"Whether or not to disable the button upon clicking (prevents double-clicking).","name":"disable","type":"any"},{"default":"","required":"false","hint":"See documentation for textField","name":"prepend","type":"string"},{"default":"","required":"false","hint":"See documentation for textField","name":"append","type":"string"}],"name":"buttonTag","availableIn":{},"tags":{"categoryClass":"","sectionClass":"","category":"","section":""}},{"extended":{"hasExtended":true,"docs":"<pre>#buttonTo(text=&quot;Delete Account&quot;, action=&quot;perFormDelete&quot;, disable=&quot;Wait...&quot;)#\n\n// apply attributes to the input element by prefixing any arguments with &quot;input&quot;\n#buttonTo(text=&quot;Edit&quot;, action=&quot;edit&quot;, inputId=&quot;edit-button&quot;, inputClass=&quot;edit-button-class&quot;)#</pre>"},"hint":"Creates a form containing a single button that submits to the URL. The URL is built the same way as the linkTo function.","returntype":"","slug":"buttonto","parameters":[{"default":"","required":"false","hint":"The text content of the button.","name":"text","type":"string"},{"default":"","required":"false","hint":"See documentation for linkTo.","name":"confirm","type":"string"},{"default":"","required":"false","hint":"If you want to use an image for the button pass in the link to it here (relative from the images folder).","name":"image","type":"string"},{"default":"","required":"false","hint":"Pass in true if you want the button to be disabled when clicked (can help prevent multiple clicks), or pass in a string if you want the button disabled and the text on the button updated (to \"please wait...\", for example).","name":"disable","type":"any"},{"default":"","required":"false","hint":"See documentation for URLFor.","name":"route","type":"string"},{"default":"","required":"false","hint":"See documentation for URLFor.","name":"controller","type":"string"},{"default":"","required":"false","hint":"See documentation for URLFor.","name":"action","type":"string"},{"default":"","required":"false","hint":"See documentation for URLFor.","name":"key","type":"any"},{"default":"","required":"false","hint":"See documentation for URLFor.","name":"params","type":"string"},{"default":"","required":"false","hint":"See documentation for URLFor.","name":"anchor","type":"string"},{"default":"true","required":"false","hint":"See documentation for URLFor.","name":"onlyPath","type":"boolean"},{"default":"","required":"false","hint":"See documentation for URLFor.","name":"host","type":"string"},{"default":"","required":"false","hint":"See documentation for URLFor.","name":"protocol","type":"string"},{"default":"0","required":"false","hint":"See documentation for URLFor.","name":"port","type":"numeric"}],"name":"buttonTo","availableIn":{},"tags":{"categoryClass":"","sectionClass":"","category":"","section":""}},{"extended":{"hasExtended":true,"docs":"<pre>// Cache the `termsOfUse` action\ncaches(&quot;termsOfUse&quot;);\n\n// Cache the `termsOfUse` action for 30 minutes\ncaches(actions=&quot;browseByUser,browseByTitle&quot;, time=30);\n\n// Cache the `termsOfUse` and `codeOfConduct` actions, including their filters\ncaches(actions=&quot;termsOfUse,codeOfConduct&quot;, static=true);\n\n// Cache content separately based on region\ncaches(action=&quot;home&quot;, key=&quot;request.region&quot;);</pre>"},"hint":"Tells CFWheels to cache one or more actions.","returntype":"","slug":"caches","parameters":[{"default":"","required":"false","hint":"Action(s) to cache. This argument is also aliased as actions.","name":"action","type":"string"},{"default":"60","required":"false","hint":"Minutes to cache the action(s) for.","name":"time","type":"numeric"},{"default":"false","required":"false","hint":"Set to true to tell CFWheels that this is a static page and that it can skip running the controller filters (before and after filters set on actions). Please note that the onSessionStart and onRequestStart events still execute though.","name":"static","type":"boolean"},{"default":"","required":"false","hint":"List of variables to be evaluated at runtime and included in the cache key so that content can be cached separately.","name":"appendToKey","type":"string"}],"name":"caches","availableIn":{},"tags":{"categoryClass":"","sectionClass":"","category":"","section":""}},{"extended":{"hasExtended":true,"docs":"<pre>capitalize(text) &lt;!--- Capitalize a sentence, will result in &quot;Wheels is a framework&quot; ---&gt;\n#capitalize(&quot;wheels is a framework&quot;)#</pre>"},"hint":"Returns the text with the first character converted to uppercase.","returntype":"","slug":"capitalize","parameters":[{"default":"","required":"Yes","hint":"Text to capitalize.","name":"text","type":"string"}],"name":"capitalize","availableIn":{},"tags":{"categoryClass":"","sectionClass":"","category":"","section":""}},{"extended":{"hasExtended":true,"docs":"<pre>changedFrom(property) &lt;!--- Get a member object and change the `email` property on it ---&gt;\n&lt;cfset member = model(&quot;member&quot;).findByKey(params.memberId)&gt;\n&lt;cfset member.email = params.newEmail&gt;\n\n&lt;!--- Get the previous value (what the `email` property was before it was changed)---&gt;\n&lt;cfset oldValue = member.changedFrom(&quot;email&quot;)&gt;\n\n&lt;!--- The above can also be done using a dynamic function like this ---&gt;\n&lt;cfset oldValue = member.emailChangedFrom()&gt;</pre>"},"hint":"Returns the previous value of a property that has changed. Returns an empty string if no previous value exists. Wheels will keep a note of the previous property value until the object is saved to the database.","returntype":"","slug":"changedfrom","parameters":[{"default":"","required":"Yes","hint":"Name of property to get the previous value for.","name":"property","type":"string"}],"name":"changedFrom","availableIn":{},"tags":{"categoryClass":"","sectionClass":"","category":"","section":""}},{"extended":{"hasExtended":true,"docs":"<pre>changedProperties() &lt;!--- Get an object, change it, and then ask for its changes (will return a list of the property names that have changed, not the values themselves) ---&gt;\n&lt;cfset member = model(&quot;member&quot;).findByKey(params.memberId)&gt;\n&lt;cfset member.firstName = params.newFirstName&gt;\n&lt;cfset member.email = params.newEmail&gt;\n&lt;cfset changedProperties = member.changedProperties()&gt;</pre>"},"hint":"Returns a list of the object properties that have been changed but not yet saved to the database.","returntype":"","slug":"changedproperties","parameters":[],"name":"changedProperties","availableIn":{},"tags":{"categoryClass":"","sectionClass":"","category":"","section":""}},{"extended":{"hasExtended":true,"docs":"<pre>checkBox(objectName, property [, association, position, checkedValue, uncheckedValue, label, labelPlacement, prepend, append, prependToLabel, appendToLabel, errorElement, errorClass ]) &lt;!--- Basic example of a check box for a boolean field ---&gt;\n&lt;cfoutput&gt;\n    #checkBox(objectName=&quot;photo&quot;, property=&quot;isPublic&quot;, label=&quot;Display this photo publicly.&quot;)#\n&lt;/cfoutput&gt;\n\n&lt;!--- Shows check boxes for selecting public access for all photos provided by the `photos` association and nested properties ---&gt;\n&lt;cfoutput&gt;\n    &lt;cfloop from=&quot;1&quot; to=&quot;#ArrayLen(user.photos)#&quot; index=&quot;i&quot;&gt;\n        &lt;div&gt;\n            &lt;h3&gt;#user.photos[i].title#:&lt;/h3&gt;\n            &lt;div&gt;\n                #checkBox(objectName=&quot;user&quot;, association=&quot;photos&quot;, position=i, property=&quot;isPublic&quot;, label=&quot;Display this photo publicly.&quot;)#\n            &lt;/div&gt;\n        &lt;/div&gt;\n    &lt;/cfloop&gt;\n&lt;/cfoutput&gt;</pre>"},"hint":"Builds and returns a string containing a check box form control based on the supplied objectName and property. In most cases, this function generates a form field that should represent a boolean style field in your data. Use checkBoxTag() or hasManyCheckBox() to generate check boxes for selecting multiple values. Note: Pass any additional arguments like class, rel, and id, and the generated tag will also include those values as HTML attributes.","returntype":"","slug":"checkbox","parameters":[{"default":"","required":"Yes","hint":"The variable name of the object to build the form control for.","name":"objectName","type":"any"},{"default":"","required":"Yes","hint":"The name of the property to use in the form control.","name":"property","type":"string"},{"default":"","required":"No","hint":"The name of the association that the property is located on. Used for building nested forms that work with nested properties. If you are building a form with deep nesting, simply pass in a list to the nested object, and Wheels will figure it out.","name":"association","type":"string"},{"default":"","required":"No","hint":"The position used when referencing a hasMany relationship in the association argument. Used for building nested forms that work with nested properties. If you are building a form with deep nestings, simply pass in a list of positions, and Wheels will figure it out.","name":"position","type":"string"},{"default":"1","required":"No","hint":"The value of the check box when it's in the checked state.","name":"checkedValue","type":"string"},{"default":"0","required":"No","hint":"The value of the check box when it's in the unchecked state.","name":"uncheckedValue","type":"string"},{"default":"useDefaultLabel","required":"No","hint":"The label text to use in the form control.","name":"label","type":"string"},{"default":"around","required":"No","hint":"Whether to place the label before, after, or wrapped around the form control. Label text placement can be controlled using aroundLeft or aroundRight.","name":"labelPlacement","type":"string"},{"default":"","required":"No","hint":"String to prepend to the form control. Useful to wrap the form control with HTML tags.","name":"prepend","type":"string"},{"default":"","required":"No","hint":"String to append to the form control. Useful to wrap the form control with HTML tags.","name":"append","type":"string"},{"default":"","required":"No","hint":"String to prepend to the form control's label. Useful to wrap the form control with HTML tags.","name":"prependToLabel","type":"string"},{"default":"","required":"No","hint":"String to append to the form control's label. Useful to wrap the form control with HTML tags.","name":"appendToLabel","type":"string"},{"default":"span","required":"No","hint":"HTML tag to wrap the form control with when the object contains errors.","name":"errorElement","type":"string"},{"default":"fieldWithErrors","required":"No","hint":"The class name of the HTML tag that wraps the form control when there are errors.","name":"errorClass","type":"string"}],"name":"checkBox","availableIn":{},"tags":{"categoryClass":"","sectionClass":"","category":"","section":""}},{"extended":{"hasExtended":true,"docs":"<pre>&lt;!--- Example 1: Basic usage involves a `label`, `name`, and `value` ---&gt;\n&lt;cfoutput&gt;\n    #checkBoxTag(name=&quot;subscribe&quot;, value=&quot;true&quot;, label=&quot;Subscribe to our newsletter&quot;, checked=false)#\n&lt;/cfoutput&gt;\n\n&lt;!--- Example 2: Loop over a query to display choices and whether or not they are checked ---&gt;\n&lt;!--- - Controller code ---&gt;\n&lt;cfset pizza = model(&quot;pizza&quot;).findByKey(session.pizzaId)&gt;\n&lt;cfset selectedToppings = pizza.toppings()&gt;\n&lt;cfset toppings = model(&quot;topping&quot;).findAll(order=&quot;name&quot;)&gt;\n\n&lt;!--- View code ---&gt;\n&lt;fieldset&gt;\n\t&lt;legend&gt;Toppings&lt;/legend&gt;\n\t&lt;cfoutput query=&quot;toppings&quot;&gt;\n\t\t#checkBoxTag(name=&quot;toppings&quot;, value=&quot;true&quot;, label=toppings.name, checked=YesNoFormat(ListFind(ValueList(selectedToppings.id), toppings.id))#\n\t&lt;/cfoutput&gt;\n&lt;/fieldset&gt;</pre>"},"hint":"Builds and returns a string containing a check box form control based on the supplied name. Note: Pass any additional arguments like class, rel, and id, and the generated tag will also include those values as HTML attributes.","returntype":"","slug":"checkboxtag","parameters":[{"default":"","required":"true","hint":"See documentation for textFieldTag.","name":"name","type":"string"},{"default":"false","required":"false","hint":"Whether or not the check box should be checked by default.","name":"checked","type":"boolean"},{"default":"1","required":"false","hint":"Value of check box in its checked state.","name":"value","type":"string"},{"default":"","required":"false","hint":"The value of the check box when it's on the unchecked state.","name":"uncheckedValue","type":"string"},{"default":"","required":"false","hint":"See documentation for textField.","name":"label","type":"string"},{"default":"around","required":"false","hint":"See documentation for textField.","name":"labelPlacement","type":"string"},{"default":"","required":"false","hint":"See documentation for textField.","name":"prepend","type":"string"},{"default":"","required":"false","hint":"See documentation for textField.","name":"append","type":"string"},{"default":"","required":"false","hint":"See documentation for textField.","name":"prependToLabel","type":"string"},{"default":"","required":"false","hint":"See documentation for textField.","name":"appendToLabel","type":"string"}],"name":"checkBoxTag","availableIn":{},"tags":{"categoryClass":"","sectionClass":"","category":"","section":""}},{"extended":{"hasExtended":true,"docs":"<pre>// Convert startTime to UTC (maybe done in an &quot;after find&quot; call back) but then tell CFWheels to clear the information about this change (but not the change itself) so that it won't attempt to save the new value to the database, report it as being changed when calling hasChanged() etc.\n\nthis.startTime = DateConvert(&quot;Local2UTC&quot;, this.startTime);\nthis.clearChangeInformation(property=&quot;startTime&quot;);\n\n// Clear information for all properties\nthis.clearChangeInformation();</pre>"},"hint":"Clears all internal knowledge of the current state of the object.","returntype":"","slug":"clearchangeinformation","parameters":[{"default":"","required":"false","hint":"Name of property to clear information for.","name":"property","type":"string"}],"name":"clearChangeInformation","availableIn":{},"tags":{"categoryClass":"","sectionClass":"","category":"","section":""}},{"extended":{"hasExtended":true,"docs":"<pre>clearErrors([ property, name ]) &lt;!--- Clear all errors on the object as a whole ---&gt;\n&lt;cfset this.clearErrors()&gt;\n\n&lt;!--- Clear all errors on `firstName` ---&gt;\n&lt;cfset this.clearErrors(&quot;firstName&quot;)&gt;</pre>"},"hint":"Clears out all errors set on the object or only the ones set for a specific property or name.","returntype":"","slug":"clearerrors","parameters":[{"default":"","required":"No","hint":"Specify a property name here if you want to clear all errors set on that property.","name":"property","type":"string"},{"default":"","required":"No","hint":"Specify an error name here if you want to clear all errors set with that error name.","name":"name","type":"string"}],"name":"clearErrors","availableIn":{},"tags":{"categoryClass":"","sectionClass":"","category":"","section":""}},{"extended":{"hasExtended":true,"docs":"<pre>columnDataForProperty(property) &lt;!--- Get an object, set a value and then see if the property exists ---&gt;\n&lt;cfset employee = model(&quot;employee&quot;).new()&gt;\n&lt;cfset employee.columnDataForProperty(&quot;firstName&quot;)&gt;&lt;!--- returns column struct ---&gt;</pre>"},"hint":"Returns a struct with data for the named property.","returntype":"","slug":"columndataforproperty","parameters":[{"default":"","required":"Yes","hint":"Name of column to retrieve data for.","name":"property","type":"string"}],"name":"columnDataForProperty","availableIn":{},"tags":{"categoryClass":"","sectionClass":"","category":"","section":""}},{"extended":{"hasExtended":true,"docs":"<pre>columnForProperty(property) &lt;!--- Get an object, set a value and then see if the property exists ---&gt;\n&lt;cfset employee = model(&quot;employee&quot;).new()&gt;\n&lt;cfset employee.columnForProperty(&quot;firstName&quot;)&gt;&lt;!--- returns column name, in this case &quot;firstname&quot; if the convention is used ---&gt;</pre>"},"hint":"Returns the column name mapped for the named model property.","returntype":"","slug":"columnforproperty","parameters":[{"default":"","required":"Yes","hint":"Name of property to inspect.","name":"property","type":"string"}],"name":"columnForProperty","availableIn":{},"tags":{"categoryClass":"","sectionClass":"","category":"","section":""}},{"extended":{"hasExtended":true,"docs":"<pre>columnNames() &lt;!--- Get a list of all the column names in the table mapped to the `author` model ---&gt;\n&lt;cfset columns = model(&quot;author&quot;).columnNames()&gt;</pre>"},"hint":"Returns a list of column names in the table mapped to this model. The list is ordered according to the columns' ordinal positions in the database table.","returntype":"","slug":"columnnames","parameters":[],"name":"columnNames","availableIn":{},"tags":{"categoryClass":"","sectionClass":"","category":"","section":""}},{"extended":{"hasExtended":true,"docs":"<pre>columns() &lt;!--- Get the columns names in the order they are in the database ---&gt;\n&lt;cfset employee = model(&quot;employee&quot;).columns()&gt;</pre>"},"hint":"Returns an array of columns names for the table associated with this class. Does not include calculated properties that will be generated by the Wheels ORM.","returntype":"","slug":"columns","parameters":[],"name":"columns","availableIn":{},"tags":{"categoryClass":"","sectionClass":"","category":"","section":""}},{"extended":{"hasExtended":true,"docs":"<pre>compareTo() &lt;!--- Load a user requested in the URL/form and restrict access if it doesn't match the user stored in the session ---&gt;\n&lt;cfset user = model(&quot;user&quot;).findByKey(params.key)&gt;\n&lt;cfif not user.compareTo(session.user)&gt;\n    &lt;cfset renderPage(action=&quot;accessDenied&quot;)&gt;\n&lt;/cfif&gt;</pre>"},"hint":"Pass in another Wheels model object to see if the two objects are the same.","returntype":"","slug":"compareto","parameters":[],"name":"compareTo","availableIn":{},"tags":{"categoryClass":"","sectionClass":"","category":"","section":""}},{"extended":{"hasExtended":true,"docs":"<pre>&lt;!--- In your view ---&gt;\n&lt;cfsavecontent variable=&quot;mySidebar&quot;&gt;\n&lt;h1&gt;My Sidebar Text&lt;/h1&gt;\n&lt;/cfsavecontent&gt;\n&lt;cfset contentFor(sidebar=mySidebar)&gt;\n\n&lt;!--- In your layout ---&gt;\n&lt;html&gt;\n&lt;head&gt;\n    &lt;title&gt;My Site&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n\n&lt;cfoutput&gt;\n#includeContent(&quot;sidebar&quot;)#\n\n#includeContent()#\n&lt;/cfoutput&gt;\n\n&lt;/body&gt;\n&lt;/html&gt;</pre>"},"hint":"Used to store a section's output for rendering within a layout. This content store acts as a stack, so you can store multiple pieces of content for a given section.","returntype":"","slug":"contentfor","parameters":[{"default":"last","required":"false","hint":"The position in the section's stack where you want the content placed. Valid values are first, last, or the numeric position.","name":"position","type":"any"},{"default":"false","required":"false","hint":"Whether or not to overwrite any of the content. Valid values are false, true, or all.","name":"overwrite","type":"any"}],"name":"contentFor","availableIn":{},"tags":{"categoryClass":"","sectionClass":"","category":"","section":""}},{"extended":{"hasExtended":true,"docs":"<pre>&lt;!--- In `views/layout.cfm` ---&gt;\n&lt;cfoutput&gt;##contentForLayout()##&lt;/cfoutput&gt;</pre>"},"hint":"Includes content for the body section, which equates to the output generated by the view template run by the request.","returntype":"","slug":"contentforlayout","parameters":[],"name":"contentForLayout","availableIn":{},"tags":{"categoryClass":"","sectionClass":"","category":"","section":""}},{"extended":{"hasExtended":true,"docs":"<pre>controller(name [, params ]) &lt;cfset testController = controller(&quot;users&quot;, params)&gt;</pre>"},"hint":"Creates and returns a controller object with your own custom name and params. Used primarily for testing purposes.","returntype":"","slug":"controller","parameters":[{"default":"","required":"Yes","hint":"Name of the controller to create.","name":"name","type":"string"},{"default":"[runtime expression]","required":"No","hint":"The params struct (combination of form and URL variables).","name":"params","type":"struct"}],"name":"controller","availableIn":{},"tags":{"categoryClass":"","sectionClass":"","category":"","section":""}},{"extended":{"hasExtended":true,"docs":"<pre>// Count how many authors there are in the table\nauthorCount = model(&quot;author&quot;).count();\n\n// Count how many authors that have a last name starting with an &quot;A&quot;\nauthorOnACount = model(&quot;author&quot;).count(where=&quot;lastName LIKE ''A%''&quot;);\n\n// Count how many authors that have written books starting with an &quot;A&quot;\nauthorWithBooksOnACount = model(&quot;author&quot;).count(include=&quot;books&quot;, where=&quot;booktitle LIKE ''A%''&quot;);\n\n// Count the number of comments on a specific post (a `hasMany` association from `post` to `comment` is required)\n// The `commentCount` method will call `model(&quot;comment&quot;).count(where=&quot;postId=##post.id##&quot;)` internally\naPost = model(&quot;post&quot;).findByKey(params.postId);\namount = aPost.commentCount();</pre>"},"hint":"Returns the number of rows that match the arguments (or all rows if no arguments are passed in). Uses the SQL function COUNT. If no records can be found to perform the calculation on, 0 is returned.","returntype":"","slug":"count","parameters":[{"default":"","required":"false","hint":"This argument maps to the WHERE clause of the query. The following operators are supported: =, !=, <>, <, <=, >, >=, LIKE, NOT LIKE, IN, NOT IN, IS NULL, IS NOT NULL, AND, and OR (note that the key words need to be written in upper case). You can also use parentheses to group statements. You do not need to specify the table name(s); CFWheels will do that for you. Instead of using the where argument, you can create cleaner code by making use of a concept called Dynamic Finders.","name":"where","type":"string"},{"default":"","required":"false","hint":"Associations that should be included in the query using INNER or LEFT OUTER joins (which join type that is used depends on how the association has been set up in your model). If all included associations are set on the current model, you can specify them in a list (e.g. department,addresses,emails). You can build more complex include strings by using parentheses when the association is set on an included model, like album(artist(genre)), for example. These complex include strings only work when returnAs is set to query though.","name":"include","type":"string"},{"default":"false","required":"false","hint":"Set to true to force CFWheels to query the database even though an identical query may have been run in the same request. (The default in CFWheels is to get the second query from the request-level cache.)","name":"reload","type":"boolean"},{"default":"true","required":"false","hint":"Set to true to use cfqueryparam on all columns, or pass in a list of property names to use cfqueryparam on those only.","name":"parameterize","type":"any"},{"default":"false","required":"false","hint":"You can set this argument to true to include soft-deleted records in the results.","name":"includeSoftDeletes","type":"boolean"},{"default":"","required":"false","hint":"Maps to the GROUP BY clause of the query. You do not need to specify the table name(s); CFWheels will do that for you.","name":"group","type":"string"}],"name":"count","availableIn":{},"tags":{"categoryClass":"","sectionClass":"","category":"","section":""}},{"extended":{"hasExtended":true,"docs":"<pre>&lt;!--- Create a new author and save it to the database ---&gt;\n&lt;cfset newAuthor = model(&quot;author&quot;).create(params.author)&gt;\n\n&lt;!--- Same as above using named arguments ---&gt;\n&lt;cfset newAuthor = model(&quot;author&quot;).create(firstName=&quot;John&quot;, lastName=&quot;Doe&quot;)&gt;\n\n&lt;!--- Same as above using both named arguments and a struct ---&gt;\n&lt;cfset newAuthor = model(&quot;author&quot;).create(active=1, properties=params.author)&gt;\n\n&lt;!--- If you have a `hasOne` or `hasMany` association setup from `customer` to `order`, you can do a scoped call. (The `createOrder` method below will call `model(&quot;order&quot;).create(customerId=aCustomer.id, shipping=params.shipping)` internally.) ---&gt;\n&lt;cfset aCustomer = model(&quot;customer&quot;).findByKey(params.customerId)&gt;\n&lt;cfset anOrder = aCustomer.createOrder(shipping=params.shipping)&gt;</pre>"},"hint":"Creates a new object, saves it to the database (if the validation permits it), and returns it. If the validation fails, the unsaved object (with errors added to it) is still returned. Property names and values can be passed in either using named arguments or as a struct to the properties argument.","returntype":"","slug":"create","parameters":[{"default":"","required":"false","hint":"See documentation for new.","name":"properties","type":"struct"},{"default":"true","required":"false","hint":"See documentation for findAll.","name":"parameterize","type":"any"},{"default":"false","required":"false","hint":"See documentation for save.","name":"reload","type":"boolean"},{"default":"true","required":"false","hint":"See documentation for save.","name":"validate","type":"boolean"},{"default":"","required":"false","hint":"See documentation for save.","name":"transaction","type":"string"},{"default":"true","required":"false","hint":"See documentation for save.","name":"callbacks","type":"boolean"}],"name":"create","availableIn":{},"tags":{"categoryClass":"","sectionClass":"","category":"","section":""}},{"extended":{"hasExtended":true,"docs":"<pre>&lt;!--- Alternating table row colors ---&gt;\n&lt;table&gt;\n\t&lt;thead&gt;\n\t\t&lt;tr&gt;\n\t\t\t&lt;th&gt;Name&lt;/th&gt;\n\t\t\t&lt;th&gt;Phone&lt;/th&gt;\n\t\t&lt;/tr&gt;\n\t&lt;/thead&gt;\n\t&lt;tbody&gt;\n\t\t&lt;cfoutput query=&quot;employees&quot;&gt;\n\t\t\t&lt;tr class=&quot;##cycle(&quot;odd,even&quot;)##&quot;&gt;\n\t\t\t\t&lt;td&gt;##employees.name##&lt;/td&gt;\n\t\t\t\t&lt;td&gt;##employees.phone##&lt;/td&gt;\n\t\t\t&lt;/tr&gt;\n\t\t&lt;/cfoutput&gt;\n\t&lt;/tbody&gt;\n&lt;/table&gt;\n\n&lt;!--- Alternating row colors and shrinking emphasis ---&gt;\n&lt;cfoutput query=&quot;employees&quot; group=&quot;departmentId&quot;&gt;\n\t&lt;div class=&quot;##cycle(values=&quot;even,odd&quot;, name=&quot;row&quot;)##&quot;&gt;\n\t\t&lt;ul&gt;\n\t\t\t&lt;cfoutput&gt;\n\t\t\t\t&lt;cfset rank = cycle(values=&quot;president,vice-president,director,manager,specialist,intern&quot;, name=&quot;position&quot;)&gt;\n\t\t\t\t&lt;li class=&quot;##rank##&quot;&gt;##categories.categoryName##&lt;/li&gt;\n\t\t\t\t&lt;cfset resetCycle(&quot;emphasis&quot;)&gt;\n\t\t\t&lt;/cfoutput&gt;\n\t\t&lt;/ul&gt;\n\t&lt;/div&gt;\n&lt;/cfoutput&gt;</pre>"},"hint":"Cycles through list values every time it is called.","returntype":"","slug":"cycle","parameters":[{"default":"","required":"true","hint":"List of values to cycle through.","name":"values","type":"string"},{"default":"default","required":"false","hint":"Name to give the cycle. Useful when you use multiple cycles on a page.","name":"name","type":"string"}],"name":"cycle","availableIn":{},"tags":{"categoryClass":"","sectionClass":"","category":"","section":""}},{"extended":{"hasExtended":true,"docs":"<pre>dataSource(datasource [, username, password ]) &lt;!--- In models/User.cfc ---&gt;\n&lt;cffunction name=&quot;init&quot;&gt;\n    &lt;!--- Tell Wheels to use the data source named `users_source` instead of the default one whenever this model makes SQL calls  ---&gt;\n              &lt;cfset dataSource(&quot;users_source&quot;)&gt;\n&lt;/cffunction&gt;</pre>"},"hint":"Use this method to override the data source connection information for this model.","returntype":"","slug":"datasource","parameters":[{"default":"","required":"Yes","hint":"The data source name to connect to.","name":"datasource","type":"string"},{"default":"","required":"No","hint":"The username for the data source.","name":"username","type":"string"},{"default":"","required":"No","hint":"The password for the data source.","name":"password","type":"string"}],"name":"dataSource","availableIn":{},"tags":{"categoryClass":"","sectionClass":"","category":"","section":""}},{"extended":{"hasExtended":true,"docs":"<pre>dateSelect([ objectName, property, association, position, order, separator, startYear, endYear, monthDisplay, includeBlank, label, labelPlacement, prepend, append, prependToLabel, appendToLabel, errorElement, errorClass, combine ]) &lt;!--- View code ---&gt;\n&lt;cfoutput&gt;\n    #dateSelect(objectName=&quot;user&quot;, property=&quot;dateOfBirth&quot;)#\n&lt;/cfoutput&gt;\n\n&lt;!--- Show fields to select month and year ---&gt;\n&lt;cfoutput&gt;\n    #dateSelect(objectName=&quot;order&quot;, property=&quot;expirationDate&quot;, order=&quot;month,year&quot;)#\n&lt;/cfoutput&gt;</pre>"},"hint":"Builds and returns a string containing three select form controls for month, day, and year based on the supplied objectName and property.","returntype":"","slug":"dateselect","parameters":[{"default":"","required":"No","hint":"The variable name of the object to build the form control for.","name":"objectName","type":"any"},{"default":"","required":"Yes","hint":"The name of the property to use in the form control.","name":"property","type":"string"},{"default":"","required":"No","hint":"The name of the association that the property is located on. Used for building nested forms that work with nested properties. If you are building a form with deep nesting, simply pass in a list to the nested object, and Wheels will figure it out.","name":"association","type":"string"},{"default":"","required":"No","hint":"The position used when referencing a hasMany relationship in the association argument. Used for building nested forms that work with nested properties. If you are building a form with deep nestings, simply pass in a list of positions, and Wheels will figure it out.","name":"position","type":"string"},{"default":"month,day,year","required":"No","hint":"Use to change the order of or exclude date select tags.","name":"order","type":"string"},{"default":"","required":"No","hint":"Use to change the character that is displayed between the date select tags.","name":"seperator","type":"string"},{"default":"2009","required":"No","hint":"First year in select list.","name":"startYear","type":"numeric"},{"default":"2019","required":"No","hint":"Last year in select list.","name":"endYear","type":"numeric"},{"default":"names","required":"No","hint":"Pass in names, numbers, or abbreviations to control display.","name":"monthDisplay","type":"string"},{"default":"false","required":"No","hint":"Whether to include a blank option in the select form control. Pass true to include a blank line or a string that should represent what display text should appear for the empty value (for example, \"- Select One -\").","name":"includeBlank","type":"any"},{"default":"false","required":"No","hint":"The label text to use in the form control.","name":"label","type":"string"},{"default":"around","required":"No","hint":"Whether to place the label before, after, or wrapped around the form control. Label text placement can be controlled using aroundLeft or aroundRight.","name":"labelPlacement","type":"string"},{"default":"","required":"No","hint":"String to prepend to the form control. Useful to wrap the form control with HTML tags.","name":"prepend","type":"string"},{"default":"","required":"No","hint":"String to append to the form control. Useful to wrap the form control with HTML tags.","name":"append","type":"string"},{"default":"","required":"No","hint":"String to prepend to the form control's label. Useful to wrap the form control with HTML tags.","name":"prependToLabel","type":"string"},{"default":"","required":"No","hint":"String to append to the form control's label. Useful to wrap the form control with HTML tags.","name":"appendToLabel","type":"string"},{"default":"span","required":"No","hint":"HTML tag to wrap the form control with when the object contains errors.","name":"errorElement","type":"string"},{"default":"fieldWithErrors","required":"No","hint":"The class name of the HTML tag that wraps the form control when there are errors.","name":"errorClass","type":"string"},{"default":"","required":"No","hint":"","name":"combine","type":"boolean"}],"name":"dateSelect","availableIn":{},"tags":{"categoryClass":"","sectionClass":"","category":"","section":""}},{"extended":{"hasExtended":true,"docs":"<pre>&lt;!--- This &quot;Tag&quot; version of function accepts `name` and `selected` instead of binding to a model object ---&gt;\n&lt;cfoutput&gt;\n\t#dateSelectTags(name=&quot;dateStart&quot;, selected=params.dateStart)#\n&lt;/cfoutput&gt;\n\n&lt;!--- Show fields for month and year only ---&gt;\n&lt;cfoutput&gt;\n\t#dateSelectTags(name=&quot;expiration&quot;, selected=params.expiration, order=&quot;month,year&quot;)#\n&lt;/cfoutput&gt;</pre>"},"hint":"Builds and returns a string containing three select form controls (month, day, and year) based on a name and value.","returntype":"","slug":"dateselecttags","parameters":[{"default":"","required":"true","hint":"See documentation for textFieldTag.","name":"name","type":"string"},{"default":"","required":"false","hint":"See documentation for selectTag.","name":"selected","type":"string"},{"default":"month, day, year","required":"false","hint":"See documentation for dateSelect.","name":"order","type":"string"},{"default":"","required":"false","hint":"See documentation for dateSelect.","name":"separator","type":"string"},{"default":"2010","required":"false","hint":"See documentation for dateSelect.","name":"startYear","type":"numeric"},{"default":"2020","required":"false","hint":"See documentation for dateSelect.","name":"endYear","type":"numeric"},{"default":"names","required":"false","hint":"See documentation for dateSelect.","name":"monthDisplay","type":"string"},{"default":"January, February, March, April, May, June, July, August, September, October, November, December","required":"false","hint":"See documentation for dateSelect.","name":"monthNames","type":"string"},{"default":"Jan, Feb, Mar, Apr, May, Jun, Jul, Aug, Sep, Oct, Nov, Dec","required":"false","hint":"See documentation for dateSelect.","name":"monthAbbreviations","type":"string"},{"default":"false","required":"false","hint":"See documentation for select.","name":"includeBlank","type":"any"},{"default":"","required":"false","hint":"See documentation for dateSelect.","name":"label","type":"string"},{"default":"around","required":"false","hint":"See documentation for textField.","name":"labelPlacement","type":"string"},{"default":"","required":"false","hint":"See documentation for textField.","name":"prepend","type":"string"},{"default":"","required":"false","hint":"See documentation for textField.","name":"append","type":"string"},{"default":"","required":"false","hint":"See documentation for textField.","name":"prependToLabel","type":"string"},{"default":"","required":"false","hint":"See documentation for textField.","name":"appendToLabel","type":"string"},{"default":"","required":"false","hint":"See documentation for dateSelect.","name":"combine","type":"boolean"}],"name":"dateSelectTags","availableIn":{},"tags":{"categoryClass":"","sectionClass":"","category":"","section":""}},{"extended":{"hasExtended":true,"docs":"<pre>dateTimeSelect(objectName, property [, association, position, dateOrder, dateSeparator, startYear, endYear, monthDisplay, timeOrder, timeSeparator, minuteStep, secondStep, separator, includeBlank, label, labelPlacement, prepend, append, prependToLabel, appendToLabel, errorElement, errorClass, combine, twelveHour ]) &lt;!--- View code ---&gt;\n&lt;cfoutput&gt;\n    #dateTimeSelect(objectName=&quot;article&quot;, property=&quot;publishedAt&quot;)#\n&lt;/cfoutput&gt;\n\n&lt;!--- Show fields for month, day, hour, and minute ---&gt;\n&lt;cfoutput&gt;\n    #dateTimeSelect(objectName=&quot;appointment&quot;, property=&quot;dateTimeStart&quot;, dateOrder=&quot;month,day&quot;, timeOrder=&quot;hour,minute&quot;)#\n&lt;/cfoutput&gt;</pre>"},"hint":"Builds and returns a string containing six select form controls (three for date selection and the remaining three for time selection) based on the supplied objectName and property.","returntype":"","slug":"datetimeselect","parameters":[{"default":"","required":"No","hint":"The variable name of the object to build the form control for.","name":"objectName","type":"any"},{"default":"","required":"Yes","hint":"The name of the property to use in the form control.","name":"property","type":"string"},{"default":"","required":"No","hint":"The name of the association that the property is located on. Used for building nested forms that work with nested properties. If you are building a form with deep nesting, simply pass in a list to the nested object, and Wheels will figure it out.","name":"association","type":"string"},{"default":"","required":"No","hint":"The position used when referencing a hasMany relationship in the association argument. Used for building nested forms that work with nested properties. If you are building a form with deep nestings, simply pass in a list of positions, and Wheels will figure it out.","name":"position","type":"string"},{"default":"month,day,year","required":"No","hint":"Use to change the order of or exclude date select tags.","name":"dateOrder","type":"string"},{"default":"","required":"No","hint":"Use to change the character that is displayed between the date select tags.","name":"dateSeperator","type":"string"},{"default":"2009","required":"No","hint":"First year in select list.","name":"startYear","type":"numeric"},{"default":"2019","required":"No","hint":"Last year in select list.","name":"startYear","type":"numeric"},{"default":"names","required":"No","hint":"Pass in names, numbers, or abbreviations to control display.","name":"monthDisplay","type":"string"},{"default":"hour,minute,second","required":"No","hint":"Use to change the order of or exclude time select tags.","name":"timeOrder","type":"string"},{"default":":","required":"No","hint":"Use to change the character that is displayed between the time select tags.","name":"timeSeparator","type":"string"},{"default":"1","required":"No","hint":"Pass in 10 to only show minute 10, 20, 30, etc.","name":"minuteStep","type":"numeric"},{"default":"1","required":"No","hint":"Pass in 10 to only show seconds 10, 20, 30, etc","name":"secondStep","type":"numeric"},{"default":"-","required":"No","hint":"Use to change the character that is displayed between the first and second set of select tags.","name":"separator","type":"string"},{"default":"false","required":"No","hint":"Whether to include a blank option in the select form control. Pass true to include a blank line or a string that should represent what display text should appear for the empty value (for example, \"- Select One -\").","name":"includeBlank","type":"any"},{"default":"false","required":"No","hint":"The label text to use in the form control.","name":"label","type":"string"},{"default":"around","required":"No","hint":"Whether to place the label before, after, or wrapped around the form control. Label text placement can be controlled using aroundLeft or aroundRight.","name":"labelPlacement","type":"string"},{"default":"","required":"No","hint":"String to prepend to the form control. Useful to wrap the form control with HTML tags.","name":"prepend","type":"string"},{"default":"","required":"No","hint":"String to append to the form control. Useful to wrap the form control with HTML tags.","name":"append","type":"string"},{"default":"","required":"No","hint":"String to prepend to the form control's label. Useful to wrap the form control with HTML tags.","name":"prependToLabel","type":"string"},{"default":"","required":"No","hint":"String to append to the form control's label. Useful to wrap the form control with HTML tags.","name":"appendToLabel","type":"string"},{"default":"span","required":"No","hint":"HTML tag to wrap the form control with when the object contains errors.","name":"errorElement","type":"string"},{"default":"fieldWithErrors","required":"No","hint":"The class name of the HTML tag that wraps the form control when there are errors.","name":"errorClass","type":"string"},{"default":"","required":"No","hint":"Set to false to not combine the select parts into a single DateTime object.","name":"combine","type":"boolean"},{"default":"false","required":"No","hint":"whether to display the hours in 24 or 12 hour format. 12 hour format has AM/PM drop downs","name":"twelveHour","type":"boolean"}],"name":"dateTimeSelect","availableIn":{},"tags":{"categoryClass":"","sectionClass":"","category":"","section":""}},{"extended":{"hasExtended":true,"docs":"<pre>&lt;!--- This &quot;Tag&qquot; version of the function accepts a `name` and `selected` instead of binding to a model object ---&gt;\n&lt;cfoutput&gt;\n    #dateTimeSelectTags(name=&quot;dateTimeStart&quot;, selected=params.dateTimeStart)#\n&lt;/cfoutput&gt;\n\n&lt;!--- Show fields for month, day, hour, and minute ---&gt;\n&lt;cfoutput&gt;\n\t#dateTimeSelectTags(name=&quot;dateTimeStart&quot;, selected=params.dateTimeStart, dateOrder=&quot;month,day&quot;, timeOrder=&quot;hour,minute&quot;)#\n&lt;/cfoutput&gt;</pre>"},"hint":"Builds and returns a string containing six select form controls (three for date selection and the remaining three for time selection) based on a name.","returntype":"","slug":"datetimeselecttags","parameters":[{"default":"","required":"true","hint":"See documentation for textFieldTag.","name":"name","type":"string"},{"default":"","required":"false","hint":"See documentation for selectTag.","name":"selected","type":"string"},{"default":"month,day,year","required":"false","hint":"See documentation for dateTimeSelect.","name":"dateOrder","type":"string"},{"default":"","required":"false","hint":"See documentation for dateTimeSelect.","name":"dateSeparator","type":"string"},{"default":"2010","required":"false","hint":"See documentation for dateSelect.","name":"startYear","type":"numeric"},{"default":"2020","required":"false","hint":"See documentation for dateSelect.","name":"endYear","type":"numeric"},{"default":"names","required":"false","hint":"See documentation for dateSelect.","name":"monthDisplay","type":"string"},{"default":"January,February,March,April,May,June,July,August,September,October,November,December","required":"false","hint":"See documentation for dateSelect.","name":"monthNames","type":"string"},{"default":"Jan,Feb,Mar,Apr,May,Jun,Jul,Aug,Sep,Oct,Nov,Dec","required":"false","hint":"See documentation for dateSelect.","name":"monthAbbreviations","type":"string"},{"default":"hour,minute,second","required":"false","hint":"See documentation for dateTimeSelect.","name":"timeOrder","type":"string"},{"default":":","required":"false","hint":"See documentation for dateTimeSelect.","name":"timeSeparator","type":"string"},{"default":"1","required":"false","hint":"See documentation for timeSelect.","name":"minuteStep","type":"numeric"},{"default":"1","required":"false","hint":"See documentation for timeSelect.","name":"secondStep","type":"numeric"},{"default":"-","required":"false","hint":"See documentation for dateTimeSelect.","name":"separator","type":"string"},{"default":"false","required":"false","hint":"See documentation for select.","name":"includeBlank","type":"any"},{"default":"","required":"false","hint":"See documentation for dateSelect.","name":"label","type":"string"},{"default":"around","required":"false","hint":"See documentation for textField.","name":"labelPlacement","type":"string"},{"default":"","required":"false","hint":"See documentation for textField.","name":"prepend","type":"string"},{"default":"","required":"false","hint":"See documentation for textField.","name":"append","type":"string"},{"default":"","required":"false","hint":"See documentation for textField.","name":"prependToLabel","type":"string"},{"default":"","required":"false","hint":"See documentation for textField.","name":"appendToLabel","type":"string"},{"default":"","required":"false","hint":"See documentation for dateSelect.","name":"combine","type":"boolean"},{"default":"false","required":"false","hint":"See documentation for timeSelect.","name":"twelveHour","type":"boolean"}],"name":"dateTimeSelectTags","availableIn":{},"tags":{"categoryClass":"","sectionClass":"","category":"","section":""}},{"extended":{"hasExtended":true,"docs":"<pre>&lt;!--- This &quot;Tag&quot; version of the function accepts a `name` and `selected` instead of binding to a model object ---&gt;\n&lt;cfoutput&gt;\n    #daySelectTag(name=&quot;dayOfWeek&quot;, selected=params.dayOfWeek)#\n&lt;/cfoutput&gt;</pre>"},"hint":"Builds and returns a string containing a select form control for the days of the week based on the supplied name.","returntype":"","slug":"dayselecttag","parameters":[{"default":"","required":"true","hint":"See documentation for textFieldTag.","name":"name","type":"string"},{"default":"","required":"false","hint":"The day that should be selected initially.","name":"selected","type":"string"},{"default":"false","required":"false","hint":"See documentation for select.","name":"includeBlank","type":"any"},{"default":"","required":"false","hint":"See documentation for textField.","name":"label","type":"string"},{"default":"around","required":"false","hint":"See documentation for textField.","name":"labelPlacement","type":"string"},{"default":"","required":"false","hint":"See documentation for textField.","name":"prepend","type":"string"},{"default":"","required":"false","hint":"See documentation for textField.","name":"append","type":"string"},{"default":"","required":"false","hint":"See documentation for textField.","name":"prependToLabel","type":"string"},{"default":"","required":"false","hint":"See documentation for textField.","name":"appendToLabel","type":"string"}],"name":"daySelectTag","availableIn":{},"tags":{"categoryClass":"","sectionClass":"","category":"","section":""}},{"extended":{"hasExtended":true,"docs":"<pre>delete([ parameterize, transaction, callbacks, includeSoftDeletes, softDelete ]) &lt;!--- Get a post object and then delete it from the database ---&gt;\n&lt;cfset post = model(&quot;post&quot;).findByKey(33)&gt;\n&lt;cfset post.delete()&gt;\n\n&lt;!--- If you have a `hasMany` association setup from `post` to `comment`, you can do a scoped call. (The `deleteComment` method below will call `comment.delete()` internally.) ---&gt;\n&lt;cfset post = model(&quot;post&quot;).findByKey(params.postId)&gt;\n&lt;cfset comment = model(&quot;comment&quot;).findByKey(params.commentId)&gt;\n&lt;cfset post.deleteComment(comment)&gt;</pre>"},"hint":"Deletes the object, which means the row is deleted from the database (unless prevented by a beforeDelete callback). Returns true on successful deletion of the row, false otherwise.","returntype":"","slug":"delete","parameters":[{"default":"true","required":"No","hint":"Set to true to use cfqueryparam on all columns, or pass in a list of property names to use cfqueryparam on those only.","name":"parameterize","type":"any"},{"default":"[runtime expression]","required":"No","hint":"Set this to commit to update the database when the save has completed, rollback to run all the database queries but not commit them, or none to skip transaction handling altogether.","name":"transaction","type":"string"},{"default":"true","required":"No","hint":"Set to false to disable callbacks for this operation.","name":"callbacks","type":"boolean"},{"default":"false","required":"No","hint":"You can set this argument to true to include soft-deleted records in the results.","name":"includeSoftDeletes","type":"boolean"},{"default":"true","required":"No","hint":"Set to false to permanently delete a record, even if it has a soft delete column.","name":"softDelete","type":"boolean"}],"name":"delete","availableIn":{},"tags":{"categoryClass":"","sectionClass":"","category":"","section":""}},{"extended":{"hasExtended":true,"docs":"<pre>deleteAll([ where, include, reload, parameterize, instantiate, transaction, callbacks, includeSoftDeletes, softDelete ]) &lt;!--- Delete all inactive users without instantiating them (will skip validation and callbacks) ---&gt;\n&lt;cfset recordsDeleted = model(&quot;user&quot;).deleteAll(where=&quot;inactive=1&quot;, instantiate=false)&gt;\n\n&lt;!--- If you have a `hasMany` association setup from `post` to `comment`, you can do a scoped call. (The `deleteAllComments` method below will call `model(&quot;comment&quot;).deleteAll(where=&quot;postId=#post.id#&quot;)` internally.) ---&gt;\n&lt;cfset post = model(&quot;post&quot;).findByKey(params.postId)&gt;\n&lt;cfset howManyDeleted = post.deleteAllComments()&gt;</pre>"},"hint":"Deletes all records that match the where argument. By default, objects will not be instantiated and therefore callbacks and validations are not invoked. You can change this behavior by passing in instantiate=true. Returns the number of records that were deleted.","returntype":"","slug":"deleteall","parameters":[{"default":"","required":"No","hint":"This argument maps to the WHERE clause of the query. The following operators are supported: =, !=, <>, <, <=, >, >=, LIKE, NOT LIKE, IN, NOT IN, IS NULL, IS NOT NULL, AND, and OR. (Note that the key words need to be written in upper case.) You can also use parentheses to group statements. You do not need to specify the table name(s); Wheels will do that for you.","name":"where","type":"string"},{"default":"","required":"No","hint":"Associations that should be included in the query using INNER or LEFT OUTER joins (which join type that is used depends on how the association has been set up in your model). If all included associations are set on the current model, you can specify them in a list (e.g. department,addresses,emails). You can build more complex include strings by using parentheses when the association is set on an included model, like album(artist(genre)), for example. These complex include strings only work when returnAs is set to query though.","name":"include","type":"string"},{"default":"false","required":"No","hint":"Set to true to force Wheels to query the database even though an identical query may have been run in the same request. (The default in Wheels is to get the second query from the request-level cache.)","name":"reload","type":"boolean"},{"default":"true","required":"No","hint":"Set to true to use cfqueryparam on all columns, or pass in a list of property names to use cfqueryparam on those only.","name":"parameterize","type":"any"},{"default":"false","required":"No","hint":"Whether or not to instantiate the object(s) first. When objects are not instantiated, any callbacks and validations set on them will be skipped.","name":"instantiate","type":"boolean"},{"default":"[runtime expression]","required":"No","hint":"Set this to commit to update the database when the save has completed, rollback to run all the database queries but not commit them, or none to skip transaction handling altogether.","name":"transaction","type":"string"},{"default":"true","required":"No","hint":"Set to false to disable callbacks for this operation.","name":"callbacks","type":"boolean"},{"default":"false","required":"No","hint":"You can set this argument to true to include soft-deleted records in the results.","name":"includeSoftDeletes","type":"boolean"},{"default":"true","required":"No","hint":"Set to false to permanently delete a record, even if it has a soft delete column.","name":"softDelete","type":"boolean"}],"name":"deleteAll","availableIn":{},"tags":{"categoryClass":"","sectionClass":"","category":"","section":""}},{"extended":{"hasExtended":true,"docs":"<pre>deleteByKey(key [, reload, transaction, callbacks, includeSoftDeletes, softDelete ]) &lt;!--- Delete the user with the primary key value of `1` ---&gt;\n&lt;cfset result = model(&quot;user&quot;).deleteByKey(1)&gt;</pre>"},"hint":"Finds the record with the supplied key and deletes it. Returns true on successful deletion of the row, false otherwise.","returntype":"","slug":"deletebykey","parameters":[{"default":"","required":"Yes","hint":"Primary key value(s) of the record to fetch. Separate with comma if passing in multiple primary key values. Accepts a string, list, or a numeric value.","name":"key","type":"any"},{"default":"false","required":"No","hint":"Set to true to force Wheels to query the database even though an identical query may have been run in the same request. (The default in Wheels is to get the second query from the request-level cache.)","name":"reload","type":"boolean"},{"default":"[runtime expression]","required":"No","hint":"Set this to commit to update the database when the save has completed, rollback to run all the database queries but not commit them, or none to skip transaction handling altogether.","name":"transaction","type":"string"},{"default":"true","required":"No","hint":"Set to false to disable callbacks for this operation.","name":"callbacks","type":"boolean"},{"default":"false","required":"No","hint":"You can set this argument to true to include soft-deleted records in the results.","name":"includeSoftDeletes","type":"boolean"},{"default":"true","required":"No","hint":"Set to false to permanently delete a record, even if it has a soft delete column.","name":"softDelete","type":"boolean"}],"name":"deleteByKey","availableIn":{},"tags":{"categoryClass":"","sectionClass":"","category":"","section":""}},{"extended":{"hasExtended":true,"docs":"<pre>deleteOne([ where, order, reload, transaction, callbacks, includeSoftDeletes, softDelete ]) &lt;!--- Delete the user that signed up last ---&gt;\n&lt;cfset result = model(&quot;user&quot;).deleteOne(order=&quot;signupDate DESC&quot;)&gt;\n\n&lt;!--- If you have a `hasOne` association setup from `user` to `profile` you can do a scoped call (the `deleteProfile` method below will call `model(&quot;profile&quot;).deleteOne(where=&quot;userId=#aUser.id#&quot;)` internally) ---&gt;\n&lt;cfset aUser = model(&quot;user&quot;).findByKey(params.userId)&gt;\n&lt;cfset aUser.deleteProfile()&gt;</pre>"},"hint":"Gets an object based on conditions and deletes it.","returntype":"","slug":"deleteone","parameters":[{"default":"","required":"No","hint":"This argument maps to the WHERE clause of the query. The following operators are supported: =, !=, <>, <, <=, >, >=, LIKE, NOT LIKE, IN, NOT IN, IS NULL, IS NOT NULL, AND, and `OR. (Note that the key words need to be written in upper case.) You can also use parentheses to group statements. You do not need to specify the table name(s); Wheels will do that for you.","name":"where","type":"string"},{"default":"","required":"No","hint":"Maps to the ORDER BY clause of the query. You do not need to specify the table name(s); Wheels will do that for you.","name":"order","type":"string"},{"default":"false","required":"No","hint":"Set to true to force Wheels to query the database even though an identical query may have been run in the same request. (The default in Wheels is to get the second query from the request-level cache.)","name":"reload","type":"boolean"},{"default":"[runtime expression]","required":"No","hint":"Set this to commit to update the database when the save has completed, rollback to run all the database queries but not commit them, or none to skip transaction handling altogether.","name":"transaction","type":"string"},{"default":"true","required":"No","hint":"Set to false to disable callbacks for this operation.","name":"callbacks","type":"boolean"},{"default":"false","required":"No","hint":"You can set this argument to true to include soft-deleted records in the results.","name":"includeSoftDeletes","type":"boolean"},{"default":"true","required":"No","hint":"Set to false to permanently delete a record, even if it has a soft delete column.","name":"softDelete","type":"boolean"}],"name":"deleteOne","availableIn":{},"tags":{"categoryClass":"","sectionClass":"","category":"","section":""}},{"extended":{"hasExtended":true,"docs":"<pre>deobfuscateParam(param) &lt;!--- Get the original value from an obfuscated one ---&gt;\n&lt;cfset originalValue = deobfuscateParam(&quot;b7ab9a50&quot;)&gt;</pre>"},"hint":"Deobfuscates a value.","returntype":"","slug":"deobfuscateparam","parameters":[{"default":"","required":"Yes","hint":"Value to deobfuscate.","name":"param","type":"string"}],"name":"deobfuscateParam","availableIn":{},"tags":{"categoryClass":"","sectionClass":"","category":"","section":""}},{"extended":{"hasExtended":true,"docs":"<pre>distanceOfTimeInWords(fromTime, toTime [, includeSeconds ]) &lt;cfset aWhileAgo = Now() - 30&gt;\n&lt;cfset rightNow = Now()&gt;\n&lt;cfoutput&gt;#distanceOfTimeInWords(aWhileAgo, rightNow)#&lt;/cfoutput&gt;</pre>"},"hint":"Pass in two dates to this method, and it will return a string describing the difference between them.","returntype":"","slug":"distanceoftimeinwords","parameters":[{"default":"","required":"Yes","hint":"Date to compare from..","name":"fromTime","type":"date"},{"default":",","required":"Yes","hint":"Date to compare to.","name":"toTime","type":"date"},{"default":"false","required":"No","hint":"Whether or not to include the number of seconds in the returned string.","name":"includeSeconds","type":"boolean"}],"name":"distanceOfTimeInWords","availableIn":{},"tags":{"categoryClass":"","sectionClass":"","category":"","section":""}},{"extended":{"hasExtended":true,"docs":"<pre>&lt;!--- view code ---&gt;\n\t\t&lt;cfoutput&gt;\n\t\t    #startFormTag(action=&quot;create&quot;)#\n\t\t        &lt;!--- your form controls ---&gt;\n\t\t    #endFormTag()#\n\t\t&lt;/cfoutput&gt;</pre>"},"hint":"Builds and returns a string containing the closing form tag.","returntype":"","slug":"endformtag","parameters":[{"default":"","required":"false","hint":"See documentation for textField","name":"prepend","type":"string"},{"default":"","required":"false","hint":"See documentation for textField","name":"append","type":"string"}],"name":"endFormTag","availableIn":{},"tags":{"categoryClass":"","sectionClass":"","category":"","section":""}},{"extended":{"hasExtended":true,"docs":"<pre>errorCount([ property, name ]) &lt;!--- Check how many errors are set on the object ---&gt;\n&lt;cfif author.errorCount() GTE 10&gt;\n    &lt;!--- Do something to deal with this very erroneous author here... ---&gt;\n&lt;/cfif&gt;\n\n&lt;!--- Check how many errors are associated with the `email` property ---&gt;\n&lt;cfif author.errorCount(&quot;email&quot;) gt 0&gt;\n    &lt;!--- Do something to deal with this erroneous author here... ---&gt;\n&lt;/cfif&gt;</pre>"},"hint":"Returns the number of errors this object has associated with it. Specify property or name if you wish to count only specific errors.","returntype":"","slug":"errorcount","parameters":[{"default":"","required":"No","hint":"Specify a property name here if you want to count only errors set on a specific property.","name":"property","type":"string"},{"default":"","required":"No","hint":"Specify an error name here if you want to count only errors set with a specific error name.","name":"name","type":"string"}],"name":"errorCount","availableIn":{},"tags":{"categoryClass":"","sectionClass":"","category":"","section":""}},{"extended":{"hasExtended":true,"docs":"<pre>errorMessageOn(objectName, property [, prependText, appendText, wrapperElement, class ]) &lt;!--- view code ---&gt;\n&lt;cfoutput&gt;\n  #errorMessageOn(objectName=&quot;user&quot;, property=&quot;email&quot;)#\n&lt;/cfoutput&gt;</pre>"},"hint":"Returns the error message, if one exists, on the object's property. If multiple error messages exist, the first one is returned.","returntype":"","slug":"errormessageon","parameters":[{"default":"","required":"Yes","hint":"The variable name of the object to display the error message for.","name":"objectName","type":"string"},{"default":"","required":"Yes","hint":"The name of the property to display the error message for.","name":"property","type":"string"},{"default":"","required":"No","hint":"String to prepend to the error message.","name":"prependText","type":"string"},{"default":"","required":"No","hint":"String to append to the error message.","name":"appendText","type":"string"},{"default":"span","required":"No","hint":"HTML element to wrap the error message in.","name":"wrapperElement","type":"string"},{"default":"errorMessage","required":"No","hint":"CSS class to set on the wrapper element.","name":"class","type":"string"}],"name":"errorMessageOn","availableIn":{},"tags":{"categoryClass":"","sectionClass":"","category":"","section":""}},{"extended":{"hasExtended":true,"docs":"<pre>errorMessagesFor(objectName [, class, showDuplicates ]) &lt;!--- view code ---&gt;\n&lt;cfoutput&gt;\n    #errorMessagesFor(objectName=&quot;user&quot;)#\n&lt;/cfoutput&gt;</pre>"},"hint":"Builds and returns a list (ul tag with a default class of errorMessages) containing all the error messages for all the properties of the object (if any). Returns an empty string otherwise.","returntype":"","slug":"errormessagesfor","parameters":[{"default":"","required":"Yes","hint":"The variable name of the object to display error messages for.","name":"objectName","type":"string"},{"default":"errorMessage","required":"No","hint":"CSS class to set on the ul element.","name":"class","type":"string"},{"default":"true","required":"No","hint":"Whether or not to show duplicate error messages.","name":"showDuplicates","type":"boolean"}],"name":"errorMessagesFor","availableIn":{},"tags":{"categoryClass":"","sectionClass":"","category":"","section":""}},{"extended":{"hasExtended":true,"docs":"<pre>errorsOn(property [, name ]) &lt;!--- Get all errors related to the email address of the user object ---&gt; &lt;cfset errors = user.errorsOn(&quot;emailAddress&quot;)&gt;</pre>"},"hint":"Returns an array of all errors associated with the supplied property (and error name if passed in).","returntype":"","slug":"errorson","parameters":[{"default":"","required":"Yes","hint":"Specify the property name to return errors for here.","name":"property","type":"string"},{"default":"","required":"No","hint":"If you want to return only errors on the above property set with a specific error name you can specify it here.","name":"name","type":"string"}],"name":"errorsOn","availableIn":{},"tags":{"categoryClass":"","sectionClass":"","category":"","section":""}},{"extended":{"hasExtended":true,"docs":"<pre>errorsOnBase([ name ]) &lt;!--- Get all general type errors for the user object ---&gt;\n&lt;cfset errors = user.errorsOnBase()&gt;</pre>"},"hint":"Returns an array of all errors associated with the object as a whole (not related to any specific property).","returntype":"","slug":"errorsonbase","parameters":[{"default":"","required":"No","hint":"Specify an error name here to only return errors for that error name.","name":"name","type":"string"}],"name":"errorsOnBase","availableIn":{},"tags":{"categoryClass":"","sectionClass":"","category":"","section":""}},{"extended":{"hasExtended":true,"docs":"<pre>#excerpt(text=&quot;ColdFusion CFWheels is a Rails-like MVC framework for Adobe ColdFusion, Railo and Lucee&quot;, phrase=&quot;framework&quot;, radius=5)#\n-&gt; ... MVC framework for ...</pre>"},"hint":"Extracts an excerpt from text that matches the first instance of a given phrase.","returntype":"","slug":"excerpt","parameters":[{"default":"","required":"true","hint":"The text to extract an excerpt from.","name":"text","type":"string"},{"default":"","required":"true","hint":"The phrase to extract.","name":"phrase","type":"string"},{"default":"100","required":"false","hint":"Number of characters to extract surrounding the phrase.","name":"radius","type":"numeric"},{"default":"...","required":"false","hint":"String to replace first and/or last characters with.","name":"excerptString","type":"string"}],"name":"excerpt","availableIn":{},"tags":{"categoryClass":"","sectionClass":"","category":"","section":""}},{"extended":{"hasExtended":true,"docs":"<pre>// Checking if Joe exists in the database\nresult = model(&quot;user&quot;).exists(where=&quot;firstName = 'Joe'&quot;);\n\n// Checking if a specific user exists based on a primary key valued passed in through the URL/form in an if statement\nif (model(&quot;user&quot;).exists(keyparams.key))\n{\n\t// Do something\n}\n\n// If you have a `belongsTo` association setup from `comment` to `post`, you can do a scoped call. (The `hasPost` method below will call `model(&quot;post&quot;).exists(comment.postId)` internally.)\ncomment = model(&quot;comment&quot;).findByKey(params.commentId);\ncommentHasAPost = comment.hasPost();\n\n// If you have a `hasOne` association setup from `user` to `profile`, you can do a scoped call. (The `hasProfile` method below will call `model(&quot;profile&quot;).exists(where=&quot;userId=#user.id#&quot;)` internally.)\nuser = model(&quot;user&quot;).findByKey(params.userId);\nuserHasProfile = user.hasProfile();\n\n// If you have a `hasMany` association setup from `post` to `comment`, you can do a scoped call. (The `hasComments` method below will call `model(&quot;comment&quot;).exists(where=&quot;postid=#post.id#&quot;)` internally.)\npost = model(&quot;post&quot;).findByKey(params.postId);\npostHasComments = post.hasComments();</pre>"},"hint":"Checks if a record exists in the table. You can pass in either a primary key value to the key argument or a string to the where argument. If you don't pass in either of those, it will simply check if any record exists in the table.","returntype":"","slug":"exists","parameters":[{"default":"","required":"false","hint":"Primary key value(s) of the record. Separate with comma if passing in multiple primary key values. Accepts a string, list, or a numeric value.","name":"key","type":"any"},{"default":"","required":"false","hint":"This argument maps to the WHERE clause of the query. The following operators are supported: =, !=, <>, <, <=, >, >=, LIKE, NOT LIKE, IN, NOT IN, IS NULL, IS NOT NULL, AND, and OR (note that the key words need to be written in upper case). You can also use parentheses to group statements. You do not need to specify the table name(s); CFWheels will do that for you. Instead of using the where argument, you can create cleaner code by making use of a concept called Dynamic Finders.","name":"where","type":"string"},{"default":"false","required":"false","hint":"Set to true to force CFWheels to query the database even though an identical query may have been run in the same request. (The default in CFWheels is to get the second query from the request-level cache.)","name":"reload","type":"boolean"},{"default":"true","required":"false","hint":"Set to true to use cfqueryparam on all columns, or pass in a list of property names to use cfqueryparam on those only.","name":"parameterize","type":"any"},{"default":"false","required":"false","hint":"You can set this argument to true to include soft-deleted records in the results.","name":"includeSoftDeletes","type":"boolean"}],"name":"exists","availableIn":{},"tags":{"categoryClass":"","sectionClass":"","category":"","section":""}},{"extended":{"hasExtended":true,"docs":"<pre>&lt;!--- Provide a `label` and the required `objectName` and `property` ---&gt;\n&lt;cfoutput&gt;\n    #fileField(label=&quot;Photo&quot;, objectName=&quot;photo&quot;, property=&quot;imageFile&quot;)#\n&lt;/cfoutput&gt;\n\n&lt;!--- Display fields for photos provided by the `screenshots` association and nested properties ---&gt;\n&lt;fieldset&gt;\n\t&lt;legend&gt;Screenshots&lt;/legend&gt;\n\t&lt;cfloop from=&quot;1&quot; to=&quot;##ArrayLen(site.screenshots)##&quot; index=&quot;i&quot;&gt;\n\t\t#fileField(label=&quot;File ####i##&quot;, objectName=&quot;site&quot;, association=&quot;screenshots&quot;, position=i, property=&quot;file&quot;)#\n\t\t#textField(label=&quot;Caption ####i##&quot;, objectName=&quot;site&quot;, association=&quot;screenshots&quot;, position=i, property=&quot;caption&quot;)#\n\t&lt;/cfloop&gt;\n&lt;/fieldset&gt;</pre>"},"hint":"Builds and returns a string containing a file field form control based on the supplied objectName and property. Note: Pass any additional arguments like class, rel, and id, and the generated tag will also include those values as HTML attributes.","returntype":"","slug":"filefield","parameters":[{"default":"","required":"true","hint":"See documentation for textField.","name":"objectName","type":"any"},{"default":"","required":"true","hint":"See documentation for textField.","name":"property","type":"string"},{"default":"","required":"false","hint":"See documentation for textfield.","name":"association","type":"string"},{"default":"","required":"false","hint":"See documentation for textfield.","name":"position","type":"string"},{"default":"useDefaultLabel","required":"false","hint":"See documentation for textField.","name":"label","type":"string"},{"default":"around","required":"false","hint":"See documentation for textField.","name":"labelPlacement","type":"string"},{"default":"","required":"false","hint":"See documentation for textField.","name":"prepend","type":"string"},{"default":"","required":"false","hint":"See documentation for textField.","name":"append","type":"string"},{"default":"","required":"false","hint":"See documentation for textField.","name":"prependToLabel","type":"string"},{"default":"","required":"false","hint":"See documentation for textField.","name":"appendToLabel","type":"string"},{"default":"span","required":"false","hint":"See documentation for textField.","name":"errorElement","type":"string"},{"default":"fieldWithErrors","required":"false","hint":"See documentation for textField.","name":"errorClass","type":"string"}],"name":"fileField","availableIn":{},"tags":{"categoryClass":"","sectionClass":"","category":"","section":""}},{"extended":{"hasExtended":true,"docs":"<pre>&lt;!--- Basic usage usually involves a `label`, `name`, and `value` ---&gt;\n&lt;cfoutput&gt;\n    #fileFieldTag(label=&quot;Photo&quot;, name=&quot;photo&quot;, value=params.photo)#\n&lt;/cfoutput&gt;</pre>"},"hint":"Builds and returns a string containing a file form control based on the supplied name. Note: Pass any additional arguments like class, rel, and id, and the generated tag will also include those values as HTML attributes.","returntype":"","slug":"filefieldtag","parameters":[{"default":"","required":"true","hint":"See documentation for textFieldTag.","name":"name","type":"string"},{"default":"","required":"false","hint":"See documentation for textField.","name":"label","type":"string"},{"default":"around","required":"false","hint":"See documentation for textField.","name":"labelPlacement","type":"string"},{"default":"","required":"false","hint":"See documentation for textField.","name":"prepend","type":"string"},{"default":"","required":"false","hint":"See documentation for textField.","name":"append","type":"string"},{"default":"","required":"false","hint":"See documentation for textField.","name":"prependToLabel","type":"string"},{"default":"","required":"false","hint":"See documentation for textField.","name":"appendToLabel","type":"string"}],"name":"fileFieldTag","availableIn":{},"tags":{"categoryClass":"","sectionClass":"","category":"","section":""}},{"extended":{"hasExtended":true,"docs":"<pre>// Get filter chain\nmyFilterChain = filterChain();\n\n// Get filter chain for after filters only\nmyFilterChain = filterChain(type=&quot;after&quot;);</pre>"},"hint":"Returns an array of all the filters set on this controller in the order in which they will be executed.","returntype":"","slug":"filterchain","parameters":[{"default":"all","required":"false","hint":"Use this argument to return only before or after filters.","name":"type","type":"string"}],"name":"filterChain","availableIn":{},"tags":{"categoryClass":"","sectionClass":"","category":"","section":""}},{"extended":{"hasExtended":true,"docs":"<pre>// Always execute `restrictAccess` before all actions in this controller\nfilters(&quot;restrictAccess&quot;);\n\n// Always execute `isLoggedIn` and `checkIPAddress` (in that order) before all actions in this controller, except the `home` and `login` actions\nfilters(through=&quot;isLoggedIn,checkIPAddress&quot;, except=&quot;home,login&quot;);</pre>"},"hint":"Tells CFWheels to run a function before an action is run or after an action has been run. You can also specify multiple functions and actions.","returntype":"","slug":"filters","parameters":[{"default":"","required":"true","hint":"Function(s) to execute before or after the action(s).","name":"through","type":"string"},{"default":"before","required":"false","hint":"Whether to run the function(s) before or after the action(s).","name":"type","type":"string"},{"default":"","required":"false","hint":"Pass in a list of action names (or one action name) to tell CFWheels that the filter function(s) should only be run on these actions.","name":"only","type":"string"},{"default":"","required":"false","hint":"Pass in a list of action names (or one action name) to tell CFWheels that the filter function(s) should be run on all actions except the specified ones.","name":"except","type":"string"},{"default":"append","required":"false","hint":"Pass in prepend to prepend the function(s) to the filter chain instead of appending.","name":"placement","type":"string"}],"name":"filters","availableIn":{},"tags":{"categoryClass":"","sectionClass":"","category":"","section":""}},{"extended":{"hasExtended":true,"docs":"<pre>&lt;!--- Getting only 5 users and ordering them randomly ---&gt; &lt;cfset fiveRandomUsers = model(&quot;user&quot;).findAll(maxRows=5, order=&quot;random&quot;)&gt; &lt;!--- Including an association (which in this case needs to be setup as a `belongsTo` association to `author` on the `article` model first) ---&gt; &lt;cfset articles = model(&quot;article&quot;).findAll( include=&quot;author&quot;, where=&quot;published=1&quot;, order=&quot;createdAt DESC&quot; )&gt; &lt;!--- Similar to the above but using the association in the opposite direction (which needs to be setup as a `hasMany` association to `article` on the `author` model) ---&gt; &lt;cfset bobsArticles = model(&quot;author&quot;).findAll( include=&quot;articles&quot;, where=&quot;firstName='Bob'&quot; )&gt; &lt;!--- Using pagination (getting records 26-50 in this case) and a more complex way to include associations (a song `belongsTo` an album, which in turn `belongsTo` an artist) ---&gt; &lt;cfset songs = model(&quot;song&quot;).findAll( include=&quot;album(artist)&quot;, page=2, perPage=25 )&gt; &lt;!--- Using a dynamic finder to get all books released a certain year. Same as calling model(&quot;book&quot;).findOne(where=&quot;releaseYear=#params.year#&quot;) ---&gt; &lt;cfset books = model(&quot;book&quot;).findAllByReleaseYear(params.year)&gt; &lt;!--- Getting all books of a certain type from a specific year by using a dynamic finder. Same as calling model(&quot;book&quot;).findAll( where=&quot;releaseYear=#params.year# AND type='#params.type#'&quot; ) ---&gt; &lt;cfset books = model(&quot;book&quot;).findAllByReleaseYearAndType( &quot;#params.year#,#params.type#&quot; )&gt; &lt;!--- If you have a `hasMany` association setup from `post` to `comment`, you can do a scoped call. (The `comments` method below will call `model(&quot;comment&quot;).findAll(where=&quot;postId=#post.id#&quot;)` internally) ---&gt; &lt;cfset post = model(&quot;post&quot;).findByKey(params.postId)&gt; &lt;cfset comments = post.comments()&gt;</pre>"},"hint":"Returns records from the database table mapped to this model according to the arguments passed in (use the where argument to decide which records to get, use the order argument to set the order in which those records should be returned, and so on). The records will be returned as either a cfquery result set, an array of objects, or an array of structs (depending on what the returnAs argument is set to).","returntype":"","slug":"findall","parameters":[{"default":"","required":"No","hint":"This argument maps to the WHERE clause of the query. The following operators are supported: =, !=, <>, <, <=, >, >=, LIKE, NOT LIKE, IN, NOT IN, IS NULL, IS NOT NULL, AND, and OR (note that the key words need to be written in upper case). You can also use parentheses to group statements. You do not need to specify the table name(s); CFWheels will do that for you. Instead of using the where argument, you can create cleaner code by making use of a concept called Dynamic Finders.","name":"where","type":"string"},{"default":"","required":"No","hint":"Maps to the ORDER BY clause of the query. You do not need to specify the table name(s); Wheels will do that for you.","name":"order","type":"string"},{"default":"","required":"No","hint":"Maps to the GROUP BY clause of the query. You do not need to specify the table name(s); CFWheels will do that for you.","name":"group","type":"string"},{"default":"","required":"No","hint":"Determines how the SELECT clause for the query used to return data will look. You can pass in a list of the properties (which map to columns) that you want returned from your table(s). If you don't set this argument at all, Wheels will select all properties from your table(s). If you specify a table name (e.g. users.email) or alias a column (e.g.fn AS firstName) in the list, then the entire list will be passed through unchanged and used in the SELECT clause of the query. By default, all column names in tables JOINed via the include argument will be prepended with the singular version of the included table name.","name":"select","type":"string"},{"default":"false","required":"No","hint":"Whether to add the DISTINCT keyword to your SELECT clause. Wheels will, when necessary, add this automatically (when using pagination and a hasMany association is used in the include argument, to name one example).","name":"distinct","type":"boolean"},{"default":"","required":"No","hint":"Associations that should be included in the query using INNER or LEFT OUTER joins (which join type that is used depends on how the association has been set up in your model). If all included associations are set on the current model, you can specify them in a list (e.g. department,addresses,emails). You can build more complex include strings by using parentheses when the association is set on an included model, like album(artist(genre)), for example. These complex include strings only work when returnAs is set to query though.","name":"include","type":"string"},{"default":"-1","required":"No","hint":"Maximum number of records to retrieve. Passed on to the maxRows cfquery attribute. The default, -1, means that all records will be retrieved.","name":"maxRows","type":"numeric"},{"default":"0","required":"No","hint":"If you want to paginate records, you can do so by specifying a page number here. For example, getting records 11-20 would be page number 2 when perPage is kept at the default setting (10 records per page). The default, 0, means that records won't be paginated and that the perPage, count, and handle arguments will be ignored.","name":"page","type":"numeric"},{"default":"10","required":"No","hint":"When using pagination, you can specify how many records you want to fetch per page here. This argument is only used when the page argument has been passed in.","name":"perPage","type":"numeric"},{"default":"0","required":"No","hint":"When using pagination and you know in advance how many records you want to paginate through, you can pass in that value here. Doing so will prevent Wheels from running a COUNT query to get this value. This argument is only used when the page argument has been passed in.","name":"count","type":"numeric"},{"default":"query","required":"No","hint":"Handle to use for the query in pagination. This is useful when you're paginating multiple queries and need to reference them in the paginationLinks() function, for example. This argument is only used when the page argument has been passed in.","name":"handle","type":"string"},{"default":"","required":"No","hint":"If you want to cache the query, you can do so by specifying the number of minutes you want to cache the query for here. If you set it to true, the default cache time will be used (60 minutes).","name":"cache","type":"any"},{"default":"false","required":"No","hint":"Set to true to force CFWheels to query the database even though an identical query may have been run in the same request. (The default in CFWheels is to get the second query from the request-level cache.)","name":"reload","type":"boolean"},{"default":"true","required":"No","hint":"Set to true to use cfqueryparam on all columns, or pass in a list of property names to use cfqueryparam on those only.","name":"parameterize","type":"any"},{"default":"query","required":"No","hint":"Set to objects to return an array of objects, set to structs to return an array of structs, or set to query to return a query result set.","name":"returnAs","type":"string"},{"default":"true","required":"No","hint":"When returnAs is set to objects, you can set this argument to false to prevent returning objects fetched from associations specified in the include argument. This is useful when you only need to include associations for use in the WHERE clause only and want to avoid the performance hit that comes with object creation.","name":"returnIncluded","type":"boolean"},{"default":"true","required":"No","hint":"You can set this argument to false to prevent running the execution of callbacks for a method call.","name":"callbacks","type":"boolean"},{"default":"false","required":"No","hint":"You can set this argument to true to include soft-deleted records in the results.","name":"includeSoftDeletes","type":"boolean"}],"name":"findAll","availableIn":{},"tags":{"categoryClass":"","sectionClass":"","category":"","section":""}},{"extended":{"hasExtended":true,"docs":"<pre>// basic usage\nprimaryKeyList = model(&quot;artist&quot;).findAllKeys();\n\n// Quote values, use a different delimiter and filter results with the &quot;where&quot; argument\nprimaryKeyList = model(&quot;artist&quot;).findAllKeys(quoted=true, delimiter=&quot;-&quot;, where=&quot;active=1&quot;);</pre>"},"hint":"Returns all primary key values in a list. In addition to quoted and delimiter you can pass in any argument that findAll() accepts.","returntype":"","slug":"findallkeys","parameters":[{"default":"false","required":"false","hint":"Set to true to enclose each value in single-quotation marks.","name":"quoted","type":"boolean"},{"default":",","required":"false","hint":"The delimiter character to separate the list items with.","name":"delimiter","type":"string"}],"name":"findAllKeys","availableIn":{},"tags":{"categoryClass":"","sectionClass":"","category":"","section":""}},{"extended":{"hasExtended":true,"docs":"<pre>&lt;!--- Getting the author with the primary key value `99` as an object ---&gt;\n&lt;cfset auth = model(&quot;author&quot;).findByKey(99)&gt;\n\n&lt;!--- Getting an author based on a form/URL value and then checking if it was found ---&gt;\n&lt;cfset auth = model(&quot;author&quot;).findByKey(params.key)&gt;\n&lt;cfif NOT IsObject(auth)&gt;\n    &lt;cfset flashInsert(message=&quot;Author #params.key# was not found&quot;)&gt;\n    &lt;cfset redirectTo(back=true)&gt;\n&lt;/cfif&gt;\n\n&lt;!--- If you have a `belongsTo` association setup from `comment` to `post`, you can do a scoped call. (The `post` method below will call `model(&quot;post&quot;).findByKey(comment.postId)` internally) ---&gt;\n&lt;cfset comment = model(&quot;comment&quot;).findByKey(params.commentId)&gt;\n&lt;cfset post = comment.post()&gt;</pre>"},"hint":"Fetches the requested record by primary key and returns it as an object. Returns false if no record is found. You can override this behavior to return a cfquery result set instead, similar to what's described in the documentation for findOne().","returntype":"","slug":"findbykey","parameters":[{"default":"","required":"Yes","hint":"Primary key value(s) of the record. Separate with comma if passing in multiple primary key values. Accepts a string, list, or a numeric value.","name":"key","type":"any"},{"default":"","required":"No","hint":"Determines how the SELECT clause for the query used to return data will look. You can pass in a list of the properties (which map to columns) that you want returned from your table(s). If you don't set this argument at all, Wheels will select all properties from your table(s). If you specify a table name (e.g. users.email) or alias a column (e.g.fn AS firstName) in the list, then the entire list will be passed through unchanged and used in the SELECT clause of the query. By default, all column names in tables JOINed via the include argument will be prepended with the singular version of the included table name.","name":"select","type":"string"},{"default":"","required":"No","hint":"Associations that should be included in the query using INNER or LEFT OUTER joins (which join type that is used depends on how the association has been set up in your model). If all included associations are set on the current model, you can specify them in a list (e.g. department,addresses,emails). You can build more complex include strings by using parentheses when the association is set on an included model, like album(artist(genre)), for example. These complex include strings only work when returnAs is set to query though.","name":"include","type":"string"},{"default":"","required":"No","hint":"If you want to cache the query, you can do so by specifying the number of minutes you want to cache the query for here. If you set it to true, the default cache time will be used (60 minutes).","name":"cache","type":"any"},{"default":"false","required":"No","hint":"Set to true to force Wheels to query the database even though an identical query may have been run in the same request. (The default in Wheels is to get the second query from the request-level cache.)","name":"reload","type":"boolean"},{"default":"true","required":"No","hint":"Set to true to use cfqueryparam on all columns, or pass in a list of property names to use cfqueryparam on those only.","name":"parameterize","type":"any"},{"default":"query","required":"No","hint":"Set this to objects to return an array of objects. Set this to query to return a query result set.","name":"returnAs","type":"string"},{"default":"true","required":"No","hint":"You can set this argument to false to prevent running the execution of callbacks for a method call.","name":"callbacks","type":"boolean"},{"default":"false","required":"No","hint":"You can set this argument to true to include soft-deleted records in the results.","name":"includeSoftDeletes","type":"boolean"}],"name":"findByKey","availableIn":{},"tags":{"categoryClass":"","sectionClass":"","category":"","section":""}},{"extended":{"hasExtended":true,"docs":"<pre></pre>"},"hint":"Fetches the first record ordered by primary key value. Use the property argument to order by something else. Returns a model object.","returntype":"","slug":"findfirst","parameters":[{"default":"","required":"false","hint":"Name of the property to order by. This argument is also aliased as properties.","name":"property","type":"string"}],"name":"findFirst","availableIn":{},"tags":{"categoryClass":"","sectionClass":"","category":"","section":""}},{"extended":{"hasExtended":true,"docs":"<pre></pre>"},"hint":"Fetches the last record ordered by primary key value. Use the property argument to order by something else. Returns a model object.","returntype":"","slug":"findlast","parameters":[{"default":"","required":"false","hint":"See documentation for findFirst.","name":"property","type":"string"}],"name":"findLast","availableIn":{},"tags":{"categoryClass":"","sectionClass":"","category":"","section":""}},{"extended":{"hasExtended":true,"docs":"<pre>findOne([ where, order, select, include, cache, reload, parameterize, returnAs, includeSoftDeletes ]) &lt;!--- Getting the most recent order as an object from the database ---&gt;\n&lt;cfset order = model(&quot;order&quot;).findOne(order=&quot;datePurchased DESC&quot;)&gt;\n\n&lt;!--- Using a dynamic finder to get the first person with the last name `Smith`. Same as calling `model(&quot;user&quot;).findOne(where&quot;lastName='Smith'&quot;)` ---&gt;\n&lt;cfset person = model(&quot;user&quot;).findOneByLastName(&quot;Smith&quot;)&gt;\n\n&lt;!--- Getting a specific user using a dynamic finder. Same as calling `model(&quot;user&quot;).findOne(where&quot;email='someone@somewhere.com' AND password='mypass'&quot;)` ---&gt;\n&lt;cfset user = model(&quot;user&quot;).findOneByEmailAndPassword(&quot;someone@somewhere.com,mypass&quot;)&gt;\n\n&lt;!--- If you have a `hasOne` association setup from `user` to `profile`, you can do a scoped call. (The `profile` method below will call `model(&quot;profile&quot;).findOne(where=&quot;userId=#user.id#&quot;)` internally) ---&gt;\n&lt;cfset user = model(&quot;user&quot;).findByKey(params.userId)&gt;\n&lt;cfset profile = user.profile()&gt;\n\n&lt;!--- If you have a `hasMany` association setup from `post` to `comment`, you can do a scoped call. (The `findOneComment` method below will call `model(&quot;comment&quot;).findOne(where=&quot;postId=#post.id#&quot;)` internally) ---&gt;\n&lt;cfset post = model(&quot;post&quot;).findByKey(params.postId)&gt;\n&lt;cfset comment = post.findOneComment(where=&quot;text='I Love Wheels!'&quot;)&gt;</pre>"},"hint":"Fetches the first record found based on the WHERE and ORDER BY clauses. With the default settings (i.e. the returnAs argument set to object), a model object will be returned if the record is found and the boolean value false if not. Instead of using the where argument, you can create cleaner code by making use of a concept called dynamic finders.","returntype":"","slug":"findone","parameters":[{"default":"","required":"Yes","hint":"This argument maps to the WHERE clause of the query. The following operators are supported: =, !=, <>, <, <=, >, >=, LIKE, NOT LIKE, IN, NOT IN, IS NULL, IS NOT NULL, AND, and OR. (Note that the key words need to be written in upper case.) You can also use parentheses to group statements. You do not need to specify the table name(s); Wheels will do that for you.","name":"key","type":"any"},{"default":"","required":"No","hint":"Maps to the ORDER BY clause of the query. You do not need to specify the table name(s); Wheels will do that for you.","name":"order","type":"string"},{"default":"","required":"No","hint":"Determines how the SELECT clause for the query used to return data will look. You can pass in a list of the properties (which map to columns) that you want returned from your table(s). If you don't set this argument at all, Wheels will select all properties from your table(s). If you specify a table name (e.g. users.email) or alias a column (e.g.fn AS firstName) in the list, then the entire list will be passed through unchanged and used in the SELECT clause of the query. By default, all column names in tables JOINed via the include argument will be prepended with the singular version of the included table name.","name":"select","type":"string"},{"default":"","required":"No","hint":"Associations that should be included in the query using INNER or LEFT OUTER joins (which join type that is used depends on how the association has been set up in your model). If all included associations are set on the current model, you can specify them in a list (e.g. department,addresses,emails). You can build more complex include strings by using parentheses when the association is set on an included model, like album(artist(genre)), for example. These complex include strings only work when returnAs is set to query though.","name":"include","type":"string"},{"default":"","required":"No","hint":"If you want to cache the query, you can do so by specifying the number of minutes you want to cache the query for here. If you set it to true, the default cache time will be used (60 minutes).","name":"cache","type":"any"},{"default":"false","required":"No","hint":"Set to true to force Wheels to query the database even though an identical query may have been run in the same request. (The default in Wheels is to get the second query from the request-level cache.)","name":"reload","type":"boolean"},{"default":"true","required":"No","hint":"Set to true to use cfqueryparam on all columns, or pass in a list of property names to use cfqueryparam on those only.","name":"parameterize","type":"any"},{"default":"query","required":"No","hint":"Set this to objects to return an array of objects. Set this to query to return a query result set.","name":"returnAs","type":"string"},{"default":"false","required":"No","hint":"You can set this argument to true to include soft-deleted records in the results.","name":"includeSoftDeletes","type":"boolean"}],"name":"findOne","availableIn":{},"tags":{"categoryClass":"","sectionClass":"","category":"","section":""}},{"extended":{"hasExtended":true,"docs":"<pre>// Return the first object that matches &quot;Timberlake&quot; in the last name column. If there is no match, create a new one and set firstName to &quot;Justin&quot;.\nnewArtist = model(&quot;artist&quot;).findOrCreateByLastName(lastName=&quot;Timberlake&quot;, firstName=&quot;Justin&quot;);</pre>"},"hint":"Returns the object or creates a new one if it wasn't found.","returntype":"","slug":"findorcreateby[property]","parameters":[{"default":"true","required":"false","hint":"Passing in false will create the object without saving it to the database.","name":"save","type":"boolean"}],"name":"findOrCreateBy[Property]","availableIn":{},"tags":{"categoryClass":"","sectionClass":"","category":"","section":""}},{"extended":{"hasExtended":true,"docs":"<pre>// Get the current value of notice in the Flash\nnotice = flash(&quot;notice&quot;);\n\n// Get the entire Flash as a struct\nflashContents = flash();</pre>"},"hint":"Returns the value of a specific key in the Flash (or the entire Flash as a struct if no key is passed in).","returntype":"","slug":"flash","parameters":[{"default":"","required":"false","hint":"The key to get the value for.","name":"key","type":"string"}],"name":"flash","availableIn":{},"tags":{"categoryClass":"","sectionClass":"","category":"","section":""}},{"extended":{"hasExtended":true,"docs":"<pre>flashClear();</pre>"},"hint":"Deletes everything from the Flash.","returntype":"","slug":"flashclear","parameters":[],"name":"flashClear","availableIn":{},"tags":{"categoryClass":"","sectionClass":"","category":"","section":""}},{"extended":{"hasExtended":true,"docs":"<pre>count = flashCount();</pre>"},"hint":"Returns how many keys exist in the Flash.","returntype":"","slug":"flashcount","parameters":[],"name":"flashCount","availableIn":{},"tags":{"categoryClass":"","sectionClass":"","category":"","section":""}},{"extended":{"hasExtended":true,"docs":"<pre>flashDelete(key=&quot;errorMessage&quot;);</pre>"},"hint":"Deletes a specific key from the Flash. Returns true if the key exists.","returntype":"","slug":"flashdelete","parameters":[{"default":"","required":"true","hint":"The key to delete.","name":"key","type":"string"}],"name":"flashDelete","availableIn":{},"tags":{"categoryClass":"","sectionClass":"","category":"","section":""}},{"extended":{"hasExtended":true,"docs":"<pre>flashInsert(msg=&quot;It Worked!&quot;);</pre>"},"hint":"Inserts a new key / value into the Flash.","returntype":"","slug":"flashinsert","parameters":[],"name":"flashInsert","availableIn":{},"tags":{"categoryClass":"","sectionClass":"","category":"","section":""}},{"extended":{"hasExtended":true,"docs":"<pre>empty = flashIsEmpty();</pre>"},"hint":"Returns whether or not the Flash is empty.","returntype":"","slug":"flashisempty","parameters":[],"name":"flashIsEmpty","availableIn":{},"tags":{"categoryClass":"","sectionClass":"","category":"","section":""}},{"extended":{"hasExtended":true,"docs":"<pre>// Keep the entire Flash for the next request\nflashKeep();\n\n// Keep the &quot;error&quot; key in the Flash for the next request\nflashKeep(&quot;error&quot;);\n\n// Keep both the &quot;error&quot; and &quot;success&quot; keys in the Flash for the next request\nflashKeep(&quot;error,success&quot;);</pre>"},"hint":"Make the entire Flash or specific key in it stick around for one more request.","returntype":"","slug":"flashkeep","parameters":[{"default":"","required":"false","hint":"A key or list of keys to flag for keeping. This argument is also aliased as keys.","name":"key","type":"string"}],"name":"flashKeep","availableIn":{},"tags":{"categoryClass":"","sectionClass":"","category":"","section":""}},{"extended":{"hasExtended":true,"docs":"<pre>errorExists = flashKeyExists(&quot;error&quot;);</pre>"},"hint":"Checks if a specific key exists in the Flash.","returntype":"","slug":"flashkeyexists","parameters":[{"default":"","required":"true","hint":"The key to check if it exists.","name":"key","type":"string"}],"name":"flashKeyExists","availableIn":{},"tags":{"categoryClass":"","sectionClass":"","category":"","section":""}},{"extended":{"hasExtended":true,"docs":"<pre>&lt;!--- In the controller action ---&gt;\nflashInsert(success=&quot;Your post was successfully submitted.&quot;);\nflashInsert(alert=&quot;Don''t forget to tweet about this post!&quot;);\nflashInsert(error=&quot;This is an error message.&quot;);\n\n&lt;!--- In the layout or view ---&gt;\n&lt;cfoutput&gt;\n\t#flashMessages()#\n&lt;/cfoutput&gt;\n&lt;!---\n\tGenerates this (sorted alphabetically):\n\t&lt;div class=&quot;flashMessages&quot;&gt;\n\t\t&lt;p class=&quot;alertMessage&quot;&gt;\n\t\t\tDon''t forget to tweet about this post!\n\t\t&lt;/p&gt;\n\t\t&lt;p class=&quot;errorMessage&quot;&gt;\n\t\t\tThis is an error message.\n\t\t&lt;/p&gt;\n\t\t&lt;p class=&quot;successMessage&quot;&gt;\n\t\t\tYour post was successfully submitted.\n\t\t&lt;/p&gt;\n\t&lt;/div&gt;\n---&gt;\n\n&lt;!--- Only show the &quot;success&quot; key in the view ---&gt;\n&lt;cfoutput&gt;\n\t#flashMessages(key=&quot;success&quot;)#\n&lt;/cfoutput&gt;\n&lt;!---\n\tGenerates this:\n\t&lt;div class=&quot;flashMessage&quot;&gt;\n\t\t&lt;p class=&quot;successMessage&quot;&gt;\n\t\t\tYour post was successfully submitted.\n\t\t&lt;/p&gt;\n\t&lt;/div&gt;\n---&gt;\n\n&lt;!--- Show only the &quot;success&quot; and &quot;alert&quot; keys in the view, in that order ---&gt;\n&lt;cfoutput&gt;\n\t#flashMessages(keys=&quot;success,alert&quot;)#\n&lt;/cfoutput&gt;\n&lt;!---\n\tGenerates this (sorted alphabetically):\n\t&lt;div class=&quot;flashMessages&quot;&gt;\n\t\t&lt;p class=&quot;successMessage&quot;&gt;\n\t\t\tYour post was successfully submitted.\n\t\t&lt;/p&gt;\n\t\t&lt;p class=&quot;alertMessage&quot;&gt;\n\t\t\tDon''t forget to tweet about this post!\n\t\t&lt;/p&gt;\n\t&lt;/div&gt;\n---&gt;</pre>"},"hint":"Displays a marked-up listing of messages that exist in the Flash.","returntype":"","slug":"flashmessages","parameters":[{"default":"","required":"false","hint":"The key (or list of keys) to show the value for. You can also use the key argument instead for better readability when accessing a single key.","name":"keys","type":"string"},{"default":"flashMessages","required":"false","hint":"HTML class to set on the div element that contains the messages.","name":"class","type":"string"},{"default":"false","required":"false","hint":"Includes the div container even if the Flash is empty.","name":"includeEmptyContainer","type":"boolean"},{"default":"false","required":"false","hint":"Outputs all class attribute values in lower case (except the main one).","name":"lowerCaseDynamicClassValues","type":"boolean"}],"name":"flashMessages","availableIn":{},"tags":{"categoryClass":"","sectionClass":"","category":"","section":""}},{"extended":{"hasExtended":true,"docs":"<pre>get(name [, functionName ]) &lt;!--- Get the current value for the `tableNamePrefix` Wheels setting ---&gt;\n&lt;cfset setting = get(&quot;tableNamePrefix&quot;)&gt;\n\n&lt;!--- Get the default for the `message` argument of the `validatesConfirmationOf` method  ---&gt;\n&lt;cfset setting = get(functionName=&quot;validatesConfirmationOf&quot;, name=&quot;message&quot;)&gt;</pre>"},"hint":"Returns the current setting for the supplied Wheels setting or the current default for the supplied Wheels function argument.","returntype":"","slug":"get","parameters":[{"default":"","required":"Yes","hint":"Variable name to get setting for.","name":"name","type":"string"},{"default":"","required":"No","hint":"Function name to get setting for.","name":"functionName","type":"string"}],"name":"get","availableIn":{},"tags":{"categoryClass":"","sectionClass":"","category":"","section":""}},{"extended":{"hasExtended":true,"docs":"<pre>getTableNamePrefix() &lt;!--- Get the table name prefix for this user when running a custom query ---&gt;\n&lt;cffunction name=&quot;getDisabledUsers&quot; returntype=&quot;query&quot;&gt;\n    &lt;cfset var loc = {}&gt;\n    &lt;cfquery datasource=&quot;#get('dataSourceName')#&quot; name=&quot;loc.disabledUsers&quot;&gt;\n        SELECT\n            *\n        FROM\n            #this.getTableNamePrefix()#users\n        WHERE\n            disabled = 1\n    &lt;/cfquery&gt;\n    &lt;cfreturn loc.disabledUsers&gt;\n&lt;/cffunction&gt;</pre>"},"hint":"Returns the table name prefix set for the table.","returntype":"","slug":"gettablenameprefix","parameters":[],"name":"getTableNamePrefix","availableIn":{},"tags":{"categoryClass":"","sectionClass":"","category":"","section":""}},{"extended":{"hasExtended":true,"docs":"<pre>hasChanged([ property ]) &lt;!--- Get a member object and change the `email` property on it ---&gt;\n&lt;cfset member = model(&quot;member&quot;).findByKey(params.memberId)&gt;\n&lt;cfset member.email = params.newEmail&gt;\n\n&lt;!--- Check if the `email` property has changed ---&gt;\n&lt;cfif member.hasChanged(&quot;email&quot;)&gt;\n    &lt;!--- Do something... ---&gt;\n&lt;/cfif&gt;\n\n&lt;!--- The above can also be done using a dynamic function like this ---&gt;\n&lt;cfif member.emailHasChanged()&gt;\n    &lt;!--- Do something... ---&gt;\n&lt;/cfif&gt;</pre>"},"hint":"Returns true if the specified property (or any if none was passed in) has been changed but not yet saved to the database. Will also return true if the object is new and no record for it exists in the database.","returntype":"","slug":"haschanged","parameters":[{"default":"","required":"No","hint":"Name of property to check for change.","name":"property","type":"string"}],"name":"hasChanged","availableIn":{},"tags":{"categoryClass":"","sectionClass":"","category":"","section":""}},{"extended":{"hasExtended":true,"docs":"<pre>hasErrors([ property, name ]) &lt;!--- Check if the post object has any errors set on it ---&gt;\n&lt;cfif post.hasErrors()&gt;\n    &lt;!--- Send user to a form to correct the errors... ---&gt;\n&lt;/cfif&gt;</pre>"},"hint":"Returns true if the object has any errors. You can also limit to only check a specific property or name for errors.","returntype":"","slug":"haserrors","parameters":[{"default":"","required":"No","hint":"Name of the property to check if there are any errors set on.","name":"property","type":"string"},{"default":"","required":"No","hint":"Error name to check if there are any errors set with.","name":"name","type":"string"}],"name":"hasErrors","availableIn":{},"tags":{"categoryClass":"","sectionClass":"","category":"","section":""}},{"extended":{"hasExtended":true,"docs":"<pre>// Specify that instances of this model has many comments (the table for the associated model, not the current, should have the foreign key set on it).\nhasMany(&quot;comments&quot;);\n\n// Specify that this model (let''s call it `reader` in this case) has many subscriptions and setup a shortcut to the `publication` model (useful when dealing with many-to-many relationships).\nhasMany(name=&quot;subscriptions&quot;, shortcut=&quot;publications&quot;);\n\n// Automatically delete all associated `comments` whenever this object is deleted\nhasMany(name=&quot;comments&quot;, dependent=&quot;deleteAll&quot;);\n\n// When not following CFWheels naming conventions for associations, it can get complex to define how a `shortcut` works.\n// In this example, we are naming our `shortcut` differently than the actual model''s name.\n\n// In the models/Customer.cfc `init()` method\nhasMany(name=&quot;subscriptions&quot;, shortcut=&quot;magazines&quot;, through=&quot;publication,subscriptions&quot;);\n\n// In the models/Subscription.cfc `init()` method\nbelongsTo(&quot;customer&quot;);\nbelongsTo(&quot;publication&quot;);\n\n// In the models/Publication `init()` method\nhasMany(&quot;subscriptions&quot;);</pre>"},"hint":"Sets up a hasMany association between this model and the specified one.","returntype":"","slug":"hasmany","parameters":[{"default":"","required":"true","hint":"Gives the association a name that you refer to when working with the association (in the include argument to findAll, to name one example).","name":"name","type":"string"},{"default":"","required":"false","hint":"Name of associated model (usually not needed if you follow CFWheels conventions because the model name will be deduced from the name argument).","name":"modelName","type":"string"},{"default":"","required":"false","hint":"Foreign key property name (usually not needed if you follow CFWheels conventions since the foreign key name will be deduced from the name argument).","name":"foreignKey","type":"string"},{"default":"","required":"false","hint":"Column name to join to if not the primary key (usually not needed if you follow wheels conventions since the join key will be the tables primary key/keys).","name":"joinKey","type":"string"},{"default":"outer","required":"false","hint":"Use to set the join type when joining associated tables. Possible values are inner (for INNER JOIN) and outer (for LEFT OUTER JOIN).","name":"joinType","type":"string"},{"default":"false","required":"false","hint":"Defines how to handle dependent models when you delete a record from this model. Set to delete to instantiate associated models and call their delete method, deleteAll to delete without instantiating, removeAll to remove the foreign key, or false to do nothing.","name":"dependent","type":"string"},{"default":"","required":"false","hint":"Set this argument to create an additional dynamic method that gets the object(s) from the other side of a many-to-many association.","name":"shortcut","type":"string"},{"default":"","required":"false","hint":"Set this argument if you need to override CFWheels conventions when using the shortcut argument. Accepts a list of two association names representing the chain from the opposite side of the many-to-many relationship to this model.","name":"through","type":"string"}],"name":"hasMany","availableIn":{},"tags":{"categoryClass":"","sectionClass":"","category":"","section":""}},{"extended":{"hasExtended":true,"docs":"<pre>hasManyCheckBox(objectName, association, keys [, label, labelPlacement, prepend, append, prependToLabel, appendToLabel, errorElement, errorClass ]) &lt;!--- Show check boxes for associating authors with the current book ---&gt;\n&lt;cfloop query=&quot;authors&quot;&gt;\n    #hasManyCheckBox(\n        label=authors.fullName,\n        objectName=&quot;book&quot;,\n        association=&quot;bookAuthors&quot;,\n        keys=&quot;#book.key()#,#authors.id#&quot;\n    )#\n&lt;/cfloop&gt;</pre>"},"hint":"Used as a shortcut to output the proper form elements for an association. Note: Pass any additional arguments like class, rel, and id, and the generated tag will also include those values as HTML attributes.","returntype":"","slug":"hasmanycheckbox","parameters":[{"default":"","required":"Yes","hint":"Name of the variable containing the parent object to represent with this form field.","name":"objectName","type":"string"},{"default":"","required":"Yes","hint":"Name of the association set in the parent object to represent with this form field.","name":"association","type":"string"},{"default":"","required":"Yes","hint":"Primary keys associated with this form field. Note that these keys should be listed in the order that they appear in the database table.","name":"keys","type":"string"},{"default":"","required":"No","hint":"The label text to use in the form control.","name":"label","type":"string"},{"default":"","required":"No","hint":"Whether to place the label before, after, or wrapped around the form control. Label text placement can be controlled using aroundLeft or aroundRight.","name":"labelPlacement","type":"string"},{"default":"","required":"No","hint":"String to prepend to the form control. Useful to wrap the form control with HTML tags.","name":"prepend","type":"string"},{"default":"","required":"No","hint":"String to append to the form control. Useful to wrap the form control with HTML tags.","name":"append","type":"string"},{"default":"","required":"No","hint":"String to prepend to the form control's label. Useful to wrap the form control with HTML tags.","name":"prependToLabel","type":"string"},{"default":"","required":"No","hint":"String to append to the form control's label. Useful to wrap the form control with HTML tags.","name":"appendToLabel","type":"string"},{"default":"","required":"No","hint":"HTML tag to wrap the form control with when the object contains errors.","name":"errorElement","type":"string"},{"default":"","required":"No","hint":"The class name of the HTML tag that wraps the form control when there are errors.","name":"errorClass","type":"string"}],"name":"hasManyCheckBox","availableIn":{},"tags":{"categoryClass":"","sectionClass":"","category":"","section":""}},{"extended":{"hasExtended":true,"docs":"<pre>hasManyRadioButton(objectName, association, property, keys, tagValue [, checkIfBlank, label ]) &lt;!--- Show radio buttons for associating a default address with the current author ---&gt;\n&lt;cfloop query=&quot;addresses&quot;&gt;\n    #hasManyRadioButton(\n        label=addresses.title,\n        objectName=&quot;author&quot;,\n        association=&quot;authorsDefaultAddresses&quot;,\n        keys=&quot;#author.key()#,#addresses.id#&quot;\n    )#\n&lt;/cfloop&gt;</pre>"},"hint":"Used as a shortcut to output the proper form elements for an association. Note: Pass any additional arguments like class, rel, and id, and the generated tag will also include those values as HTML attributes.","returntype":"","slug":"hasmanyradiobutton","parameters":[{"default":"","required":"Yes","hint":"Name of the variable containing the parent object to represent with this form field.","name":"objectName","type":"string"},{"default":"","required":"Yes","hint":"Name of the association set in the parent object to represent with this form field.","name":"association","type":"string"},{"default":"","required":"Yes","hint":"Name of the property in the child object to represent with this form field.","name":"property","type":"string"},{"default":"","required":"Yes","hint":"Primary keys associated with this form field. Note that these keys should be listed in the order that they appear in the database table.","name":"keys","type":"string"},{"default":"","required":"Yes","hint":"The value of the radio button when selected.","name":"tagValue","type":"string"},{"default":"false","required":"No","hint":"Whether or not to check this form field as a default if there is a blank value set for the property.","name":"checkIfBlank","type":"boolean"},{"default":"","required":"No","hint":"The label text to use in the form control.","name":"label","type":"string"}],"name":"hasManyRadioButton","availableIn":{},"tags":{"categoryClass":"","sectionClass":"","category":"","section":""}},{"extended":{"hasExtended":true,"docs":"<pre>// Specify that instances of this model has one profile. (The table for the associated model, not the current, should have the foreign key set on it.)\nhasOne(&quot;profile&quot;);\n\n// Same as above but setting the `joinType` to `inner`, which basically means this model should always have a record in the `profiles` table\nhasOne(name=&quot;profile&quot;, joinType=&quot;inner&quot;);\n\n// Automatically delete the associated `profile` whenever this object is deleted\nhasMany(name=&quot;comments&quot;, dependent=&quot;delete&quot;);</pre>"},"hint":"Sets up a hasOne association between this model and the specified one.","returntype":"","slug":"hasone","parameters":[{"default":"","required":"true","hint":"See documentation for belongsTo.","name":"name","type":"string"},{"default":"","required":"false","hint":"See documentation for belongsTo.","name":"modelName","type":"string"},{"default":"","required":"false","hint":"See documentation for belongsTo.","name":"foreignKey","type":"string"},{"default":"","required":"false","hint":"See documentation for belongsTo.","name":"joinKey","type":"string"},{"default":"outer","required":"false","hint":"See documentation for belongsTo.","name":"joinType","type":"string"},{"default":"false","required":"false","hint":"See documentation for hasMany.","name":"dependent","type":"string"}],"name":"hasOne","availableIn":{},"tags":{"categoryClass":"","sectionClass":"","category":"","section":""}},{"extended":{"hasExtended":true,"docs":"<pre>hasProperty(property) &lt;!--- Get an object, set a value and then see if the property exists ---&gt;\n&lt;cfset employee = model(&quot;employee&quot;).new()&gt;\n&lt;cfset employee.firstName = &quot;dude&quot;&gt;\n&lt;cfset employee.hasProperty(&quot;firstName&quot;)&gt;&lt;!--- returns true ---&gt;\n\n&lt;!--- This is also a dynamic method that you could do ---&gt;\n&lt;cfset employee.hasFirstName()&gt;</pre>"},"hint":"Returns true if the specified property name exists on the model.","returntype":"","slug":"hasproperty","parameters":[{"default":"","required":"Yes","hint":"Name of property to inspect.","name":"property","type":"string"}],"name":"hasProperty","availableIn":{},"tags":{"categoryClass":"","sectionClass":"","category":"","section":""}},{"extended":{"hasExtended":true,"docs":"<pre>&lt;!--- Provide an `objectName` and `property` ---&gt;\n&lt;cfoutput&gt;\n    #hiddenField(objectName=&quot;user&quot;, property=&quot;id&quot;)#\n&lt;/cfoutput&gt;</pre>"},"hint":"Builds and returns a string containing a hidden field form control based on the supplied objectName and property. Note: Pass any additional arguments like class, rel, and id, and the generated tag will also include those values as HTML attributes.","returntype":"","slug":"hiddenfield","parameters":[{"default":"","required":"true","hint":"See documentation for textField.","name":"objectName","type":"any"},{"default":"","required":"true","hint":"See documentation for textField.","name":"property","type":"string"},{"default":"","required":"false","hint":"See documentation for textfield.","name":"association","type":"string"},{"default":"","required":"false","hint":"See documentation for textfield.","name":"position","type":"string"}],"name":"hiddenField","availableIn":{},"tags":{"categoryClass":"","sectionClass":"","category":"","section":""}},{"extended":{"hasExtended":true,"docs":"<pre>&lt;!--- Basic usage usually involves a `name` and `value` ---&gt;\n&lt;cfoutput&gt;\n    #hiddenFieldTag(name=&quot;userId&quot;, value=user.id)#\n&lt;/cfoutput&gt;</pre>"},"hint":"Builds and returns a string containing a hidden field form control based on the supplied name. Note: Pass any additional arguments like class, rel, and id, and the generated tag will also include those values as HTML attributes.","returntype":"","slug":"hiddenfieldtag","parameters":[{"default":"","required":"true","hint":"See documentation for textFieldTag.","name":"name","type":"string"},{"default":"","required":"false","hint":"See documentation for textFieldTag.","name":"value","type":"string"}],"name":"hiddenFieldTag","availableIn":{},"tags":{"categoryClass":"","sectionClass":"","category":"","section":""}},{"extended":{"hasExtended":true,"docs":"<pre>#highlight(text=&quot;You searched for: Wheels&quot;, phrases=&quot;Wheels&quot;)#\n-&gt; You searched for: &lt;span class=&quot;highlight&quot;&gt;Wheels&lt;/span&gt;</pre>"},"hint":"Highlights the phrase(s) everywhere in the text if found by wrapping it in a span tag.","returntype":"","slug":"highlight","parameters":[{"default":"","required":"true","hint":"Text to search.","name":"text","type":"string"},{"default":"","required":"true","hint":"List of phrases to highlight.","name":"phrases","type":"string"},{"default":",","required":"false","hint":"Delimiter to use in phrases argument.","name":"delimiter","type":"string"},{"default":"span","required":"false","hint":"HTML tag to use to wrap the highlighted phrase(s).","name":"tag","type":"string"},{"default":"highlight","required":"false","hint":"Class to use in the tags wrapping highlighted phrase(s).","name":"class","type":"string"}],"name":"highlight","availableIn":{},"tags":{"categoryClass":"","sectionClass":"","category":"","section":""}},{"extended":{"hasExtended":true,"docs":"<pre>&lt;!--- This &quot;Tag&quot; version of the function accepts a `name` and `selected` instead of binding to a model object ---&gt;\n&lt;cfoutput&gt;\n    #hourSelectTag(name=&quot;hourOfMeeting&quot;, selected=params.hourOfMeeting)#\n&lt;/cfoutput&gt;\n\n&lt;!--- Show 12 hours instead of 24 ---&gt;\n&lt;cfoutput&gt;\n\t#hourSelectTag(name=&quot;hourOfMeeting&quot;, selected=params.hourOfMeeting, twelveHour=true)#\n&lt;/cfoutput&gt;</pre>"},"hint":"Builds and returns a string containing one select form control for the hours of the day based on the supplied name.","returntype":"","slug":"hourselecttag","parameters":[{"default":"","required":"true","hint":"See documentation for textFieldTag.","name":"name","type":"string"},{"default":"","required":"false","hint":"The hour that should be selected initially.","name":"selected","type":"string"},{"default":"false","required":"false","hint":"See documentation for select.","name":"includeBlank","type":"any"},{"default":"","required":"false","hint":"See documentation for textField.","name":"label","type":"string"},{"default":"around","required":"false","hint":"See documentation for textField.","name":"labelPlacement","type":"string"},{"default":"","required":"false","hint":"See documentation for textField.","name":"prepend","type":"string"},{"default":"","required":"false","hint":"See documentation for textField.","name":"append","type":"string"},{"default":"","required":"false","hint":"See documentation for textField.","name":"prependToLabel","type":"string"},{"default":"","required":"false","hint":"See documentation for textField.","name":"appendToLabel","type":"string"},{"default":"false","required":"false","hint":"See documentation for timeSelect.","name":"twelveHour","type":"boolean"}],"name":"hourSelectTag","availableIn":{},"tags":{"categoryClass":"","sectionClass":"","category":"","section":""}},{"extended":{"hasExtended":true,"docs":"<pre>humanize(text [, except ]) &lt;!--- Humanize a string, will result in &quot;Wheels Is A Framework&quot; ---&gt;\n#humanize(&quot;wheelsIsAFramework&quot;)#\n\n&lt;!--- Humanize a string, force wheels to replace &quot;Cfml&quot; with &quot;CFML&quot; ---&gt;\n#humanize(&quot;wheelsIsACFMLFramework&quot;, &quot;CFML&quot;)#</pre>"},"hint":"Returns readable text by capitalizing and converting camel casing to multiple words.","returntype":"","slug":"humanize","parameters":[{"default":"","required":"Yes","hint":"Text to humanize.","name":"text","type":"string"},{"default":"","required":"No","hint":"a list of strings (space separated) to replace within the output.","name":"except","type":"string"}],"name":"humanize","availableIn":{},"tags":{"categoryClass":"","sectionClass":"","category":"","section":""}},{"extended":{"hasExtended":true,"docs":"<pre>hyphenize(string) &lt;!--- Outputs &quot;my-blog-post&quot; ---&gt;\n&lt;cfoutput&gt;\n    #hyphenize(&quot;myBlogPost&quot;)#\n&lt;/cfoutput&gt;</pre>"},"hint":"Converts camelCase strings to lowercase strings with hyphens as word delimiters instead. Example: myVariable becomes my-variable.","returntype":"","slug":"hyphenize","parameters":[{"default":"","required":"Yes","hint":"The string to hyphenize.","name":"string","type":"string"}],"name":"hyphenize","availableIn":{},"tags":{"categoryClass":"","sectionClass":"","category":"","section":""}},{"extended":{"hasExtended":true,"docs":"<pre>imageTag(source) &lt;!--- Outputs an `img` tag for `images/logo.png` ---&gt;\n#imageTag(&quot;logo.png&quot;)#\n\n&lt;!--- Outputs an `img` tag for `http://cfwheels.org/images/logo.png` ---&gt;\n#imageTag(source=&quot;http://cfwheels.org/images/logo.png&quot;, alt=&quot;ColdFusion on Wheels&quot;)#\n\n&lt;!--- Outputs an `img` tag with the `class` attribute set ---&gt;\n#imageTag(source=&quot;logo.png&quot;, class=&quot;logo&quot;)#</pre>"},"hint":"Returns an img tag. If the image is stored in the local images folder, the tag will also set the width, height, and alt attributes for you. Note: Pass any additional arguments like class, rel, and id, and the generated tag will also include those values as HTML attributes.","returntype":"","slug":"imagetag","parameters":[{"default":"","required":"Yes","hint":"The file name of the image if it's available in the local file system (i.e. ColdFusion will be able to access it). Provide the full URL if the image is on a remote server.","name":"source","type":"string"}],"name":"imageTag","availableIn":{},"tags":{"categoryClass":"","sectionClass":"","category":"","section":""}},{"extended":{"hasExtended":true,"docs":"<pre>&lt;!--- In your view template, let''s say `views/blog/post.cfm ---&gt;\n&lt;cfset contentFor(head=''&lt;meta name=&quot;robots&quot; content=&quot;noindex,nofollow&quot;&gt;&quot;'')&gt;\n&lt;cfset contentFor(head=''&lt;meta name=&quot;author&quot; content=&quot;wheelsdude@wheelsify.com&quot;'')&gt;\n\n&lt;!--- In `views/layout.cfm` ---&gt;\n&lt;html&gt;\n\t&lt;head&gt;\n\t    &lt;title&gt;My Site&lt;/title&gt;\n\t    ##includeContent(&quot;head&quot;)##\n\t&lt;/head&gt;\n\t&lt;body&gt;\n\t\t&lt;cfoutput&gt;\n\t\t\t##includeContent()##\n\t\t&lt;/cfoutput&gt;\n\t&lt;/body&gt;\n&lt;/html&gt;</pre>"},"hint":"Used to output the content for a particular section in a layout.","returntype":"","slug":"includecontent","parameters":[{"default":"body","required":"false","hint":"Name of layout section to return content for.","name":"name","type":"string"},{"default":"","required":"false","hint":"What to display as a default if the section is not defined.","name":"defaultValue","type":"string"}],"name":"includeContent","availableIn":{},"tags":{"categoryClass":"","sectionClass":"","category":"","section":""}},{"extended":{"hasExtended":true,"docs":"<pre>includedInObject(objectName, association, keys) &lt;!--- Check to see if the customer is subscribed to the Swimsuit Edition. Note that the order of the `keys` argument should match the order of the `customerid` and `publicationid` columns in the `subscriptions` join table ---&gt;\n&lt;cfif not includedInObject(objectName=&quot;customer&quot;, association=&quot;subscriptions&quot;, keys=&quot;#customer.key()#,#swimsuitEdition.id#&quot;)&gt;\n    &lt;cfset assignSalesman(customer)&gt;\n&lt;/cfif&gt;</pre>"},"hint":"Used as a shortcut to check if the specified IDs are a part of the main form object. This method should only be used for hasMany associations.","returntype":"","slug":"includedinobject","parameters":[{"default":"","required":"Yes","hint":"Name of the variable containing the parent object to represent with this form field.","name":"objectName","type":"string"},{"default":"","required":"Yes","hint":"Name of the association set in the parent object to represent with this form field.","name":"association","type":"string"},{"default":"","required":"Yes","hint":"Primary keys associated with this form field. Note that these keys should be listed in the order that they appear in the database table.","name":"keys","type":"string"}],"name":"includedInObject","availableIn":{},"tags":{"categoryClass":"","sectionClass":"","category":"","section":""}},{"extended":{"hasExtended":true,"docs":"<pre>&lt;!--- Make sure that the `sidebar` value is provided for the parent layout ---&gt;\n&lt;cfsavecontent variable=&quot;categoriesSidebar&quot;&gt;\n\t&lt;cfoutput&gt;\n\t\t&lt;ul&gt;\n\t\t\t##includePartial(categories)##\n\t\t&lt;/ul&gt;\n\t&lt;/cfoutput&gt;\n&lt;/cfsavecontent&gt;\n&lt;cfset contentFor(sidebar=categoriesSidebar)&gt;\n\n&lt;!--- Include parent layout at `views/layout.cfm` ---&gt;\n&lt;cfoutput&gt;\n\t##includeLayout(&quot;/layout.cfm&quot;)##\n&lt;/cfoutput&gt;</pre>"},"hint":"Includes the contents of another layout file. This is usually used to include a parent layout from within a child layout.","returntype":"","slug":"includelayout","parameters":[{"default":"layout","required":"false","hint":"Name of the layout file to include.","name":"name","type":"string"}],"name":"includeLayout","availableIn":{},"tags":{"categoryClass":"","sectionClass":"","category":"","section":""}},{"extended":{"hasExtended":true,"docs":"<pre>&lt;cfoutput&gt; &lt;!--- If we're in the &quot;sessions&quot; controller, CFWheels will include the file &quot;views/sessions/_login.cfm&quot;. ---&gt; #includePartial(&quot;login&quot;)# &lt;!--- CFWheels will include the file &quot;views/shared/_button.cfm&quot;. ---&gt; #includePartial(partial=&quot;/shared/button&quot;)# &lt;!--- If we're in the &quot;posts&quot; controller and the &quot;posts&quot; variable includes a query result set, CFWheels will loop through the record set and include the file &quot;views/posts/_post.cfm&quot; for each record. ---&gt; &lt;cfset posts = model(&quot;post&quot;).findAll()&gt; #includePartial(posts)# &lt;!--- We can also override the template file loaded for the example above. ---&gt; #includePartial(partial=&quot;/shared/post&quot;, query=posts)# &lt;!--- The same works when passing a model instance. ---&gt; &lt;cfset post = model(&quot;post&quot;).findByKey(params.key)&gt; #includePartial(post)# #includePartial(partial=&quot;/shared/post&quot;, object=post)# &lt;!--- The same works when passing an array of model objects. ---&gt; &lt;cfset posts = model(&quot;post&quot;).findAll(returnAs=&quot;objects&quot;)&gt; #includePartial(posts)# #includePartial(partial=&quot;/shared/post&quot;, objects=posts)# &lt;/cfoutput&gt;</pre>"},"hint":"Includes the specified partial file in the view. Similar to using cfinclude but with the ability to cache the result and use Wheels-specific file look-up. By default, CFWheels will look for the file in the current controller's view folder. To include a file relative from the base views folder, you can start the path supplied to name with a forward slash.","returntype":"","slug":"includepartial","parameters":[{"default":"","required":"true","hint":"The name of the partial file to be used. Prefix with a leading slash / if you need to build a path from the root views folder. Do not include the partial filename's underscore and file extension. If you want to have CFWheels display the partial for a single model object, array of model objects, or a query, pass a variable containing that data into this argument.","name":"partial","type":"any"},{"default":"","required":"false","hint":"If passing a query result set for the partial argument, use this to specify the field to group the query by. A new query will be passed into the partial template for you to iterate over.","name":"group","type":"string"},{"default":"","required":"false","hint":"Number of minutes to cache the content for.","name":"cache","type":"any"},{"default":"","required":"false","hint":"The layout to wrap the content in. Prefix with a leading slash / if you need to build a path from the root views folder. Pass false to not load a layout at all.","name":"layout","type":"string"},{"default":"","required":"false","hint":"HTML or string to place between partials when called using a query.","name":"spacer","type":"string"},{"default":"true","required":"false","hint":"Name of controller function to load data from.","name":"dataFunction","type":"any"},{"default":"","required":"false","hint":"If you want to have CFWheels display the partial for each record in a query record set but want to override the name of the file referenced, provide the template file name for partial and pass the query as a separate query argument.","name":"query","type":"query"},{"default":"","required":"false","hint":"If you want to have CFWheels display the partial for a model object but want to override the name of the file referenced, provide the template file name for partial and pass the model object as a separate object argument.","name":"object","type":"component"},{"default":"","required":"false","hint":"If you want to have CFWheels display the partial for each model object in an array but want to override the name of the file referenced, provide the template name for partial and pass the query as a separate objects argument.","name":"objects","type":"array"}],"name":"includePartial","availableIn":{},"tags":{"categoryClass":"","sectionClass":"","category":"","section":""}},{"extended":{"hasExtended":true,"docs":"<pre>invokeWithTransaction(method [, transaction, isolation ]) &lt;!--- This is the method to be run inside a transaction ---&gt;\n&lt;cffunction name=&quot;transferFunds&quot; returntype=&quot;boolean&quot; output=&quot;false&quot;&gt;\n    &lt;cfargument name=&quot;personFrom&quot;&gt;\n    &lt;cfargument name=&quot;personTo&quot;&gt;\n    &lt;cfargument name=&quot;amount&quot;&gt;\n    &lt;cfif arguments.personFrom.withdraw(arguments.amount) and arguments.personTo.deposit(arguments.amount)&gt;\n        &lt;cfreturn true&gt;\n    &lt;cfelse&gt;\n        &lt;cfreturn false&gt;\n    &lt;/cfif&gt;\n&lt;/cffunction&gt;\n\n&lt;cfset david = model(&quot;Person&quot;).findOneByName(&quot;David&quot;)&gt;\n&lt;cfset mary = model(&quot;Person&quot;).findOneByName(&quot;Mary&quot;)&gt;\n&lt;cfset invokeWithTransaction(method=&quot;transferFunds&quot;, personFrom=david, personTo=mary, amount=100)&gt;</pre>"},"hint":"Runs the specified method within a single database transaction.","returntype":"","slug":"invokewithtransaction","parameters":[{"default":"","required":"Yes","hint":"Model method to run.","name":"method","type":"string"},{"default":"commit","required":"No","hint":"Set this to commit to update the database when the save has completed, rollback to run all the database queries but not commit them, or none to skip transaction handling altogether.","name":"transaction","type":"string"},{"default":"read_committed","required":"No","hint":"Isolation level to be passed through to the cftransaction tag. See your CFML engine's documentation for more details about cftransaction's isolation attribute.","name":"isolation","type":"string"}],"name":"invokeWithTransaction","availableIn":{},"tags":{"categoryClass":"","sectionClass":"","category":"","section":""}},{"extended":{"hasExtended":true,"docs":"<pre>requestIsAjax = isAjax();</pre>"},"hint":"Returns whether the page was called from JavaScript or not.","returntype":"","slug":"isajax","parameters":[],"name":"isAjax","availableIn":{},"tags":{"categoryClass":"","sectionClass":"","category":"","section":""}},{"extended":{"hasExtended":true,"docs":"<pre>isClass() &lt;!--- Use the passed in `id` when we're already in an instance ---&gt;\n&lt;cffunction name=&quot;memberIsAdmin&quot;&gt;\n    &lt;cfif isClass()&gt;\n        &lt;cfreturn this.findByKey(arguments.id).admin&gt;\n    &lt;cfelse&gt;\n        &lt;cfreturn this.admin&gt;\n    &lt;/cfif&gt;\n&lt;/cffunction&gt;</pre>"},"hint":"Use this method within a model's method to check whether you are currently in a class-level object.","returntype":"","slug":"isclass","parameters":[],"name":"isClass","availableIn":{},"tags":{"categoryClass":"","sectionClass":"","category":"","section":""}},{"extended":{"hasExtended":true,"docs":"<pre>requestIsGet = isGet();</pre>"},"hint":"Returns whether the request was a normal GET request or not.","returntype":"","slug":"isget","parameters":[],"name":"isGet","availableIn":{},"tags":{"categoryClass":"","sectionClass":"","category":"","section":""}},{"extended":{"hasExtended":true,"docs":"<pre>isInstance() &lt;!--- Use the passed in `id` when we're not already in an instance ---&gt;\n&lt;cffunction name=&quot;memberIsAdmin&quot;&gt;\n    &lt;cfif isInstance()&gt;\n        &lt;cfreturn this.admin&gt;\n    &lt;cfelse&gt;\n        &lt;cfreturn this.findByKey(arguments.id).admin&gt;\n    &lt;/cfif&gt;\n&lt;/cffunction&gt;</pre>"},"hint":"Use this method to check whether you are currently in an instance object.","returntype":"","slug":"isinstance","parameters":[],"name":"isInstance","availableIn":{},"tags":{"categoryClass":"","sectionClass":"","category":"","section":""}},{"extended":{"hasExtended":true,"docs":"<pre>isNew() &lt;!--- Create a new object and then check if it is new (yes, this example is ridiculous. It makes more sense in the context of callbacks for example) ---&gt;\n&lt;cfset employee = model(&quot;employee&quot;).new()&gt;\n&lt;cfif employee.isNew()&gt;\n    &lt;!--- Do something... ---&gt;\n&lt;/cfif&gt;</pre>"},"hint":"Returns true if this object hasn't been saved yet. (In other words, no matching record exists in the database yet.) Returns false if a record exists.","returntype":"","slug":"isnew","parameters":[],"name":"isNew","availableIn":{},"tags":{"categoryClass":"","sectionClass":"","category":"","section":""}},{"extended":{"hasExtended":true,"docs":"<pre>requestIsPost = isPost();</pre>"},"hint":"Returns whether the request came from a form POST submission or not.","returntype":"","slug":"ispost","parameters":[],"name":"isPost","availableIn":{},"tags":{"categoryClass":"","sectionClass":"","category":"","section":""}},{"extended":{"hasExtended":true,"docs":"<pre>// Redirect non-secure connections to the secure version\nif (!isSecure())\n{\n\tredirectTo(protocol=&quot;https&quot;);\n}</pre>"},"hint":"Returns whether CFWheels is communicating over a secure port.","returntype":"","slug":"issecure","parameters":[],"name":"isSecure","availableIn":{},"tags":{"categoryClass":"","sectionClass":"","category":"","section":""}},{"extended":{"hasExtended":true,"docs":"<pre>javaScriptIncludeTag([ sources, type, head, delim ]) &lt;!--- view code ---&gt;\n&lt;head&gt;\n    &lt;!--- Includes `javascripts/main.js` ---&gt;\n    #javaScriptIncludeTag(&quot;main&quot;)#\n    &lt;!--- Includes `javascripts/blog.js` and `javascripts/accordion.js` ---&gt;\n    #javaScriptIncludeTag(&quot;blog,accordion&quot;)#\n    &lt;!--- Includes external JavaScript file ---&gt;\n    #javaScriptIncludeTag(&quot;https://ajax.googleapis.com/ajax/libs/jquery/1.4.4/jquery.min.js&quot;)#\n&lt;/head&gt;\n\n&lt;body&gt;\n    &lt;!--- Will still appear in the `head` ---&gt;\n    #javaScriptIncludeTag(source=&quot;tabs&quot;, head=true)#\n&lt;/body&gt;</pre>"},"hint":"Returns a script tag for a JavaScript file (or several) based on the supplied arguments.","returntype":"","slug":"javascriptincludetag","parameters":[{"default":"","required":"No","hint":"The name of one or many JavaScript files in the javascripts folder, minus the .js extension. (Can also be called with the source argument.) Pass a full URL to access an external JavaScript file.","name":"sources","type":"string"},{"default":"","required":"No","hint":"The type attribute for the script tag.","name":"type","type":"string"},{"default":"","required":"No","hint":"Set to true to place the output in the head area of the HTML page instead of the default behavior, which is to place the output where the function is called from.","name":"head","type":"string"},{"default":"\",\"","required":"No","hint":"the delimiter to use for the list of javascripts","name":"delim","type":"string"}],"name":"javaScriptIncludeTag","availableIn":{},"tags":{"categoryClass":"","sectionClass":"","category":"","section":""}},{"extended":{"hasExtended":true,"docs":"<pre>key() &lt;!--- Get an object and then get the primary key value(s) ---&gt;\n&lt;cfset employee = model(&quot;employee&quot;).findByKey(params.key)&gt;\n&lt;cfset val = employee.key()&gt;</pre>"},"hint":"Returns the value of the primary key for the object. If you have a single primary key named id, then someObject.key() is functionally equivalent to someObject.id. This method is more useful when you do dynamic programming and don't know the name of the primary key or when you use composite keys (in which case it's convenient to use this method to get a list of both key values returned).","returntype":"","slug":"key","parameters":[],"name":"key","availableIn":{},"tags":{"categoryClass":"","sectionClass":"","category":"","section":""}},{"extended":{"hasExtended":true,"docs":"<pre>#linkTo(text=&quot;Log Out&quot;, controller=&quot;account&quot;, action=&quot;logout&quot;)#\n-&gt; &lt;a href=&quot;/account/logout&quot;&gt;Log Out&lt;/a&gt;\n\n&lt;!--- If you're already in the `account` controller, CFWheels will assume that's where you want the link to point ---&gt;\n#linkTo(text=&quot;Log Out&quot;, action=&quot;logout&quot;)#\n-&gt; &lt;a href=&quot;/account/logout&quot;&gt;Log Out&lt;/a&gt;\n\n#linkTo(text=&quot;View Post&quot;, controller=&quot;blog&quot;, action=&quot;post&quot;, key=99)#\n-&gt; &lt;a href=&quot;/blog/post/99&quot;&gt;View Post&lt;/a&gt;\n\n#linkTo(text=&quot;View Settings&quot;, action=&quot;settings&quot;, params=&quot;show=all&amp;sort=asc&quot;)#\n-&gt; &lt;a href=&quot;/account/settings?show=all&amp;amp;sort=asc&quot;&gt;View Settings&lt;/a&gt;\n\n&lt;!--- Given that a `userProfile` route has been configured in `config/routes.cfm` ---&gt;\n#linkTo(text=&quot;Joe's Profile&quot;, route=&quot;userProfile&quot;, userName=&quot;joe&quot;)#\n-&gt; &lt;a href=&quot;/user/joe&quot;&gt;Joe's Profile&lt;/a&gt;\n\n&lt;!--- Link to an external website ---&gt;\n#linkTo(text=&quot;ColdFusion Framework&quot;, href=&quot;http://cfwheels.org/&quot;)#\n-&gt; &lt;a href=&quot;http://cfwheels.org/&quot;&gt;ColdFusion Framework&lt;/a&gt;\n\n&lt;!--- Give the link `class` and `id` attributes ---&gt;\n#linkTo(text=&quot;Delete Post&quot;, action=&quot;delete&quot;, key=99, class=&quot;delete&quot;, id=&quot;delete-99&quot;)#\n-&gt; &lt;a class=&quot;delete&quot; href=&quot;/blog/delete/99&quot; id=&quot;delete-99&quot;&gt;Delete Post&lt;/a&gt;</pre>"},"hint":"Creates a link to another page in your application. Pass in the name of a route to use your configured routes or a controller/action/key combination. Note: Pass any additional arguments like class, rel, and id, and the generated tag will also include those values as HTML attributes.","returntype":"","slug":"linkto","parameters":[{"default":"","required":"false","hint":"The text content of the link.","name":"text","type":"string"},{"default":"","required":"false","hint":"Pass a message here to cause a JavaScript confirmation dialog box to pop up containing the message.","name":"confirm","type":"string"},{"default":"","required":"false","hint":"Name of a route that you have configured in config/routes.cfm.","name":"route","type":"string"},{"default":"","required":"false","hint":"Name of the controller to include in the URL.","name":"controller","type":"string"},{"default":"","required":"false","hint":"Name of the action to include in the URL.","name":"action","type":"string"},{"default":"","required":"false","hint":"Key(s) to include in the URL.","name":"key","type":"any"},{"default":"","required":"false","hint":"Any additional parameters to be set in the query string (example: wheels=cool&x=y). Please note that CFWheels uses the & and = characters to split the parameters and encode them properly for you (using URLEncodedFormat() internally). However, if you need to pass in & or = as part of the value, then you need to encode them (and only them), example: a=cats%26dogs%3Dtrouble!&b=1.","name":"params","type":"string"},{"default":"","required":"false","hint":"Sets an anchor name to be appended to the path.","name":"anchor","type":"string"},{"default":"true","required":"false","hint":"If true, returns only the relative URL (no protocol, host name or port).","name":"onlyPath","type":"boolean"},{"default":"","required":"false","hint":"Set this to override the current host.","name":"host","type":"string"},{"default":"","required":"false","hint":"Set this to override the current protocol.","name":"protocol","type":"string"},{"default":"0","required":"false","hint":"Set this to override the current port number.","name":"port","type":"numeric"},{"default":"","required":"false","hint":"Pass a link to an external site here if you want to bypass the CFWheels routing system altogether and link to an external URL.","name":"href","type":"string"}],"name":"linkTo","availableIn":{},"tags":{"categoryClass":"","sectionClass":"","category":"","section":""}},{"extended":{"hasExtended":true,"docs":"<pre>#mailTo(emailAddress=&quot;webmaster@yourdomain.com&quot;, name=&quot;Contact our Webmaster&quot;)#\n-&gt; &lt;a href=&quot;mailto:webmaster@yourdomain.com&quot;&gt;Contact our Webmaster&lt;/a&gt;</pre>"},"hint":"Creates a mailto link tag to the specified email address, which is also used as the name of the link unless name is specified.","returntype":"","slug":"mailto","parameters":[{"default":"","required":"true","hint":"The email address to link to.","name":"emailAddress","type":"string"},{"default":"","required":"false","hint":"A string to use as the link text (\"Joe\" or \"Support Department\", for example).","name":"name","type":"string"},{"default":"false","required":"false","hint":"Pass true here to encode the email address, making it harder for bots to harvest it for example.","name":"encode","type":"boolean"}],"name":"mailTo","availableIn":{},"tags":{"categoryClass":"","sectionClass":"","category":"","section":""}},{"extended":{"hasExtended":true,"docs":"<pre>// Get the amount of the highest salary for all employees\nhighestSalary = model(&quot;employee&quot;).maximum(&quot;salary&quot;);\n\n// Get the amount of the highest salary for employees in a given department\nhighestSalary = model(&quot;employee&quot;).maximum(property=&quot;salary&quot;, where=&quot;departmentId=##params.key##&quot;);\n\n// Make sure a numeric value is always returned, even if no records are found to calculate the maximum for\nhighestSalary = model(&quot;employee&quot;).maximum(property=&quot;salary&quot;, where=&quot;salary &gt; ##params.minSalary##&quot;, ifNull=0);</pre>"},"hint":"Calculates the maximum value for a given property. Uses the SQL function MAX. If no records can be found to perform the calculation on you can use the ifNull argument to decide what should be returned.","returntype":"","slug":"maximum","parameters":[{"default":"","required":"true","hint":"Name of the property to get the highest value for (must be a property of a numeric data type).","name":"property","type":"string"},{"default":"","required":"false","hint":"See documentation for findAll.","name":"where","type":"string"},{"default":"","required":"false","hint":"See documentation for findAll.","name":"include","type":"string"},{"default":"true","required":"false","hint":"See documentation for findAll.","name":"parameterize","type":"any"},{"default":"","required":"false","hint":"See documentation for average.","name":"ifNull","type":"any"},{"default":"false","required":"false","hint":"See documentation for findAll.","name":"includeSoftDeletes","type":"boolean"},{"default":"","required":"false","hint":"See documentation for findAll.","name":"group","type":"string"}],"name":"maximum","availableIn":{},"tags":{"categoryClass":"","sectionClass":"","category":"","section":""}},{"extended":{"hasExtended":true,"docs":"<pre>mimeTypes(extension [, fallback ]) &lt;!--- Get the internally-stored MIME type for `xls` ---&gt;\n&lt;cfset mimeType = mimeTypes(&quot;xls&quot;)&gt;\n\n&lt;!--- Get the internally-stored MIME type for a dynamic value. Fall back to a MIME type of `text/plain` if it's not found ---&gt;\n&lt;cfset mimeType = mimeTypes(extension=params.type, fallback=&quot;text/plain&quot;)&gt;</pre>"},"hint":"Returns an associated MIME type based on a file extension.","returntype":"","slug":"mimetypes","parameters":[{"default":"","required":"Yes","hint":"The extension to get the MIME type for.","name":"extension","type":"string"},{"default":"application/octet-stream","required":"No","hint":"The fallback MIME type to return.","name":"fallback","type":"string"}],"name":"mimeTypes","availableIn":{},"tags":{"categoryClass":"","sectionClass":"","category":"","section":""}},{"extended":{"hasExtended":true,"docs":"<pre>// Get the amount of the lowest salary for all employees\nlowestSalary = model(&quot;employee&quot;).minimum(&quot;salary&quot;);\n\n// Get the amount of the lowest salary for employees in a given department\nlowestSalary = model(&quot;employee&quot;).minimum(property=&quot;salary&quot;, where=&quot;departmentId=##params.key##&quot;);\n\n// Make sure a numeric amount is always returned, even when there were no records analyzed by the query\nlowestSalary = model(&quot;employee&quot;).minimum(property=&quot;salary&quot;, where=&quot;salary BETWEEN ##params.min## AND ##params.max##&quot;, ifNull=0);</pre>"},"hint":"Calculates the minimum value for a given property. Uses the SQL function MIN. If no records can be found to perform the calculation on you can use the ifNull argument to decide what should be returned.","returntype":"","slug":"minimum","parameters":[{"default":"","required":"true","hint":"Name of the property to get the lowest value for (must be a property of a numeric data type).","name":"property","type":"string"},{"default":"","required":"false","hint":"See documentation for findAll.","name":"where","type":"string"},{"default":"","required":"false","hint":"See documentation for findAll.","name":"include","type":"string"},{"default":"true","required":"false","hint":"See documentation for findAll.","name":"parameterize","type":"any"},{"default":"","required":"false","hint":"See documentation for average.","name":"ifNull","type":"any"},{"default":"false","required":"false","hint":"See documentation for findAll.","name":"includeSoftDeletes","type":"boolean"},{"default":"","required":"false","hint":"See documentation for findAll.","name":"group","type":"string"}],"name":"minimum","availableIn":{},"tags":{"categoryClass":"","sectionClass":"","category":"","section":""}},{"extended":{"hasExtended":true,"docs":"<pre>&lt;!--- This &quot;Tag&quot; version of the function accepts a `name` and `selected` instead of binding to a model object ---&gt;\n&lt;cfoutput&gt;\n    #minuteSelectTag(name=&quot;minuteOfMeeting&quot;, value=params.minuteOfMeeting)#\n&lt;/cfoutput&gt;\n\n&lt;!--- Only show 15-minute intervals ---&gt;\n&lt;cfoutput&gt;\n\t#minuteSelectTag(name=&quot;minuteOfMeeting&quot;, value=params.minuteOfMeeting, minuteStep=15)#\n&lt;/cfoutput&gt;</pre>"},"hint":"Builds and returns a string containing one select form control for the minutes of an hour based on the supplied name.","returntype":"","slug":"minuteselecttag","parameters":[{"default":"","required":"true","hint":"See documentation for textFieldTag.","name":"name","type":"string"},{"default":"","required":"false","hint":"The minute that should be selected initially.","name":"selected","type":"string"},{"default":"1","required":"false","hint":"See documentation for timeSelect.","name":"minuteStep","type":"numeric"},{"default":"false","required":"false","hint":"See documentation for select.","name":"includeBlank","type":"any"},{"default":"","required":"false","hint":"See documentation for textField.","name":"label","type":"string"},{"default":"around","required":"false","hint":"See documentation for textField.","name":"labelPlacement","type":"string"},{"default":"","required":"false","hint":"See documentation for textField.","name":"prepend","type":"string"},{"default":"","required":"false","hint":"See documentation for textField.","name":"append","type":"string"},{"default":"","required":"false","hint":"See documentation for textField.","name":"prependToLabel","type":"string"},{"default":"","required":"false","hint":"See documentation for textField.","name":"appendToLabel","type":"string"}],"name":"minuteSelectTag","availableIn":{},"tags":{"categoryClass":"","sectionClass":"","category":"","section":""}},{"extended":{"hasExtended":true,"docs":"<pre>model(name) &lt;!--- The `model(&quot;author&quot;)` part of the code below gets a reference to the model from the application scope, and then the `findByKey` class level method is called on it ---&gt;\n&lt;cfset authorObject = model(&quot;author&quot;).findByKey(1)&gt;</pre>"},"hint":"Returns a reference to the requested model so that class level methods can be called on it.","returntype":"","slug":"model","parameters":[{"default":"","required":"Yes","hint":"Name of the model to get a reference to.","name":"name","type":"string"}],"name":"model","availableIn":{},"tags":{"categoryClass":"","sectionClass":"","category":"","section":""}},{"extended":{"hasExtended":true,"docs":"<pre>&lt;!--- This &quot;Tag&quot; version of the function accepts a `name` and `selected` instead of binding to a model object ---&gt;\n&lt;cfoutput&gt;\n    #monthSelectTag(name=&quot;monthOfBirthday&quot;, selected=params.monthOfBirthday)#\n&lt;/cfoutput&gt;</pre>"},"hint":"Builds and returns a string containing a select form control for the months of the year based on the supplied name.","returntype":"","slug":"monthselecttag","parameters":[{"default":"","required":"true","hint":"See documentation for textFieldTag.","name":"name","type":"string"},{"default":"","required":"false","hint":"The month that should be selected initially.","name":"selected","type":"string"},{"default":"names","required":"false","hint":"See documentation for dateSelect.","name":"monthDisplay","type":"string"},{"default":"January,February,March,April,May,June,July,August,September,October,November,December","required":"false","hint":"See documentation for dateSelect.","name":"monthNames","type":"string"},{"default":"Jan,Feb,Mar,Apr,May,Jun,Jul,Aug,Sep,Oct,Nov,Dec","required":"false","hint":"See documentation for dateSelect.","name":"monthAbbreviations","type":"string"},{"default":"false","required":"false","hint":"See documentation for select.","name":"includeBlank","type":"any"},{"default":"","required":"false","hint":"See documentation for textField.","name":"label","type":"string"},{"default":"around","required":"false","hint":"See documentation for textField.","name":"labelPlacement","type":"string"},{"default":"","required":"false","hint":"See documentation for textField.","name":"prepend","type":"string"},{"default":"","required":"false","hint":"See documentation for textField.","name":"append","type":"string"},{"default":"","required":"false","hint":"See documentation for textField.","name":"prependToLabel","type":"string"},{"default":"","required":"false","hint":"See documentation for textField.","name":"appendToLabel","type":"string"}],"name":"monthSelectTag","availableIn":{},"tags":{"categoryClass":"","sectionClass":"","category":"","section":""}},{"extended":{"hasExtended":true,"docs":"<pre>&lt;!--- In `models/User.cfc`, allow for `groupEntitlements` to be saved and deleted through the `user` object ---&gt;\n&lt;cffunction name=&quot;init&quot;&gt;\n\t&lt;cfset hasMany(&quot;groupEntitlements&quot;)&gt;\n\t&lt;cfset nestedProperties(association=&quot;groupEntitlements&quot;, allowDelete=true)&gt;\n&lt;/cffunction&gt;</pre>"},"hint":"Allows for nested objects, structs, and arrays to be set from params and other generated data.","returntype":"","slug":"nestedproperties","parameters":[{"default":"","required":"false","hint":"The association (or list of associations) you want to allow to be set through the params. This argument is also aliased as associations.","name":"association","type":"string"},{"default":"true","required":"false","hint":"Whether to save the association(s) when the parent object is saved.","name":"autoSave","type":"boolean"},{"default":"false","required":"false","hint":"Set allowDelete to true to tell CFWheels to look for the property _delete in your model. If present and set to a value that evaluates to true, the model will be deleted when saving the parent.","name":"allowDelete","type":"boolean"},{"default":"","required":"false","hint":"Set sortProperty to a property on the object that you would like to sort by. The property should be numeric, should start with 1, and should be consecutive. Only valid with hasMany associations.","name":"sortProperty","type":"string"},{"default":"","required":"false","hint":"A list of properties that should not be blank. If any of the properties are blank, any CRUD operations will be rejected.","name":"rejectIfBlank","type":"string"}],"name":"nestedProperties","availableIn":{},"tags":{"categoryClass":"","sectionClass":"","category":"","section":""}},{"extended":{"hasExtended":true,"docs":"<pre>&lt;!--- Create a new author in memory (not saved to the database) ---&gt;\n&lt;cfset newAuthor = model(&quot;author&quot;).new()&gt;\n\n&lt;!--- Create a new author based on properties in a struct ---&gt;\n&lt;cfset newAuthor = model(&quot;author&quot;).new(params.authorStruct)&gt;\n\n&lt;!--- Create a new author by passing in named arguments ---&gt;\n&lt;cfset newAuthor = model(&quot;author&quot;).new(firstName=&quot;John&quot;, lastName=&quot;Doe&quot;)&gt;\n\n&lt;!--- If you have a `hasOne` or `hasMany` association setup from `customer` to `order`, you can do a scoped call. (The `newOrder` method below will call `model(&quot;order&quot;).new(customerId=aCustomer.id)` internally.) ---&gt;\n&lt;cfset aCustomer = model(&quot;customer&quot;).findByKey(params.customerId)&gt;\n&lt;cfset anOrder = aCustomer.newOrder(shipping=params.shipping)&gt;</pre>"},"hint":"Creates a new object based on supplied properties and returns it. The object is not saved to the database; it only exists in memory. Property names and values can be passed in either using named arguments or as a struct to the properties argument.","returntype":"","slug":"new","parameters":[{"default":"","required":"false","hint":"The properties you want to set on the object (can also be passed in as named arguments).","name":"properties","type":"struct"},{"default":"true","required":"false","hint":"See documentation for save.","name":"callbacks","type":"boolean"}],"name":"new","availableIn":{},"tags":{"categoryClass":"","sectionClass":"","category":"","section":""}},{"extended":{"hasExtended":true,"docs":"<pre>obfuscateParam(param) &lt;!--- Obfuscate the primary key value `99` ---&gt;\n&lt;cfset newValue = obfuscateParam(99)&gt;</pre>"},"hint":"Obfuscates a value. Typically used for hiding primary key values when passed along in the URL.","returntype":"","slug":"obfuscateparam","parameters":[{"default":"","required":"Yes","hint":"Value to obfuscate.","name":"param","type":"any"}],"name":"obfuscateParam","availableIn":{},"tags":{"categoryClass":"","sectionClass":"","category":"","section":""}},{"extended":{"hasExtended":true,"docs":"<pre>// This will only provide the `html` type and will ignore what was defined in the call to `provides()` in the `init()` function\nonlyProvides(&quot;html&quot;);</pre>"},"hint":"Use this in an individual controller action to define which formats the action will respond with. This can be used to define provides behavior in individual actions or to override a global setting set with provides in the controller's init().","returntype":"","slug":"onlyprovides","parameters":[{"default":"","required":"false","hint":"See documentation for provides.","name":"formats","type":"string"},{"default":"","required":"false","hint":"Name of action, defaults to current.","name":"action","type":"string"}],"name":"onlyProvides","availableIn":{},"tags":{"categoryClass":"","sectionClass":"","category":"","section":""}},{"extended":{"hasExtended":true,"docs":"<pre>allAuthors = model(&quot;author&quot;).findAll(page=1, perPage=25, order=&quot;lastName&quot;, handle=&quot;authorsData&quot;);\npaginationData = pagination(&quot;authorsData&quot;);\n\n#pagination().currentPage#\n#pagination().totalPages#\n#pagination().totalRecords#</pre>"},"hint":"Returns a struct with information about the specificed paginated query. The keys that will be included in the struct are currentPage, totalPages and totalRecords.","returntype":"","slug":"pagination","parameters":[{"default":"query","required":"false","hint":"The handle given to the query to return pagination information for.","name":"handle","type":"string"}],"name":"pagination","availableIn":{},"tags":{"categoryClass":"","sectionClass":"","category":"","section":""}},{"extended":{"hasExtended":true,"docs":"<pre>&lt;!--- Example 1: List authors page by page, 25 at a time ---&gt;\n&lt;!--- Controller code ---&gt;\n&lt;cfparam name=&quot;params.page&quot; default=&quot;1&quot;&gt;\n&lt;cfset allAuthors = model(&quot;author&quot;).findAll(page=params.page, perPage=25, order=&quot;lastName&quot;)&gt;\n\n&lt;!--- View code ---&gt;\n&lt;ul&gt;\n    &lt;cfoutput query=&quot;allAuthors&quot;&gt;\n        &lt;li&gt;##firstName## ##lastName##&lt;/li&gt;\n    &lt;/cfoutput&gt;\n&lt;/ul&gt;\n&lt;cfoutput&gt;##paginationLinks(action=&quot;listAuthors&quot;)##&lt;/cfoutput&gt;\n\n&lt;!--- Example 2: Using the same model call above, show all authors with a window size of 5 ---&gt;\n&lt;!--- View code ---&gt;\n&lt;cfoutput&gt;##paginationLinks(action=&quot;listAuthors&quot;, windowSize=5)##&lt;/cfoutput&gt;\n\n&lt;!--- Example 3: If more than one paginated query is being run, then you need to reference the correct `handle` in the view ---&gt;\n&lt;!--- Controller code ---&gt;\n&lt;cfset allAuthors = model(&quot;author&quot;).findAll(handle=&quot;authQuery&quot;, page=5, order=&quot;id&quot;)&gt;\n\n&lt;!--- View code ---&gt;\n&lt;ul&gt;\n    &lt;cfoutput&gt;##paginationLinks(action=&quot;listAuthors&quot;, handle=&quot;authQuery&quot;, prependToLink=&quot;&lt;li&gt;&quot;, appendToLink=&quot;&lt;/li&gt;&quot;)##&lt;/cfoutput&gt;\n&lt;/ul&gt;\n\n&lt;!--- Example 4: Call to `paginationLinks` using routes ---&gt;\n&lt;!--- Route setup in config/routes.cfm ---&gt;\n&lt;cfset addRoute(name=&quot;paginatedCommentListing&quot;, pattern=&quot;blog/[year]/[month]/[day]/[page]&quot;, controller=&quot;theBlog&quot;, action=&quot;stats&quot;)&gt;\n&lt;cfset addRoute(name=&quot;commentListing&quot;, pattern=&quot;blog/[year]/[month]/[day]&quot;,  controller=&quot;theBlog&quot;, action=&quot;stats&quot;)&gt;\n\n&lt;!--- Ccontroller code ---&gt;\n&lt;cfparam name=&quot;params.page&quot; default=&quot;1&quot;&gt;\n&lt;cfset comments = model(&quot;comment&quot;).findAll(page=params.page, order=&quot;createdAt&quot;)&gt;\n\n&lt;!--- View code ---&gt;\n&lt;ul&gt;\n    &lt;cfoutput&gt;##paginationLinks(route=&quot;paginatedCommentListing&quot;, year=2009, month=&quot;feb&quot;, day=10)##&lt;/cfoutput&gt;\n&lt;/ul&gt;</pre>"},"hint":"Builds and returns a string containing links to pages based on a paginated query. Uses linkTo() internally to build the link, so you need to pass in a route name or a controller/action/key combination. All other linkTo() arguments can be supplied as well, in which case they are passed through directly to linkTo(). If you have paginated more than one query in the controller, you can use the handle argument to reference them. (Don't forget to pass in a handle to the findAll() function in your controller first.)","returntype":"","slug":"paginationlinks","parameters":[{"default":"2","required":"false","hint":"The number of page links to show around the current page.","name":"windowSize","type":"numeric"},{"default":"true","required":"false","hint":"Whether or not links to the first and last page should always be displayed.","name":"alwaysShowAnchors","type":"boolean"},{"default":"...","required":"false","hint":"String to place next to the anchors on either side of the list.","name":"anchorDivider","type":"string"},{"default":"false","required":"false","hint":"Whether or not the current page should be linked to.","name":"linkToCurrentPage","type":"boolean"},{"default":"","required":"false","hint":"String or HTML to be prepended before result.","name":"prepend","type":"string"},{"default":"","required":"false","hint":"String or HTML to be appended after result.","name":"append","type":"string"},{"default":"","required":"false","hint":"String or HTML to be prepended before each page number.","name":"prependToPage","type":"string"},{"default":"true","required":"false","hint":"Whether or not to prepend the prependToPage string on the first page in the list.","name":"prependOnFirst","type":"boolean"},{"default":"true","required":"false","hint":"Whether or not to prepend the prependToPage string on the anchors.","name":"prependOnAnchor","type":"boolean"},{"default":"","required":"false","hint":"String or HTML to be appended after each page number.","name":"appendToPage","type":"string"},{"default":"true","required":"false","hint":"Whether or not to append the appendToPage string on the last page in the list.","name":"appendOnLast","type":"boolean"},{"default":"true","required":"false","hint":"Whether or not to append the appendToPage string on the anchors.","name":"appendOnAnchor","type":"boolean"},{"default":"","required":"false","hint":"Class name for the current page number (if linkToCurrentPage is true, the class name will go on the a element. If not, a span element will be used).","name":"classForCurrent","type":"string"},{"default":"query","required":"false","hint":"The handle given to the query that the pagination links should be displayed for.","name":"handle","type":"string"},{"default":"page","required":"false","hint":"The name of the param that holds the current page number.","name":"name","type":"string"},{"default":"false","required":"false","hint":"Will show a single page when set to true. (The default behavior is to return an empty string when there is only one page in the pagination).","name":"showSinglePage","type":"boolean"},{"default":"true","required":"false","hint":"Decides whether to link the page number as a param or as part of a route. (The default behavior is true).","name":"pageNumberAsParam","type":"boolean"}],"name":"paginationLinks","availableIn":{},"tags":{"categoryClass":"","sectionClass":"","category":"","section":""}},{"extended":{"hasExtended":true,"docs":"<pre>&lt;!--- Provide a `label` and the required `objectName` and `property` ---&gt;\n&lt;cfoutput&gt;\n    #passwordField(label=&quot;Password&quot;, objectName=&quot;user&quot;, property=&quot;password&quot;)#\n&lt;/cfoutput&gt;\n\n&lt;!--- Display fields for passwords provided by the `passwords` association and nested properties ---&gt;\n&lt;fieldset&gt;\n\t&lt;legend&gt;Passwords&lt;/legend&gt;\n\t&lt;cfloop from=&quot;1&quot; to=&quot;##ArrayLen(user.passwords)##&quot; index=&quot;i&quot;&gt;\n\t\t#passwordField(label=&quot;Password ####i##&quot;, objectName=&quot;user&quot;, association=&quot;passwords&quot;, position=i, property=&quot;password&quot;)#\n\t&lt;/cfloop&gt;\n&lt;/fieldset&gt;</pre>"},"hint":"Builds and returns a string containing a password field form control based on the supplied objectName and property. Note: Pass any additional arguments like class, rel, and id, and the generated tag will also include those values as HTML attributes.","returntype":"","slug":"passwordfield","parameters":[{"default":"","required":"true","hint":"See documentation for textField.","name":"objectName","type":"any"},{"default":"","required":"true","hint":"See documentation for textField.","name":"property","type":"string"},{"default":"","required":"false","hint":"See documentation for textfield.","name":"association","type":"string"},{"default":"","required":"false","hint":"See documentation for textfield.","name":"position","type":"string"},{"default":"useDefaultLabel","required":"false","hint":"See documentation for textField","name":"label","type":"string"},{"default":"around","required":"false","hint":"See documentation for textField.","name":"labelPlacement","type":"string"},{"default":"","required":"false","hint":"See documentation for textField.","name":"prepend","type":"string"},{"default":"","required":"false","hint":"See documentation for textField.","name":"append","type":"string"},{"default":"","required":"false","hint":"See documentation for textField.","name":"prependToLabel","type":"string"},{"default":"","required":"false","hint":"See documentation for textField.","name":"appendToLabel","type":"string"},{"default":"span","required":"false","hint":"See documentation for textField.","name":"errorElement","type":"string"},{"default":"fieldWithErrors","required":"false","hint":"See documentation for textField.","name":"errorClass","type":"string"}],"name":"passwordField","availableIn":{},"tags":{"categoryClass":"","sectionClass":"","category":"","section":""}},{"extended":{"hasExtended":true,"docs":"<pre>&lt;!--- Basic usage usually involves a `label`, `name`, and `value` ---&gt;\n&lt;cfoutput&gt;\n    #passwordFieldTag(label=&quot;Password&quot;, name=&quot;password&quot;, value=params.password)#\n&lt;/cfoutput&gt;</pre>"},"hint":"Builds and returns a string containing a password field form control based on the supplied name. Note: Pass any additional arguments like class, rel, and id, and the generated tag will also include those values as HTML attributes.","returntype":"","slug":"passwordfieldtag","parameters":[{"default":"","required":"true","hint":"See documentation for textFieldTag.","name":"name","type":"string"},{"default":"","required":"false","hint":"See documentation for textFieldTag.","name":"value","type":"string"},{"default":"","required":"false","hint":"See documentation for textField.","name":"label","type":"string"},{"default":"around","required":"false","hint":"See documentation for textField.","name":"labelPlacement","type":"string"},{"default":"","required":"false","hint":"See documentation for textField.","name":"prepend","type":"string"},{"default":"","required":"false","hint":"See documentation for textField.","name":"append","type":"string"},{"default":"","required":"false","hint":"See documentation for textField.","name":"prependToLabel","type":"string"},{"default":"","required":"false","hint":"See documentation for textField.","name":"appendToLabel","type":"string"}],"name":"passwordFieldTag","availableIn":{},"tags":{"categoryClass":"","sectionClass":"","category":"","section":""}},{"extended":{"hasExtended":true,"docs":"<pre>pluginNames() &lt;!--- Check if the Scaffold plugin is installed ---&gt;\n&lt;cfif ListFindNoCase(&quot;scaffold&quot;, pluginNames())&gt;\n    &lt;!--- do something cool ---&gt;\n&lt;/cfif&gt;</pre>"},"hint":"Returns a list of all installed plugins' names.","returntype":"","slug":"pluginnames","parameters":[],"name":"pluginNames","availableIn":{},"tags":{"categoryClass":"","sectionClass":"","category":"","section":""}},{"extended":{"hasExtended":true,"docs":"<pre>pluralize(word [, count, returnCount ]) &lt;!--- Pluralize a word, will result in &quot;people&quot; ---&gt;\n#pluralize(&quot;person&quot;)#\n\n&lt;!--- Pluralize based on the count passed in ---&gt;\nYour search returned #pluralize(word=&quot;person&quot;, count=users.RecordCount)#</pre>"},"hint":"Returns the plural form of the passed in word. Can also pluralize a word based on a value passed to the count argument.","returntype":"","slug":"pluralize","parameters":[{"default":"","required":"Yes","hint":"The word to pluralize.","name":"word","type":"string"},{"default":"","required":"No","hint":"Pluralization will occur when this value is not 1.","name":"count","type":"numeric"},{"default":"","required":"No","hint":"Will return count prepended to the pluralization when true and count is not -1.","name":"returnCount","type":"boolean"}],"name":"pluralize","availableIn":{},"tags":{"categoryClass":"","sectionClass":"","category":"","section":""}},{"extended":{"hasExtended":true,"docs":"<pre>primaryKey([ position ]) &lt;!--- Get the name of the primary key of the table mapped to the `employee` model (which is the `employees` table by default) ---&gt;\n&lt;cfset keyName = model(&quot;employee&quot;).primaryKey()&gt;</pre>"},"hint":"Returns the name of the primary key for this model's table. This is determined through database introspection. If composite primary keys have been used, they will both be returned in a list. This function is also aliased as primaryKeys().","returntype":"","slug":"primarykey","parameters":[{"default":"0","required":"No","hint":"If you are accessing a composite primary key, pass the position of a single key to fetch.","name":"position","type":"numeric"}],"name":"primaryKey","availableIn":{},"tags":{"categoryClass":"","sectionClass":"","category":"","section":""}},{"extended":{"hasExtended":true,"docs":"<pre>primaryKeys([ position ]) &lt;!--- Get a list of the names of the primary keys in the table mapped to the `employee` model (which is the `employees` table by default) ---&gt;\n&lt;cfset keyNames = model(&quot;employee&quot;).primaryKeys()&gt;</pre>"},"hint":"Alias for primaryKey(). Use this for better readability when you're accessing multiple primary keys.","returntype":"","slug":"primarykeys","parameters":[{"default":"0","required":"No","hint":"If you are accessing a composite primary key, pass the position of a single key to fetch.","name":"position","type":"numeric"}],"name":"primaryKeys","availableIn":{},"tags":{"categoryClass":"","sectionClass":"","category":"","section":""}},{"extended":{"hasExtended":true,"docs":"<pre>properties() &lt;!--- Get a structure of all the properties for an object ---&gt;\n&lt;cfset user = model(&quot;user&quot;).findByKey(1)&gt;\n&lt;cfset props = user.properties()&gt;</pre>"},"hint":"Returns a structure of all the properties with their names as keys and the values of the property as values.","returntype":"","slug":"properties","parameters":[],"name":"properties","availableIn":{},"tags":{"categoryClass":"","sectionClass":"","category":"","section":""}},{"extended":{"hasExtended":true,"docs":"<pre>property(name [, column, sql, label, defaultValue ]) &lt;!--- Tell Wheels that when we are referring to `firstName` in the CFML code, it should translate to the `STR_USERS_FNAME` column when interacting with the database instead of the default (which would be the `firstname` column) ---&gt;\n&lt;cfset property(name=&quot;firstName&quot;, column=&quot;STR_USERS_FNAME&quot;)&gt;\n\n&lt;!--- Tell Wheels that when we are referring to `fullName` in the CFML code, it should concatenate the `STR_USERS_FNAME` and `STR_USERS_LNAME` columns ---&gt;\n&lt;cfset property(name=&quot;fullName&quot;, sql=&quot;STR_USERS_FNAME + ' ' + STR_USERS_LNAME&quot;)&gt;\n\n&lt;!--- Tell Wheels that when displaying error messages or labels for form fields, we want to use `First name(s)` as the label for the `STR_USERS_FNAME` column ---&gt;\n&lt;cfset property(name=&quot;firstName&quot;, label=&quot;First name(s)&quot;)&gt;\n\n&lt;!--- Tell Wheels that when creating new objects, we want them to be auto-populated with a `firstName` property of value `Dave` ---&gt;\n&lt;cfset property(name=&quot;firstName&quot;, defaultValue=&quot;Dave&quot;)&gt;</pre>"},"hint":"Use this method to map an object property to either a table column with a different name than the property or to a SQL expression. You only need to use this method when you want to override the default object relational mapping that Wheels performs.","returntype":"","slug":"property","parameters":[{"default":"","required":"Yes","hint":"The name that you want to use for the column or SQL function result in the CFML code.","name":"name","type":"string"},{"default":"","required":"No","hint":"The name of the column in the database table to map the property to.","name":"column","type":"string"},{"default":"","required":"No","hint":"A SQL expression to use to calculate the property value.","name":"sql","type":"string"},{"default":"","required":"No","hint":"A custom label for this property to be referenced in the interface and error messages.","name":"label","type":"string"},{"default":"","required":"No","hint":"A default value for this property.","name":"defaultValue","type":"string"}],"name":"property","availableIn":{},"tags":{"categoryClass":"","sectionClass":"","category":"","section":""}},{"extended":{"hasExtended":true,"docs":"<pre>propertyIsPresent(property) &lt;!--- Get an object, set a value and then see if the property exists ---&gt;\n&lt;cfset employee = model(&quot;employee&quot;).new()&gt;\n&lt;cfset employee.firstName = &quot;dude&quot;&gt;\n&lt;cfreturn employee.propertyIsPresent(&quot;firstName&quot;)&gt;&lt;!--- Returns true ---&gt;\n\n&lt;cfset employee.firstName = &quot;&quot;&gt;\n&lt;cfreturn employee.propertyIsPresent(&quot;firstName&quot;)&gt;&lt;!--- Returns false ---&gt;</pre>"},"hint":"Returns true if the specified property exists on the model and is not a blank string.","returntype":"","slug":"propertyispresent","parameters":[{"default":"","required":"Yes","hint":"Name of property to inspect.","name":"property","type":"string"}],"name":"propertyIsPresent","availableIn":{},"tags":{"categoryClass":"","sectionClass":"","category":"","section":""}},{"extended":{"hasExtended":true,"docs":"<pre>propertyNames() &lt;!--- Get a list of the property names in use in the user model ---&gt;\n&lt;cfset propNames = model(&quot;user&quot;).propertyNames()&gt;</pre>"},"hint":"Returns a list of property names ordered by their respective column's ordinal position in the database table. Also includes calculated property names that will be generated by the Wheels ORM.","returntype":"","slug":"propertynames","parameters":[],"name":"propertyNames","availableIn":{},"tags":{"categoryClass":"","sectionClass":"","category":"","section":""}},{"extended":{"hasExtended":true,"docs":"<pre>protectedProperties([ properties ]) &lt;!--- In `models/User.cfc`, `firstName` and `lastName` cannot be changed through mass assignment operations like `updateAll()` ---&gt;\n&lt;cffunction name=&quot;init&quot;&gt;\n    &lt;cfset protectedProperties(&quot;firstName,lastName&quot;)&gt;\n&lt;/cffunction&gt;</pre>"},"hint":"Use this method to specify which properties cannot be set through mass assignment.","returntype":"","slug":"protectedproperties","parameters":[{"default":"","required":"No","hint":"Property name (or list of property names) that are not allowed to be altered through mass assignment.","name":"properties","type":"string"}],"name":"protectedProperties","availableIn":{},"tags":{"categoryClass":"","sectionClass":"","category":"","section":""}},{"extended":{"hasExtended":true,"docs":"<pre>provides(&quot;html,xml,json&quot;);</pre>"},"hint":"Defines formats that the controller will respond with upon request. The format can be requested through a URL variable called format, by appending the format name to the end of a URL as an extension (when URL rewriting is enabled), or in the request header.","returntype":"","slug":"provides","parameters":[{"default":"","required":"false","hint":"Formats to instruct the controller to provide. Valid values are html (the default), xml, json, csv, pdf, and xls.","name":"formats","type":"string"}],"name":"provides","availableIn":{},"tags":{"categoryClass":"","sectionClass":"","category":"","section":""}},{"extended":{"hasExtended":true,"docs":"<pre>&lt;!--- Basic example view code ---&gt;\n&lt;cfoutput&gt;\n\t&lt;fieldset&gt;\n\t\t&lt;legend&gt;Gender&lt;/legend&gt;\n\t    #radioButton(objectName=&quot;user&quot;, property=&quot;gender&quot;, tagValue=&quot;m&quot;, label=&quot;Male&quot;)#&lt;br /&gt;\n        #radioButton(objectName=&quot;user&quot;, property=&quot;gender&quot;, tagValue=&quot;f&quot;, label=&quot;Female&quot;)#\n\t&lt;/fieldset&gt;\n&lt;/cfoutput&gt;\n\n&lt;!--- Shows radio buttons for selecting the genders for all committee members provided by the `members` association and nested properties ---&gt;\n&lt;cfoutput&gt;\n\t&lt;cfloop from=&quot;1&quot; to=&quot;#ArrayLen(committee.members)#&quot; index=&quot;i&quot;&gt;\n\t\t&lt;div&gt;\n\t\t\t&lt;h3&gt;#committee.members[i].fullName#:&lt;/h3&gt;\n\t\t\t&lt;div&gt;\n\t\t\t\t#radioButton(objectName=&quot;committee&quot;, association=&quot;members&quot;, position=i, property=&quot;gender&quot;, tagValue=&quot;m&quot;, label=&quot;Male&quot;)#&lt;br /&gt;\n\t\t\t\t#radioButton(objectName=&quot;committee&quot;, association=&quot;members&quot;, position=i, property=&quot;gender&quot;, tagValue=&quot;f&quot;, label=&quot;Female&quot;)#\n\t\t\t&lt;/div&gt;\n\t\t&lt;/div&gt;\n\t&lt;/cfloop&gt;\n&lt;/cfoutput&gt;</pre>"},"hint":"Builds and returns a string containing a radio button form control based on the supplied objectName and property. Note: Pass any additional arguments like class, rel, and id, and the generated tag will also include those values as HTML attributes.","returntype":"","slug":"radiobutton","parameters":[{"default":"","required":"true","hint":"See documentation for textField.","name":"objectName","type":"any"},{"default":"","required":"true","hint":"See documentation for textField.","name":"property","type":"string"},{"default":"","required":"false","hint":"See documentation for textfield.","name":"association","type":"string"},{"default":"","required":"false","hint":"See documentation for textfield.","name":"position","type":"string"},{"default":"","required":"true","hint":"The value of the radio button when selected.","name":"tagValue","type":"string"},{"default":"useDefaultLabel","required":"false","hint":"See documentation for textField.","name":"label","type":"string"},{"default":"around","required":"false","hint":"See documentation for textField.","name":"labelPlacement","type":"string"},{"default":"","required":"false","hint":"See documentation for textField.","name":"prepend","type":"string"},{"default":"","required":"false","hint":"See documentation for textField.","name":"append","type":"string"},{"default":"","required":"false","hint":"See documentation for textField.","name":"prependToLabel","type":"string"},{"default":"","required":"false","hint":"See documentation for textField.","name":"appendToLabel","type":"string"},{"default":"span","required":"false","hint":"See documentation for textField.","name":"errorElement","type":"string"},{"default":"fieldWithErrors","required":"false","hint":"See documentation for textField.","name":"errorClass","type":"string"}],"name":"radioButton","availableIn":{},"tags":{"categoryClass":"","sectionClass":"","category":"","section":""}},{"extended":{"hasExtended":true,"docs":"<pre>&lt;!--- Basic usage usually involves a `label`, `name`, `value`, and `checked` value ---&gt;\n&lt;cfoutput&gt;\n\t&lt;fieldset&gt;\n\t\t&lt;legend&gt;Gender&lt;/legend&gt;\n\t\t#radioButtonTag(name=&quot;gender&quot;, value=&quot;m&quot;, label=&quot;Male&quot;, checked=true)#&lt;br&gt;\n\t\t#radioButtonTag(name=&quot;gender&quot;, value=&quot;f&quot;, label=&quot;Female&quot;)#\n\t&lt;/fieldset&gt;\n&lt;/cfoutput&gt;</pre>"},"hint":"Builds and returns a string containing a radio button form control based on the supplied name. Note: Pass any additional arguments like class, rel, and id, and the generated tag will also include those values as HTML attributes.","returntype":"","slug":"radiobuttontag","parameters":[{"default":"","required":"true","hint":"See documentation for textFieldTag.","name":"name","type":"string"},{"default":"","required":"true","hint":"See documentation for textFieldTag.","name":"value","type":"string"},{"default":"false","required":"false","hint":"Whether or not to check the radio button by default.","name":"checked","type":"boolean"},{"default":"","required":"false","hint":"See documentation for textField.","name":"label","type":"string"},{"default":"around","required":"false","hint":"See documentation for textField.","name":"labelPlacement","type":"string"},{"default":"","required":"false","hint":"See documentation for textField.","name":"prepend","type":"string"},{"default":"","required":"false","hint":"See documentation for textField.","name":"append","type":"string"},{"default":"","required":"false","hint":"See documentation for textField.","name":"prependToLabel","type":"string"},{"default":"","required":"false","hint":"See documentation for textField.","name":"appendToLabel","type":"string"}],"name":"radioButtonTag","availableIn":{},"tags":{"categoryClass":"","sectionClass":"","category":"","section":""}},{"extended":{"hasExtended":true,"docs":"<pre>// Redirect to an action after successfully saving a user\nif (user.save())\n{\n\tredirectTo(action=&quot;saveSuccessful&quot;);\n}\n\n// Redirect to a specific page on a secure server\nredirectTo(controller=&quot;checkout&quot;, action=&quot;start&quot;, params=&quot;type=express&quot;, protocol=&quot;https&quot;);\n\n// Redirect to a route specified in `config/routes.cfm` and pass in the screen name that the route takes\nredirectTo(route=&quot;profile&quot;, screenName=&quot;Joe&quot;);\n\n// Redirect back to the page the user came from\nredirectTo(back=true);</pre>"},"hint":"Redirects the browser to the supplied controller/action/key, route or back to the referring page. Internally, this function uses the URLFor function to build the link and the cflocation tag to perform the redirect.","returntype":"","slug":"redirectto","parameters":[{"default":"false","required":"false","hint":"Set to true to redirect back to the referring page.","name":"back","type":"boolean"},{"default":"false","required":"false","hint":"See documentation for your CFML engine's implementation of cflocation.","name":"addToken","type":"boolean"},{"default":"302","required":"false","hint":"See documentation for your CFML engine's implementation of cflocation.","name":"statusCode","type":"numeric"},{"default":"","required":"false","hint":"Name of a route that you have configured in config/routes.cfm.","name":"route","type":"string"},{"default":"","required":"false","hint":"Name of the controller to include in the URL.","name":"controller","type":"string"},{"default":"","required":"false","hint":"Name of the action to include in the URL.","name":"action","type":"string"},{"default":"","required":"false","hint":"Key(s) to include in the URL.","name":"key","type":"any"},{"default":"","required":"false","hint":"Any additional parameters to be set in the query string (example: wheels=cool&x=y). Please note that CFWheels uses the & and = characters to split the parameters and encode them properly for you (using URLEncodedFormat() internally). However, if you need to pass in & or = as part of the value, then you need to encode them (and only them), example: a=cats%26dogs%3Dtrouble!&b=1.","name":"params","type":"string"},{"default":"","required":"false","hint":"Sets an anchor name to be appended to the path.","name":"anchor","type":"string"},{"default":"true","required":"false","hint":"If true, returns only the relative URL (no protocol, host name or port).","name":"onlyPath","type":"boolean"},{"default":"","required":"false","hint":"Set this to override the current host.","name":"host","type":"string"},{"default":"","required":"false","hint":"Set this to override the current protocol.","name":"protocol","type":"string"},{"default":"0","required":"false","hint":"Set this to override the current port number.","name":"port","type":"numeric"},{"default":"","required":"false","hint":"Redirect to an external URL.","name":"url","type":"string"},{"default":"false","required":"false","hint":"Set to true to delay the redirection until after the rest of your action code has executed.","name":"delay","type":"boolean"}],"name":"redirectTo","availableIn":{},"tags":{"categoryClass":"","sectionClass":"","category":"","section":""}},{"extended":{"hasExtended":true,"docs":"<pre>reload() &lt;!--- Get an object, call a method on it that could potentially change values, and then reload the values from the database ---&gt;\n&lt;cfset employee = model(&quot;employee&quot;).findByKey(params.key)&gt;\n&lt;cfset employee.someCallThatChangesValuesInTheDatabase()&gt;\n&lt;cfset employee.reload()&gt;</pre>"},"hint":"Reloads the property values of this object from the database.","returntype":"","slug":"reload","parameters":[],"name":"reload","availableIn":{},"tags":{"categoryClass":"","sectionClass":"","category":"","section":""}},{"extended":{"hasExtended":true,"docs":"<pre>// Render a blank white page to the client\nrenderNothing();</pre>"},"hint":"Instructs the controller to render an empty string when it's finished processing the action. This is very similar to calling cfabort with the advantage that any after filters you have set on the action will still be run.","returntype":"","slug":"rendernothing","parameters":[],"name":"renderNothing","availableIn":{},"tags":{"categoryClass":"","sectionClass":"","category":"","section":""}},{"extended":{"hasExtended":true,"docs":"<pre>// Render a view page for a different action within the same controller\nrenderPage(action=&quot;edit&quot;);\n\n// Render a view page for a different action within a different controller\nrenderPage(controller=&quot;blog&quot;, action=&quot;new&quot;);\n\n// Another way to render the blog/new template from within a different controller\nrenderPage(template=&quot;/blog/new&quot;);\n\n// Render the view page for the current action but without a layout and cache it for 60 minutes\nrenderPage(layout=false, cache=60);\n\n// Load a layout from a different folder within `views`\nrenderPage(layout=&quot;/layouts/blog&quot;);\n\n// Don''t render the view immediately but rather return and store in a variable for further processing\nmyView = renderPage(returnAs=&quot;string&quot;);</pre>"},"hint":"Instructs the controller which view template and layout to render when it's finished processing the action. Note that when passing values for controller and/or action, this function does not execute the actual action but rather just loads the corresponding view template.","returntype":"","slug":"renderpage","parameters":[{"default":"","required":"false","hint":"Controller to include the view page for.","name":"controller","type":"string"},{"default":"","required":"false","hint":"Action to include the view page for.","name":"action","type":"string"},{"default":"","required":"false","hint":"A specific template to render. Prefix with a leading slash / if you need to build a path from the root views folder.","name":"template","type":"string"},{"default":"","required":"false","hint":"The layout to wrap the content in. Prefix with a leading slash / if you need to build a path from the root views folder. Pass false to not load a layout at all.","name":"layout","type":"any"},{"default":"","required":"false","hint":"Number of minutes to cache the content for.","name":"cache","type":"any"},{"default":"","required":"false","hint":"Set to string to return the result instead of automatically sending it to the client.","name":"returnAs","type":"string"},{"default":"false","required":"false","hint":"Set to true to hide the debug information at the end of the output. This is useful when you're testing XML output in an environment where the global setting for showDebugInformation is true.","name":"hideDebugInformation","type":"boolean"}],"name":"renderPage","availableIn":{},"tags":{"categoryClass":"","sectionClass":"","category":"","section":""}},{"extended":{"hasExtended":true,"docs":"<pre>// Render the partial `_comment.cfm` located in the current controller''s view folder\nrenderPartial(&quot;comment&quot;);\n\n// Render the partial at `views/shared/_comment.cfm`\nrenderPartial(&quot;/shared/comment&quot;);</pre>"},"hint":"Instructs the controller to render a partial when it's finished processing the action.","returntype":"","slug":"renderpartial","parameters":[{"default":"","required":"true","hint":"The name of the partial file to be used. Prefix with a leading slash / if you need to build a path from the root views folder. Do not include the partial filename's underscore and file extension.","name":"partial","type":"string"},{"default":"","required":"false","hint":"See documentation for renderPage.","name":"cache","type":"any"},{"default":"","required":"false","hint":"See documentation for renderPage.","name":"layout","type":"string"},{"default":"","required":"false","hint":"See documentation for renderPage.","name":"returnAs","type":"string"},{"default":"true","required":"false","hint":"Name of a controller function to load data from.","name":"dataFunction","type":"any"}],"name":"renderPartial","availableIn":{},"tags":{"categoryClass":"","sectionClass":"","category":"","section":""}},{"extended":{"hasExtended":true,"docs":"<pre>// Render just the text &quot;Done!&quot; to the client\nrenderText(&quot;Done!&quot;);\n\n// Render serialized product data to the client\nproducts = model(&quot;product&quot;).findAll();\nrenderText(SerializeJson(products));</pre>"},"hint":"Instructs the controller to render specified text when it's finished processing the action.","returntype":"","slug":"rendertext","parameters":[{"default":"","required":"true","hint":"The text to be rendered.","name":"text","type":"any"}],"name":"renderText","availableIn":{},"tags":{"categoryClass":"","sectionClass":"","category":"","section":""}},{"extended":{"hasExtended":true,"docs":"<pre>// This will provide the formats defined in the `init()` function\nproducts = model(&quot;product&quot;).findAll();\nrenderWith(products);</pre>"},"hint":"Instructs the controller to render the data passed in to the format that is requested. If the format requested is json or xml, CFWheels will transform the data into that format automatically. For other formats (or to override the automatic formatting), you can also create a view template in this format: nameofaction.xml.cfm, nameofaction.json.cfm, nameofaction.pdf.cfm, etc.","returntype":"","slug":"renderwith","parameters":[{"default":"","required":"true","hint":"Data to format and render.","name":"data","type":"any"},{"default":"","required":"false","hint":"See documentation for renderPage.","name":"controller","type":"string"},{"default":"","required":"false","hint":"See documentation for renderPage.","name":"action","type":"string"},{"default":"","required":"false","hint":"See documentation for renderPage.","name":"template","type":"string"},{"default":"","required":"false","hint":"See documentation for renderPage.","name":"layout","type":"any"},{"default":"","required":"false","hint":"See documentation for renderPage.","name":"cache","type":"any"},{"default":"","required":"false","hint":"See documentation for renderPage.","name":"returnAs","type":"string"},{"default":"false","required":"false","hint":"See documentation for renderPage.","name":"hideDebugInformation","type":"boolean"}],"name":"renderWith","availableIn":{},"tags":{"categoryClass":"","sectionClass":"","category":"","section":""}},{"extended":{"hasExtended":true,"docs":"<pre>&lt;!--- alternating row colors and shrinking emphasis ---&gt;\n&lt;cfoutput query=&quot;employees&quot; group=&quot;departmentId&quot;&gt;\n\t&lt;div class=&quot;#cycle(values=&quot;even,odd&quot;, name=&quot;row&quot;)#&quot;&gt;\n\t\t&lt;ul&gt;\n\t\t\t&lt;cfoutput&gt;\n\t\t\t\t&lt;cfset rank = cycle(values=&quot;president,vice-president,director,manager,specialist,intern&quot;, name=&quot;position&quot;)&gt;\n\t\t\t\t&lt;li class=&quot;#rank#&quot;&gt;#categories.categoryName#&lt;/li&gt;\n\t\t\t\t&lt;cfset resetCycle(&quot;emphasis&quot;)&gt;\n\t\t\t&lt;/cfoutput&gt;\n\t\t&lt;/ul&gt;\n\t&lt;/div&gt;\n&lt;/cfoutput&gt;</pre>"},"hint":"Resets a cycle so that it starts from the first list value the next time it is called.","returntype":"","slug":"resetcycle","parameters":[{"default":"default","required":"false","hint":"The name of the cycle to reset.","name":"name","type":"string"}],"name":"resetCycle","availableIn":{},"tags":{"categoryClass":"","sectionClass":"","category":"","section":""}},{"extended":{"hasExtended":true,"docs":"<pre>wheelsResponse = response();</pre>"},"hint":"Returns content that CFWheels will send to the client in response to the request.","returntype":"","slug":"response","parameters":[],"name":"response","availableIn":{},"tags":{"categoryClass":"","sectionClass":"","category":"","section":""}},{"extended":{"hasExtended":true,"docs":"<pre>&lt;!--- Save the user object to the database (will automatically do an `INSERT` or `UPDATE` statement depending on if the record is new or already exists ---&gt;\n&lt;cfset user.save()&gt;\n\n&lt;!--- Save the user object directly in an if statement without using `cfqueryparam` and take appropriate action based on the result ---&gt;\n&lt;cfif user.save(parameterize=false)&gt;\n\t&lt;cfset flashInsert(notice=&quot;The user was saved!&quot;)&gt;\n\t&lt;cfset redirectTo(action=&quot;edit&quot;)&gt;\n&lt;cfelse&gt;\n\t&lt;cfset flashInsert(alert=&quot;Error, please correct!&quot;)&gt;\n\t&lt;cfset renderPage(action=&quot;edit&quot;)&gt;\n&lt;/cfif&gt;</pre>"},"hint":"Saves the object if it passes validation and callbacks. Returns true if the object was saved successfully to the database, false if not.","returntype":"","slug":"save","parameters":[{"default":"true","required":"false","hint":"See documentation for findAll.","name":"parameterize","type":"any"},{"default":"false","required":"false","hint":"Set to true to reload the object from the database once an insert/update has completed.","name":"reload","type":"boolean"},{"default":"true","required":"false","hint":"Set to false to skip validations for this operation.","name":"validate","type":"boolean"},{"default":"","required":"false","hint":"Set this to commit to update the database when the save has completed, rollback to run all the database queries but not commit them, or none to skip transaction handling altogether.","name":"transaction","type":"string"},{"default":"true","required":"false","hint":"Set to false to disable callbacks for this operation.","name":"callbacks","type":"boolean"}],"name":"save","availableIn":{},"tags":{"categoryClass":"","sectionClass":"","category":"","section":""}},{"extended":{"hasExtended":true,"docs":"<pre>&lt;!--- This &quot;Tag&quot; version of the function accepts a `name` and `selected` instead of binding to a model object ---&gt;\n&lt;cfoutput&gt;\n    #secondSelectTag(name=&quot;secondsToLaunch&quot;, selected=params.secondsToLaunch)#\n&lt;/cfoutput&gt;\n\n&lt;!--- Only show 15-second intervals ---&gt;\n&lt;cfoutput&gt;\n\t#secondSelectTag(name=&quot;secondsToLaunch&quot;, value=params.secondsToLaunch, secondStep=15)#\n&lt;/cfoutput&gt;</pre>"},"hint":"Builds and returns a string containing one select form control for the seconds of a minute based on the supplied name.","returntype":"","slug":"secondselecttag","parameters":[{"default":"","required":"true","hint":"See documentation for textFieldTag.","name":"name","type":"string"},{"default":"","required":"false","hint":"The second that should be selected initially.","name":"selected","type":"string"},{"default":"1","required":"false","hint":"See documentation for timeSelect.","name":"secondStep","type":"numeric"},{"default":"false","required":"false","hint":"See documentation for select.","name":"includeBlank","type":"any"},{"default":"","required":"false","hint":"See documentation for textField.","name":"label","type":"string"},{"default":"around","required":"false","hint":"See documentation for textField.","name":"labelPlacement","type":"string"},{"default":"","required":"false","hint":"See documentation for textField.","name":"prepend","type":"string"},{"default":"","required":"false","hint":"See documentation for textField.","name":"append","type":"string"},{"default":"","required":"false","hint":"See documentation for textField.","name":"prependToLabel","type":"string"},{"default":"","required":"false","hint":"See documentation for textField.","name":"appendToLabel","type":"string"}],"name":"secondSelectTag","availableIn":{},"tags":{"categoryClass":"","sectionClass":"","category":"","section":""}},{"extended":{"hasExtended":true,"docs":"<pre>&lt;!--- Example 1: Basic `select` field with `label` and required `objectName` and `property` arguments ---&gt;\n&lt;!--- - Controller code ---&gt;\n&lt;cfset authors = model(&quot;author&quot;).findAll()&gt;\n\n&lt;!--- - View code ---&gt;\n&lt;cfoutput&gt;\n    &lt;p&gt;#select(objectName=&quot;book&quot;, property=&quot;authorId&quot;, options=authors)#&lt;/p&gt;\n&lt;/cfoutput&gt;\n\n&lt;!--- Example 2: Shows `select` fields for selecting order statuses for all shipments provided by the `orders` association and nested properties ---&gt;\n&lt;!--- - Controller code ---&gt;\n&lt;cfset shipment = model(&quot;shipment&quot;).findByKey(key=params.key, where=&quot;shipments.statusId=##application.NEW_STATUS_ID##&quot;, include=&quot;order&quot;)&gt;\n&lt;cfset statuses = model(&quot;status&quot;).findAll(order=&quot;name&quot;)&gt;\n\n&lt;!--- - View code ---&gt;\n&lt;cfoutput&gt;\n\t&lt;cfloop from=&quot;1&quot; to=&quot;##ArrayLen(shipments.orders)##&quot; index=&quot;i&quot;&gt;\n\t\t#select(label=&quot;Order #shipments.orders[i].orderNum#&quot;, objectName=&quot;shipment&quot;, association=&quot;orders&quot;, position=i, property=&quot;statusId&quot;, options=statuses)#\n\t&lt;/cfloop&gt;\n&lt;/cfoutput&gt;</pre>"},"hint":"Builds and returns a string containing a select form control based on the supplied objectName and property. Note: Pass any additional arguments like class, rel, and id, and the generated tag will also include those values as HTML attributes.","returntype":"","slug":"select","parameters":[{"default":"","required":"true","hint":"See documentation for textField.","name":"objectName","type":"any"},{"default":"","required":"true","hint":"See documentation for textField.","name":"property","type":"string"},{"default":"","required":"false","hint":"See documentation for textfield.","name":"association","type":"string"},{"default":"","required":"false","hint":"See documentation for textfield.","name":"position","type":"string"},{"default":"","required":"true","hint":"A collection to populate the select form control with. Can be a query recordset or an array of objects.","name":"options","type":"any"},{"default":"false","required":"false","hint":"Whether to include a blank option in the select form control. Pass true to include a blank line or a string that should represent what display text should appear for the empty value (for example, \"- Select One -\").","name":"includeBlank","type":"any"},{"default":"","required":"false","hint":"The column or property to use for the value of each list element. Used only when a query or array of objects has been supplied in the options argument.","name":"valueField","type":"string"},{"default":"","required":"false","hint":"The column or property to use for the value of each list element that the end user will see. Used only when a query or array of objects has been supplied in the options argument.","name":"textField","type":"string"},{"default":"useDefaultLabel","required":"false","hint":"See documentation for textField.","name":"label","type":"string"},{"default":"around","required":"false","hint":"See documentation for textField.","name":"labelPlacement","type":"string"},{"default":"","required":"false","hint":"See documentation for textField.","name":"prepend","type":"string"},{"default":"","required":"false","hint":"See documentation for textField.","name":"append","type":"string"},{"default":"","required":"false","hint":"See documentation for textField.","name":"prependToLabel","type":"string"},{"default":"","required":"false","hint":"See documentation for textField.","name":"appendToLabel","type":"string"},{"default":"span","required":"false","hint":"See documentation for textField.","name":"errorElement","type":"string"},{"default":"fieldWithErrors","required":"false","hint":"See documentation for textField.","name":"errorClass","type":"string"}],"name":"select","availableIn":{},"tags":{"categoryClass":"","sectionClass":"","category":"","section":""}},{"extended":{"hasExtended":true,"docs":"<pre>&lt;!--- Controller code ---&gt;\n&lt;cfset cities = model(&quot;city&quot;).findAll()&gt;\n\n&lt;!--- View code ---&gt;\n&lt;cfoutput&gt;\n    #selectTag(name=&quot;cityId&quot;, options=cities)#\n&lt;/cfoutput&gt;\n\n&lt;!--- Do this when CFWheels isn''t grabbing the correct values for the `option`s'' values and display texts ---&gt;\n&lt;cfoutput&gt;\n\t#selectTag(name=&quot;cityId&quot;, options=cities, valueField=&quot;id&quot;, textField=&quot;name&quot;)#\n&lt;/cfoutput&gt;</pre>"},"hint":"Builds and returns a string containing a select form control based on the supplied name and options. Note: Pass any additional arguments like class, rel, and id, and the generated tag will also include those values as HTML attributes.","returntype":"","slug":"selecttag","parameters":[{"default":"","required":"true","hint":"See documentation for textFieldTag.","name":"name","type":"string"},{"default":"","required":"true","hint":"See documentation for select.","name":"options","type":"any"},{"default":"","required":"false","hint":"Value of option that should be selected by default.","name":"selected","type":"string"},{"default":"false","required":"false","hint":"See documentation for select.","name":"includeBlank","type":"any"},{"default":"false","required":"false","hint":"Whether to allow multiple selection of options in the select form control.","name":"multiple","type":"boolean"},{"default":"","required":"false","hint":"See documentation for select.","name":"valueField","type":"string"},{"default":"","required":"false","hint":"See documentation for select.","name":"textField","type":"string"},{"default":"","required":"false","hint":"See documentation for textField.","name":"label","type":"string"},{"default":"around","required":"false","hint":"See documentation for textField.","name":"labelPlacement","type":"string"},{"default":"","required":"false","hint":"See documentation for textField.","name":"prepend","type":"string"},{"default":"","required":"false","hint":"See documentation for textField.","name":"append","type":"string"},{"default":"","required":"false","hint":"See documentation for textField.","name":"prependToLabel","type":"string"},{"default":"","required":"false","hint":"See documentation for textField.","name":"appendToLabel","type":"string"}],"name":"selectTag","availableIn":{},"tags":{"categoryClass":"","sectionClass":"","category":"","section":""}},{"extended":{"hasExtended":true,"docs":"<pre>// Get a member and send a welcome email, passing in a few custom variables to the template\n\t\tnewMember = model(&quot;member&quot;).findByKey(params.member.id);\n\t\tsendEmail(\n\t\t\tto=newMember.email,\n\t\t\ttemplate=&quot;myemailtemplate&quot;,\n\t\t\tsubject=&quot;Thank You for Becoming a Member&quot;,\n\t\t\trecipientName=newMember.name,\n\t\t\tstartDate=newMember.startDate\n\t\t);</pre>"},"hint":"Sends an email using a template and an optional layout to wrap it in. Besides the CFWheels-specific arguments documented here, you can also pass in any argument that is accepted by the cfmail tag as well as your own arguments to be used by the view.","returntype":"","slug":"sendemail","parameters":[{"default":"","required":"true","hint":"The path to the email template or two paths if you want to send a multipart email. if the detectMultipart argument is false, the template for the text version should be the first one in the list. This argument is also aliased as templates.","name":"template","type":"string"},{"default":"","required":"true","hint":"Email address to send from.","name":"from","type":"string"},{"default":"","required":"true","hint":"List of email addresses to send the email to.","name":"to","type":"string"},{"default":"","required":"false","hint":"The subject line of the email.","name":"subject","type":"string"},{"default":"false","required":"false","hint":"Layout(s) to wrap the email template in. This argument is also aliased as layouts.","name":"layout","type":"any"},{"default":"","required":"false","hint":"A list of the names of the files to attach to the email. This will reference files stored in the files folder (or a path relative to it). This argument is also aliased as files.","name":"file","type":"string"},{"default":"true","required":"false","hint":"When set to true and multiple values are provided for the template argument, CFWheels will detect which of the templates is text and which one is HTML (by counting the < characters).","name":"detectMultipart","type":"boolean"}],"name":"sendEmail","availableIn":{},"tags":{"categoryClass":"","sectionClass":"","category":"","section":""}},{"extended":{"hasExtended":true,"docs":"<pre>// Send a PDF file to the user\nsendFile(file=&quot;wheels_tutorial_20081028_J657D6HX.pdf&quot;);\n\n// Send the same file but give the user a different name in the browser dialog window\nsendFile(file=&quot;wheels_tutorial_20081028_J657D6HX.pdf&quot;, name=&quot;Tutorial.pdf&quot;);\n\n// Send a file that is located outside of the web root\nsendFile(file=&quot;../../tutorials/wheels_tutorial_20081028_J657D6HX.pdf&quot;);</pre>"},"hint":"Sends a file to the user (from the files folder or a path relative to it by default).","returntype":"","slug":"sendfile","parameters":[{"default":"","required":"true","hint":"The file to send to the user.","name":"file","type":"string"},{"default":"","required":"false","hint":"The file name to show in the browser download dialog box.","name":"name","type":"string"},{"default":"","required":"false","hint":"The HTTP content type to deliver the file as.","name":"type","type":"string"},{"default":"attachment","required":"false","hint":"Set to inline to have the browser handle the opening of the file (possibly inline in the browser) or set to attachment to force a download dialog box.","name":"disposition","type":"string"},{"default":"","required":"false","hint":"Directory outside of the webroot where the file exists. Must be a full path.","name":"directory","type":"string"},{"default":"false","required":"false","hint":"Pass in true to delete the file on the server after sending it.","name":"deleteFile","type":"boolean"}],"name":"sendFile","availableIn":{},"tags":{"categoryClass":"","sectionClass":"","category":"","section":""}},{"extended":{"hasExtended":true,"docs":"<pre>&lt;!--- Example 1: Set the `URLRewriting` setting to `Partial` ---&gt;\n&lt;cfset set(URLRewriting=&quot;Partial&quot;)&gt;\n\n&lt;!--- Example 2: Set default values for the arguments in the `buttonTo` view helper. This works for the majority of Wheels functions/arguments. ---&gt;\n&lt;cfset set(functionName=&quot;buttonTo&quot;, onlyPath=true, host=&quot;&quot;, protocol=&quot;&quot;, port=0, text=&quot;&quot;, confirm=&quot;&quot;, image=&quot;&quot;, disable=&quot;&quot;)&gt;\n\n&lt;!--- Example 3: Set the default values for a form helper to get the form marked up to your preferences ---&gt;\n&lt;cfset set(functionName=&quot;textField&quot;, labelPlacement=&quot;before&quot;, prependToLabel=&quot;&lt;div&gt;&quot;, append=&quot;&lt;/div&gt;&quot;, appendToLabel=&quot;&lt;br /&gt;&quot;)&gt;</pre>"},"hint":"Use to configure a global setting or set a default for a function.","returntype":"","slug":"set","parameters":[],"name":"set","availableIn":{},"tags":{"categoryClass":"","sectionClass":"","category":"","section":""}},{"extended":{"hasExtended":true,"docs":"<pre>// Set filter chain directly in an array\n\t\tsetFilterChain([\n\t\t\t{through=&quot;restrictAccess&quot;},\n\t\t\t{through=&quot;isLoggedIn,checkIPAddress&quot;, except=&quot;home,login&quot;},\n\t\t\t{type=&quot;after&quot;, through=&quot;logConversion&quot;, only=&quot;thankYou&quot;}\n\t\t]);</pre>"},"hint":"Use this function if you need a more low level way of setting the entire filter chain for a controller.","returntype":"","slug":"setfilterchain","parameters":[{"default":"","required":"true","hint":"An array of structs, each of which represent an argumentCollection that get passed to the filters function. This should represent the entire filter chain that you want to use for this controller.","name":"chain","type":"array"}],"name":"setFilterChain","availableIn":{},"tags":{"categoryClass":"","sectionClass":"","category":"","section":""}},{"extended":{"hasExtended":true,"docs":"<pre>&lt;!--- Note that there are two ways to do pagination yourself using a custom query. 1) Do a query that grabs everything that matches and then use the `cfouput` or `cfloop` tag to page through the results. 2) Use your database to make 2 queries. The first query basically does a count of the total number of records that match the criteria and the second query actually selects the page of records for retrieval. In the example below, we will show how to write a custom query using both of these methods. Note that the syntax where your database performs the pagination will differ depending on the database engine you are using. Plese consult your database engine''s documentation for the correct syntax. Also note that the view code will differ depending on the method used. ---&gt; &lt;!--- First method: Handle the pagination through your CFML engine ---&gt; &lt;!--- Model code In your model (ie. User.cfc), create a custom method for your custom query ---&gt; &lt;cffunction name=&quot;myCustomQuery&quot;&gt; &lt;cfargument name=&quot;page&quot; type=&quot;numeric&quot;&gt; &lt;cfargument name=&quot;perPage&quot; type=&quot;numeric&quot; required=&quot;false&quot; default=&quot;25&quot;&gt; &lt;cfquery name=&quot;local.customQuery&quot; datasource=&quot;##get(''dataSourceName'')##&quot;&gt; SELECT * FROM users &lt;/cfquery&gt; &lt;cfset setPagination( totalRecords=local.customQuery.RecordCount, currentPage=arguments.page, perPage=arguments.perPage, handle=&quot;myCustomQueryHandle&quot; )&gt; &lt;cfreturn customQuery&gt; &lt;/cffunction&gt; &lt;!--- Controller code ---&gt; &lt;cffunction name=&quot;list&quot;&gt; &lt;cfparam name=&quot;params.page&quot; default=&quot;1&quot;&gt; &lt;cfparam name=&quot;params.perPage&quot; default=&quot;25&quot;&gt; &lt;cfset allUsers = model(&quot;user&quot;).myCustomQuery( page=params.page, perPage=params.perPage )&gt; &lt;!--- Because we're going to let `cfoutput`/`cfloop` handle the pagination, we're going to need to get some addition information about the pagination. ---&gt; &lt;cfset paginationData = pagination(&quot;myCustomQueryHandle&quot;)&gt; &lt;/cffunction&gt; &lt;!--- View code (using `cfloop`) Use the information from `paginationData` to page through the records ---&gt; &lt;cfoutput&gt; &lt;ul&gt; &lt;cfloop query=&quot;allUsers&quot; startrow=&quot;#paginationData.startrow#&quot; endrow=&quot;#paginationData.endrow#&quot; &gt; &lt;li&gt; #allUsers.firstName# #allUsers.lastName# &lt;/li&gt; &lt;/cfloop&gt; &lt;/ul&gt; #paginationLinks(handle=&quot;myCustomQueryHandle&quot;)# &lt;/cfoutput&gt; &lt;!--- View code (using `cfoutput`) Use the information from `paginationData` to page through the records ---&gt; &lt;ul&gt; &lt;cfoutput query=&quot;allUsers&quot; startrow=&quot;#paginationData.startrow#&quot; maxrows=&quot;#paginationData.maxrows#&quot; &gt; &lt;li&gt; #allUsers.firstName# #allUsers.lastName# &lt;/li&gt; &lt;/cfoutput&gt; &lt;/ul&gt; &lt;cfoutput&gt; #paginationLinks(handle=&quot;myCustomQueryHandle&quot;)# &lt;/cfoutput&gt; &lt;!--- Second method: Handle the pagination through the database ---&gt; &lt;!--- Model code In your model (ie. `User.cfc`), create a custom method for your custom query ---&gt; &lt;cffunction name=&quot;myCustomQuery&quot;&gt; &lt;cfargument name=&quot;page&quot; type=&quot;numeric&quot;&gt; &lt;cfargument name=&quot;perPage&quot; type=&quot;numeric&quot; required=&quot;false&quot; default=&quot;25&quot;&gt; &lt;cfquery name=&quot;local.customQueryCount&quot; datasource=&quot;#get('dataSouceName')#&quot; &gt; SELECT COUNT(*) AS theCount FROM users &lt;/cfquery&gt; &lt;cfquery name=&quot;local.customQuery&quot; datasource=&quot;#get('dataSourceName')#&quot; &gt; SELECT * FROM users LIMIT #arguments.page# OFFSET #arguments.perPage# &lt;/cfquery&gt; &lt;!--- Notice the we use the value from the first query for `totalRecords` ---&gt; &lt;cfset setPagination( totalRecords=local.customQueryCount.theCount, currentPage=arguments.page, perPage=arguments.perPage, handle=&quot;myCustomQueryHandle&quot; )&gt; &lt;!--- We return the second query ---&gt; &lt;cfreturn customQuery&gt; &lt;/cffunction&gt; &lt;!--- Controller code ---&gt; &lt;cffunction name=&quot;list&quot;&gt; &lt;cfparam name=&quot;params.page&quot; default=&quot;1&quot;&gt; &lt;cfparam name=&quot;params.perPage&quot; default=&quot;25&quot;&gt; &lt;cfset allUsers = model(&quot;user&quot;).myCustomQuery( page=params.page, perPage=params.perPage )&gt; &lt;/cffunction&gt; &lt;!--- View code (using `cfloop`) ---&gt; &lt;cfoutput&gt; &lt;ul&gt; &lt;cfloop query=&quot;allUsers&quot;&gt; &lt;li&gt; #allUsers.firstName# #allUsers.lastName# &lt;/li&gt; &lt;/cfloop&gt; &lt;/ul&gt; #paginationLinks(handle=&quot;myCustomQueryHandle&quot;)# &lt;/cfoutput&gt; &lt;!--- View code (using `cfoutput`) ---&gt; &lt;ul&gt; &lt;cfoutput query=&quot;allUsers&quot;&gt; &lt;li&gt; #allUsers.firstName# #allUsers.lastName# &lt;/li&gt; &lt;/cfoutput&gt; &lt;/ul&gt; &lt;cfoutput&gt; #paginationLinks(handle=&quot;myCustomQueryHandle&quot;)# &lt;/cfoutput&gt;</pre>"},"hint":"Allows you to set a pagination handle for a custom query so you can perform pagination on it in your view with paginationLinks.","returntype":"","slug":"setpagination","parameters":[{"default":"","required":"true","hint":"Total count of records that should be represented by the paginated links.","name":"totalRecords","type":"numeric"},{"default":"1","required":"false","hint":"Page number that should be represented by the data being fetched and the paginated links.","name":"currentPage","type":"numeric"},{"default":"25","required":"false","hint":"Number of records that should be represented on each page of data.","name":"perPage","type":"numeric"},{"default":"query","required":"false","hint":"Name of handle to reference in paginationLinks.","name":"handle","type":"string"}],"name":"setPagination","availableIn":{},"tags":{"categoryClass":"","sectionClass":"","category":"","section":""}},{"extended":{"hasExtended":true,"docs":"<pre>setPrimaryKey(property) &lt;!--- In `models/User.cfc`, define the primary key as a column called `userID` ---&gt;\n&lt;cffunction name=&quot;init&quot;&gt;\n    &lt;cfset setPrimaryKey(&quot;userID&quot;)&gt;\n&lt;/cffunction&gt;</pre>"},"hint":"Allows you to pass in the name(s) of the property(s) that should be used as the primary key(s). Pass as a list if defining a composite primary key. Also aliased as setPrimaryKeys().","returntype":"","slug":"setprimarykey","parameters":[{"default":"","required":"Yes","hint":"Property (or list of properties) to set as the primary key.","name":"property","type":"string"}],"name":"setPrimaryKey","availableIn":{},"tags":{"categoryClass":"","sectionClass":"","category":"","section":""}},{"extended":{"hasExtended":true,"docs":"<pre>setPrimaryKeys(property) &lt;!--- In `models/Subscription.cfc`, define the primary key as composite of the columns `customerId` and `publicationId` ---&gt;\n&lt;cffunction name=&quot;init&quot;&gt;\n    &lt;cfset setPrimaryKeys(&quot;customerId,publicationId&quot;)&gt;\n&lt;/cffunction&gt;</pre>"},"hint":"Alias for setPrimaryKey(). Use this for better readability when you're setting multiple properties as the primary key.","returntype":"","slug":"setprimarykeys","parameters":[{"default":"","required":"Yes","hint":"Property (or list of properties) to set as the primary key.","name":"property","type":"string"}],"name":"setPrimaryKeys","availableIn":{},"tags":{"categoryClass":"","sectionClass":"","category":"","section":""}},{"extended":{"hasExtended":true,"docs":"<pre>setProperties([ properties ]) &lt;!--- Update the properties of the object with the params struct containing the values of a form post ---&gt;\n&lt;cfset user = model(&quot;user&quot;).findByKey(1)&gt;\n&lt;cfset user.setProperties(params.user)&gt;</pre>"},"hint":"Allows you to set all the properties of an object at once by passing in a structure with keys matching the property names.","returntype":"","slug":"setproperties","parameters":[{"default":"[runtime expression]","required":"No","hint":"The properties you want to set on the object (can also be passed in as named arguments).","name":"properties","type":"struct"}],"name":"setProperties","availableIn":{},"tags":{"categoryClass":"","sectionClass":"","category":"","section":""}},{"extended":{"hasExtended":true,"docs":"<pre>setResponse(newReponse);</pre>"},"hint":"Sets content that CFWheels will send to the client in response to the request.","returntype":"","slug":"setresponse","parameters":[{"default":"","required":"true","hint":"The content to set as the response.","name":"content","type":"string"}],"name":"setResponse","availableIn":{},"tags":{"categoryClass":"","sectionClass":"","category":"","section":""}},{"extended":{"hasExtended":true,"docs":"<pre>setTableNamePrefix(prefix) &lt;!--- In `models/User.cfc`, add a prefix to the default table name of `tbl` ---&gt;\n&lt;cffunction name=&quot;init&quot;&gt;\n    &lt;cfset setTableNamePrefix(&quot;tbl&quot;)&gt;\n&lt;/cffunction&gt;</pre>"},"hint":"Sets a prefix to prepend to the table name when this model runs SQL queries.","returntype":"","slug":"settablenameprefix","parameters":[{"default":"","required":"Yes","hint":"A prefix to prepend to the table name.","name":"prefix","type":"string"}],"name":"setTableNamePrefix","availableIn":{},"tags":{"categoryClass":"","sectionClass":"","category":"","section":""}},{"extended":{"hasExtended":true,"docs":"<pre>// Set verification chain directly in an array\nsetVerificationChain([\n\t{only=&quot;handleForm&quot;, post=true},\n\t{only=&quot;edit&quot;, get=true, params=&quot;userId&quot;, paramsTypes=&quot;integer&quot;},\n\t{only=&quot;edit&quot;, get=true, params=&quot;userId&quot;, paramsTypes=&quot;integer&quot;, handler=&quot;index&quot;, error=&quot;Invalid userId&quot;}\n]);</pre>"},"hint":"Use this function if you need a more low level way of setting the entire verification chain for a controller.","returntype":"","slug":"setverificationchain","parameters":[{"default":"","required":"true","hint":"An array of structs, each of which represent an argumentCollection that get passed to the verifies function. This should represent the entire verification chain that you want to use for this controller.","name":"chain","type":"array"}],"name":"setVerificationChain","availableIn":{},"tags":{"categoryClass":"","sectionClass":"","category":"","section":""}},{"extended":{"hasExtended":true,"docs":"<pre>&lt;!--- How most of your calls will look ---&gt;\n#simpleFormat(post.bodyText)#\n\n&lt;!--- Demonstrates what output looks like with specific data ---&gt;\n&lt;cfsavecontent variable=&quot;comment&quot;&gt;\n\tI love this post!\n\n\tHere''s why:\n\t* Short\n\t* Succinct\n\t* Awesome\n&lt;/cfsavecontent&gt;\n#simpleFormat(comment)#\n-&gt; &lt;p&gt;I love this post!&lt;/p&gt;\n   &lt;p&gt;\n       Here''s why:&lt;br /&gt;\n\t   * Short&lt;br /&gt;\n\t   * Succinct&lt;br /&gt;\n\t   * Awesome\n   &lt;/p&gt;</pre>"},"hint":"Replaces single newline characters with HTML break tags and double newline characters with HTML paragraph tags (properly closed to comply with XHTML standards).","returntype":"","slug":"simpleformat","parameters":[{"default":"","required":"true","hint":"The text to format.","name":"text","type":"string"},{"default":"true","required":"false","hint":"Set to true to wrap the result in a paragraph.","name":"wrap","type":"boolean"}],"name":"simpleFormat","availableIn":{},"tags":{"categoryClass":"","sectionClass":"","category":"","section":""}},{"extended":{"hasExtended":true,"docs":"<pre>singularize(word) &lt;!--- Singularize a word, will result in &quot;language&quot; ---&gt;\n#singularize(&quot;languages&quot;)#</pre>"},"hint":"Returns the singular form of the passed in word.","returntype":"","slug":"singularize","parameters":[{"default":"","required":"Yes","hint":"String to singularize.","name":"word","type":"string"}],"name":"singularize","availableIn":{},"tags":{"categoryClass":"","sectionClass":"","category":"","section":""}},{"extended":{"hasExtended":true,"docs":"<pre>&lt;!--- view code ---&gt;\n&lt;cfoutput&gt;\n    #startFormTag(action=&quot;create&quot;, spamProtection=true)#\n        &lt;!--- your form controls ---&gt;\n    #endFormTag()#\n&lt;/cfoutput&gt;</pre>"},"hint":"Builds and returns a string containing the opening form tag. The form's action will be built according to the same rules as URLFor. Note: Pass any additional arguments like class, rel, and id, and the generated tag will also include those values as HTML attributes.","returntype":"","slug":"startformtag","parameters":[{"default":"post","required":"false","hint":"The type of method to use in the form tag. get and post are the options.","name":"method","type":"string"},{"default":"false","required":"false","hint":"Set to true if the form should be able to upload files.","name":"multipart","type":"boolean"},{"default":"false","required":"false","hint":"Set to true to protect the form against spammers (done with JavaScript).","name":"spamProtection","type":"boolean"},{"default":"","required":"false","hint":"Name of a route that you have configured in config/routes.cfm.","name":"route","type":"string"},{"default":"","required":"false","hint":"Name of the controller to include in the URL.","name":"controller","type":"string"},{"default":"","required":"false","hint":"Name of the action to include in the URL.","name":"action","type":"string"},{"default":"","required":"false","hint":"Key(s) to include in the URL.","name":"key","type":"any"},{"default":"","required":"false","hint":"Any additional parameters to be set in the query string (example: wheels=cool&x=y). Please note that CFWheels uses the & and = characters to split the parameters and encode them properly for you (using URLEncodedFormat() internally). However, if you need to pass in & or = as part of the value, then you need to encode them (and only them), example: a=cats%26dogs%3Dtrouble!&b=1.","name":"params","type":"string"},{"default":"","required":"false","hint":"Sets an anchor name to be appended to the path.","name":"anchor","type":"string"},{"default":"true","required":"false","hint":"If true, returns only the relative URL (no protocol, host name or port).","name":"onlyPath","type":"boolean"},{"default":"","required":"false","hint":"Set this to override the current host.","name":"host","type":"string"},{"default":"","required":"false","hint":"Set this to override the current protocol.","name":"protocol","type":"string"},{"default":"0","required":"false","hint":"Set this to override the current port number.","name":"port","type":"numeric"},{"default":"","required":"false","hint":"String to prepend to the form control. Useful to wrap the form control with HTML tags.","name":"prepend","type":"string"},{"default":"","required":"false","hint":"String to append to the form control. Useful to wrap the form control with HTML tags.","name":"append","type":"string"}],"name":"startFormTag","availableIn":{},"tags":{"categoryClass":"","sectionClass":"","category":"","section":""}},{"extended":{"hasExtended":true,"docs":"<pre>&lt;!--- Outputs &quot;&lt;strong&gt;Wheels&lt;/strong&gt; is a framework for ColdFusion.&quot; ---&gt;\n\n #stripLinks(&quot;&lt;strong&gt;Wheels&lt;/strong&gt; is a framework for &lt;a href=&quot;&quot;http://www.adobe.com/products/coldfusion&quot;&quot;&gt;ColdFusion&lt;/a&gt;.&quot;)#</pre>"},"hint":"Removes all links from an HTML string, leaving just the link text.","returntype":"","slug":"striplinks","parameters":[{"default":"","required":"true","hint":"The HTML to remove links from.","name":"html","type":"string"}],"name":"stripLinks","availableIn":{},"tags":{"categoryClass":"","sectionClass":"","category":"","section":""}},{"extended":{"hasExtended":true,"docs":"<pre>&lt;!--- Outputs &quot;CFWheels is a framework for ColdFusion.&quot; ---&gt;\n\n#stripTags(&quot;&lt;strong&gt;Wheels&lt;/strong&gt; is a framework for &lt;a href=&quot;&quot;http://www.adobe.com/products/coldfusion&quot;&quot;&gt;ColdFusion&lt;/a&gt;.&quot;)#</pre>"},"hint":"Removes all HTML tags from a string.","returntype":"","slug":"striptags","parameters":[{"default":"","required":"true","hint":"The HTML to remove tag markup from.","name":"html","type":"string"}],"name":"stripTags","availableIn":{},"tags":{"categoryClass":"","sectionClass":"","category":"","section":""}},{"extended":{"hasExtended":true,"docs":"<pre>styleSheetLinkTag([ sources, type, media, head, delim ]) &lt;!--- view code ---&gt;\n&lt;head&gt;\n    &lt;!--- Includes `stylesheets/styles.css` ---&gt;\n    #styleSheetLinkTag(&quot;styles&quot;)#\n    &lt;!--- Includes `stylesheets/blog.css` and `stylesheets/comments.css` ---&gt;\n    #styleSheetLinkTag(&quot;blog,comments&quot;)#\n    &lt;!--- Includes printer style sheet ---&gt;\n    #styleSheetLinkTag(source=&quot;print&quot;, media=&quot;print&quot;)#\n    &lt;!--- Includes external style sheet ---&gt;\n    #styleSheetLinkTag(&quot;http://ajax.googleapis.com/ajax/libs/jqueryui/1.7.0/themes/cupertino/jquery-ui.css&quot;)#\n&lt;/head&gt;\n\n&lt;body&gt;\n    &lt;!--- This will still appear in the `head` ---&gt;\n    #styleSheetLinkTag(source=&quot;tabs&quot;, head=true)#\n&lt;/body&gt;</pre>"},"hint":"Returns a link tag for a stylesheet (or several) based on the supplied arguments.","returntype":"","slug":"stylesheetlinktag","parameters":[{"default":"","required":"No","hint":"The name of one or many CSS files in the stylesheets folder, minus the .css extension. (Can also be called with the source argument.) Pass a full URL to generate a tag for an external style sheet.","name":"sources","type":"string"},{"default":"text/css","required":"No","hint":"The type attribute for the link tag.","name":"type","type":"string"},{"default":"all","required":"No","hint":"The media attribute for the link tag.","name":"media","type":"string"},{"default":"false","required":"No","hint":"Set to true to place the output in the head area of the HTML page instead of the default behavior, which is to place the output where the function is called from.","name":"head","type":"string"},{"default":",","required":"No","hint":"the delimiter to use for the list of stylesheets","name":"delim","type":"string"}],"name":"styleSheetLinkTag","availableIn":{},"tags":{"categoryClass":"","sectionClass":"","category":"","section":""}},{"extended":{"hasExtended":true,"docs":"<pre>&lt;cfoutput&gt;\n    #startFormTag(action=&quot;something&quot;)#\n        &lt;!--- form controls go here ---&gt;\n        #submitTag()#\n    #endFormTag()#\n&lt;/cfoutput&gt;</pre>"},"hint":"Builds and returns a string containing a submit button form control. Note: Pass any additional arguments like class, rel, and id, and the generated tag will also include those values as HTML attributes.","returntype":"","slug":"submittag","parameters":[{"default":"Save changes","required":"false","hint":"Message to display in the button form control.","name":"value","type":"string"},{"default":"","required":"false","hint":"File name of the image file to use in the button form control.","name":"image","type":"string"},{"default":"","required":"false","hint":"Whether or not to disable the button upon clicking. (prevents double-clicking.)","name":"disable","type":"any"},{"default":"","required":"false","hint":"See documentation for textField","name":"prepend","type":"string"},{"default":"","required":"false","hint":"See documentation for textField","name":"append","type":"string"}],"name":"submitTag","availableIn":{},"tags":{"categoryClass":"","sectionClass":"","category":"","section":""}},{"extended":{"hasExtended":true,"docs":"<pre>// Get the sum of all salaries\nallSalaries = model(&quot;employee&quot;).sum(&quot;salary&quot;);\n\n// Get the sum of all salaries for employees in a given country\nallAustralianSalaries = model(&quot;employee&quot;).sum(property=&quot;salary&quot;, include=&quot;country&quot;, where=&quot;countryname=''Australia''&quot;);\n\n// Make sure a numeric value is always returned, even if there are no records analyzed by the query\nsalarySum = model(&quot;employee&quot;).sum(property=&quot;salary&quot;, where=&quot;salary BETWEEN ##params.min## AND ##params.max##&quot;, ifNull=0);</pre>"},"hint":"Calculates the sum of values for a given property. Uses the SQL function SUM. If no records can be found to perform the calculation on you can use the ifNull argument to decide what should be returned.","returntype":"","slug":"sum","parameters":[{"default":"","required":"true","hint":"Name of the property to get the sum for (must be a property of a numeric data type).","name":"property","type":"string"},{"default":"","required":"false","hint":"This argument maps to the WHERE clause of the query. The following operators are supported: =, !=, <>, <, <=, >, >=, LIKE, NOT LIKE, IN, NOT IN, IS NULL, IS NOT NULL, AND, and OR (note that the key words need to be written in upper case). You can also use parentheses to group statements. You do not need to specify the table name(s); CFWheels will do that for you. Instead of using the where argument, you can create cleaner code by making use of a concept called Dynamic Finders.","name":"where","type":"string"},{"default":"","required":"false","hint":"Associations that should be included in the query using INNER or LEFT OUTER joins (which join type that is used depends on how the association has been set up in your model). If all included associations are set on the current model, you can specify them in a list (e.g. department,addresses,emails). You can build more complex include strings by using parentheses when the association is set on an included model, like album(artist(genre)), for example. These complex include strings only work when returnAs is set to query though.","name":"include","type":"string"},{"default":"false","required":"false","hint":"When true, SUM returns the sum of unique values only.","name":"distinct","type":"boolean"},{"default":"true","required":"false","hint":"Set to true to use cfqueryparam on all columns, or pass in a list of property names to use cfqueryparam on those only.","name":"parameterize","type":"any"},{"default":"","required":"false","hint":"The value returned if no records are found. Common usage is to set this to 0 to make sure a numeric value is always returned instead of a blank string.","name":"ifNull","type":"any"},{"default":"false","required":"false","hint":"You can set this argument to true to include soft-deleted records in the results.","name":"includeSoftDeletes","type":"boolean"},{"default":"","required":"false","hint":"Maps to the GROUP BY clause of the query. You do not need to specify the table name(s); CFWheels will do that for you.","name":"group","type":"string"}],"name":"sum","availableIn":{},"tags":{"categoryClass":"","sectionClass":"","category":"","section":""}},{"extended":{"hasExtended":true,"docs":"<pre>table(name) &lt;!--- In models/User.cfc ---&gt;\n&lt;cffunction name=&quot;init&quot;&gt;\n    &lt;!--- Tell Wheels to use the `tbl_USERS` table in the database for the `user` model instead of the default (which would be `users`) ---&gt;\n    &lt;cfset table(&quot;tbl_USERS&quot;)&gt;\n&lt;/cffunction&gt;</pre>"},"hint":"Use this method to tell Wheels what database table to connect to for this model. You only need to use this method when your table naming does not follow the standard Wheels convention of a singular object name mapping to a plural table name. To not use a table for your model at all, call table(false).","returntype":"","slug":"table","parameters":[{"default":"","required":"Yes","hint":"Name of the table to map this model to.","name":"name","type":"any"}],"name":"table","availableIn":{},"tags":{"categoryClass":"","sectionClass":"","category":"","section":""}},{"extended":{"hasExtended":true,"docs":"<pre>tableName() &lt;!--- Check what table the user model uses ---&gt;\n&lt;cfset whatAmIMappedTo = model(&quot;user&quot;).tableName()&gt;</pre>"},"hint":"Returns the name of the database table that this model is mapped to.","returntype":"","slug":"tablename","parameters":[],"name":"tableName","availableIn":{},"tags":{"categoryClass":"","sectionClass":"","category":"","section":""}},{"extended":{"hasExtended":true,"docs":"<pre>&lt;!--- Provide `label` and required `objectName` and `property` ---&gt;\n&lt;cfoutput&gt;\n    #textArea(label=&quot;Overview&quot;, objectName=&quot;article&quot;, property=&quot;overview&quot;)#\n&lt;/cfoutput&gt;\n\n&lt;!--- Display fields for photos provided by the `screenshots` association and nested properties ---&gt;\n&lt;fieldset&gt;\n\t&lt;legend&gt;Screenshots&lt;/legend&gt;\n\t&lt;cfloop from=&quot;1&quot; to=&quot;#ArrayLen(site.screenshots)#&quot; index=&quot;i&quot;&gt;\n\t\t#fileField(label=&quot;File #i#&quot;, objectName=&quot;site&quot;, association=&quot;screenshots&quot;, position=i, property=&quot;file&quot;)#\n\t\t#textArea(label=&quot;Caption ####i##&quot;, objectName=&quot;site&quot;, association=&quot;screenshots&quot;, position=i, property=&quot;caption&quot;)#\n\t&lt;/cfloop&gt;\n&lt;/fieldset&gt;</pre>"},"hint":"Builds and returns a string containing a text area field form control based on the supplied objectName and property. Note: Pass any additional arguments like class, rel, and id, and the generated tag will also include those values as HTML attributes.","returntype":"","slug":"textarea","parameters":[{"default":"","required":"true","hint":"See documentation for textField.","name":"objectName","type":"any"},{"default":"","required":"true","hint":"See documentation for textField.","name":"property","type":"string"},{"default":"","required":"false","hint":"See documentation for textfield.","name":"association","type":"string"},{"default":"","required":"false","hint":"See documentation for textfield.","name":"position","type":"string"},{"default":"useDefaultLabel","required":"false","hint":"See documentation for textField.","name":"label","type":"string"},{"default":"around","required":"false","hint":"See documentation for textField.","name":"labelPlacement","type":"string"},{"default":"","required":"false","hint":"See documentation for textField.","name":"prepend","type":"string"},{"default":"","required":"false","hint":"See documentation for textField.","name":"append","type":"string"},{"default":"","required":"false","hint":"See documentation for textField.","name":"prependToLabel","type":"string"},{"default":"","required":"false","hint":"See documentation for textField.","name":"appendToLabel","type":"string"},{"default":"span","required":"false","hint":"See documentation for textField.","name":"errorElement","type":"string"},{"default":"fieldWithErrors","required":"false","hint":"See documentation for textField.","name":"errorClass","type":"string"}],"name":"textArea","availableIn":{},"tags":{"categoryClass":"","sectionClass":"","category":"","section":""}},{"extended":{"hasExtended":true,"docs":"<pre>&lt;!--- Basic usage usually involves a `label`, `name`, and `password` ---&gt;\n&lt;cfoutput&gt;\n    #textAreaTag(label=&quot;Description&quot;, name=&quot;description&quot;, content=params.description)#\n&lt;/cfoutput&gt;</pre>"},"hint":"Builds and returns a string containing a text area form control based on the supplied name. Note: Pass any additional arguments like class, rel, and id, and the generated tag will also include those values as HTML attributes.","returntype":"","slug":"textareatag","parameters":[{"default":"","required":"true","hint":"See documentation for textFieldTag.","name":"name","type":"string"},{"default":"","required":"false","hint":"Content to display in textarea on page load.","name":"content","type":"string"},{"default":"","required":"false","hint":"See documentation for textField.","name":"label","type":"string"},{"default":"around","required":"false","hint":"See documentation for textField.","name":"labelPlacement","type":"string"},{"default":"","required":"false","hint":"See documentation for textField.","name":"prepend","type":"string"},{"default":"","required":"false","hint":"See documentation for textField.","name":"append","type":"string"},{"default":"","required":"false","hint":"See documentation for textField.","name":"prependToLabel","type":"string"},{"default":"","required":"false","hint":"See documentation for textField.","name":"appendToLabel","type":"string"}],"name":"textAreaTag","availableIn":{},"tags":{"categoryClass":"","sectionClass":"","category":"","section":""}},{"extended":{"hasExtended":true,"docs":"<pre>&lt;!--- Provide a `label` and the required `objectName` and `property` ---&gt;\n&lt;cfoutput&gt;\n    #textField(label=&quot;First Name&quot;, objectName=&quot;user&quot;, property=&quot;firstName&quot;)#\n&lt;/cfoutput&gt;\n\n&lt;!--- Display fields for phone numbers provided by the `phoneNumbers` association and nested properties ---&gt;\n&lt;fieldset&gt;\n\t&lt;legend&gt;gt;Phone Numbers&lt;/legend&gt;\n\t&lt;cfloop from=&quot;1&quot; to=&quot;##ArrayLen(contact.phoneNumbers)##&quot; index=&quot;i&quot;&gt;\n\t\t#textField(label=&quot;Phone ####i##&quot;, objectName=&quot;contact&quot;, association=&quot;phoneNumbers&quot;, position=i, property=&quot;phoneNumber&quot;)#\n\t&lt;/cfloop&gt;\n&lt;/fieldset&gt;</pre>"},"hint":"Builds and returns a string containing a text field form control based on the supplied objectName and property. Note: Pass any additional arguments like class, rel, and id, and the generated tag will also include those values as HTML attributes.","returntype":"","slug":"textfield","parameters":[{"default":"","required":"true","hint":"The variable name of the object to build the form control for.","name":"objectName","type":"any"},{"default":"","required":"true","hint":"The name of the property to use in the form control.","name":"property","type":"string"},{"default":"","required":"false","hint":"The name of the association that the property is located on. Used for building nested forms that work with nested properties. If you are building a form with deep nesting, simply pass in a list to the nested object, and CFWheels will figure it out.","name":"association","type":"string"},{"default":"","required":"false","hint":"The position used when referencing a hasMany relationship in the association argument. Used for building nested forms that work with nested properties. If you are building a form with deep nestings, simply pass in a list of positions, and CFWheels will figure it out.","name":"position","type":"string"},{"default":"useDefaultLabel","required":"false","hint":"The label text to use in the form control.","name":"label","type":"string"},{"default":"around","required":"false","hint":"Whether to place the label before, after, or wrapped around the form control. Label text placement can be controlled using aroundLeft or aroundRight.","name":"labelPlacement","type":"string"},{"default":"","required":"false","hint":"String to prepend to the form control. Useful to wrap the form control with HTML tags.","name":"prepend","type":"string"},{"default":"","required":"false","hint":"String to append to the form control. Useful to wrap the form control with HTML tags.","name":"append","type":"string"},{"default":"","required":"false","hint":"String to prepend to the form control's label. Useful to wrap the form control with HTML tags.","name":"prependToLabel","type":"string"},{"default":"","required":"false","hint":"String to append to the form control's label. Useful to wrap the form control with HTML tags.","name":"appendToLabel","type":"string"},{"default":"span","required":"false","hint":"HTML tag to wrap the form control with when the object contains errors.","name":"errorElement","type":"string"},{"default":"fieldWithErrors","required":"false","hint":"The class name of the HTML tag that wraps the form control when there are errors.","name":"errorClass","type":"string"},{"default":"text","required":"false","hint":"Input type attribute. Common examples in HTML5 and later are text (default), email, tel, and url.","name":"type","type":"string"},{"default":"","required":"false","hint":"String added to the label's class.","name":"labelClass","type":"string"}],"name":"textField","availableIn":{},"tags":{"categoryClass":"","sectionClass":"","category":"","section":""}},{"extended":{"hasExtended":true,"docs":"<pre>&lt;!--- Basic usage usually involves a `label`, `name`, and `value` ---&gt;\n&lt;cfoutput&gt;\n    #textFieldTag(label=&quot;Search&quot;, name=&quot;q&quot;, value=params.q)#\n&lt;/cfoutput&gt;</pre>"},"hint":"Builds and returns a string containing a text field form control based on the supplied name. Note: Pass any additional arguments like class, rel, and id, and the generated tag will also include those values as HTML attributes.","returntype":"","slug":"textfieldtag","parameters":[{"default":"","required":"true","hint":"Name to populate in tag's name attribute.","name":"name","type":"string"},{"default":"","required":"false","hint":"Value to populate in tag's value attribute.","name":"value","type":"string"},{"default":"","required":"false","hint":"See documentation for textField.","name":"label","type":"string"},{"default":"around","required":"false","hint":"See documentation for textField.","name":"labelPlacement","type":"string"},{"default":"","required":"false","hint":"See documentation for textField.","name":"prepend","type":"string"},{"default":"","required":"false","hint":"See documentation for textField.","name":"append","type":"string"},{"default":"","required":"false","hint":"See documentation for textField.","name":"prependToLabel","type":"string"},{"default":"","required":"false","hint":"See documentation for textField.","name":"appendToLabel","type":"string"},{"default":"text","required":"false","hint":"See documentation for textField.","name":"type","type":"string"}],"name":"textFieldTag","availableIn":{},"tags":{"categoryClass":"","sectionClass":"","category":"","section":""}},{"extended":{"hasExtended":true,"docs":"<pre>timeAgoInWords(fromTime [, includeSeconds, toTime ]) &lt;cfset aWhileAgo = Now() - 30&gt;\n&lt;cfoutput&gt;#timeAgoInWords(aWhileAgo)#&lt;/cfoutput&gt;</pre>"},"hint":"Pass in a date to this method, and it will return a string describing the approximate time difference between that date and the current date.","returntype":"","slug":"timeagoinwords","parameters":[{"default":"","required":"Yes","hint":"Date to compare from..","name":"fromTime","type":"date"},{"default":"false","required":"No","hint":"Whether or not to include the number of seconds in the returned string.","name":"includeSeconds","type":"boolean"},{"default":"[runtime expression]","required":"No","hint":"Date to compare to.","name":"toTime","type":"date"}],"name":"timeAgoInWords","availableIn":{},"tags":{"categoryClass":"","sectionClass":"","category":"","section":""}},{"extended":{"hasExtended":true,"docs":"<pre>&lt;!--- View code ---&gt;\n&lt;cfoutput&gt;\n    #timeSelect(objectName=&quot;business&quot;, property=&quot;openUntil&quot;)#\n&lt;/cfoutput&gt;\n\n&lt;!--- Show fields for hour and minute ---&gt;\n&lt;cfoutput&gt;\n\t#timeSelect(objectName=&quot;business&quot;, property=&quot;openUntil&quot;, order=&quot;hour,minute&quot;)#\n&lt;/cfoutput&gt;\n\n&lt;!--- Only show 15-minute intervals ---&gt;\n&lt;cfoutput&gt;\n\t#timeSelect(objectName=&quot;appointment&quot;, property=&quot;dateTimeStart&quot;, minuteStep=15)#\n&lt;/cfoutput&gt;</pre>"},"hint":"Builds and returns a string containing three select form controls for hour, minute, and second based on the supplied objectName and property.","returntype":"","slug":"timeselect","parameters":[{"default":"","required":"false","hint":"See documentation for textField.","name":"objectName","type":"any"},{"default":"","required":"false","hint":"See documentation for textField.","name":"property","type":"string"},{"default":"","required":"false","hint":"See documentation for textfield.","name":"association","type":"string"},{"default":"","required":"false","hint":"See documentation for textfield.","name":"position","type":"string"},{"default":"hour,minute,second","required":"false","hint":"Use to change the order of or exclude time select tags.","name":"order","type":"string"},{"default":":","required":"false","hint":"Use to change the character that is displayed between the time select tags.","name":"separator","type":"string"},{"default":"1","required":"false","hint":"Pass in 10 to only show minute 10, 20, 30, etc.","name":"minuteStep","type":"numeric"},{"default":"1","required":"false","hint":"Pass in 10 to only show seconds 10, 20, 30, etc.","name":"secondStep","type":"numeric"},{"default":"false","required":"false","hint":"See documentation for select.","name":"includeBlank","type":"any"},{"default":"false","required":"false","hint":"See documentation for dateSelect.","name":"label","type":"string"},{"default":"around","required":"false","hint":"See documentation for textField.","name":"labelPlacement","type":"string"},{"default":"","required":"false","hint":"See documentation for textField.","name":"prepend","type":"string"},{"default":"","required":"false","hint":"See documentation for textField.","name":"append","type":"string"},{"default":"","required":"false","hint":"See documentation for textField.","name":"prependToLabel","type":"string"},{"default":"","required":"false","hint":"See documentation for textField.","name":"appendToLabel","type":"string"},{"default":"span","required":"false","hint":"See documentation for textField.","name":"errorElement","type":"string"},{"default":"fieldWithErrors","required":"false","hint":"See documentation for textField.","name":"errorClass","type":"string"},{"default":"","required":"false","hint":"See documentation for dateSelect.","name":"combine","type":"boolean"},{"default":"false","required":"false","hint":"whether to display the hours in 24 or 12 hour format. 12 hour format has AM/PM drop downs","name":"twelveHour","type":"boolean"}],"name":"timeSelect","availableIn":{},"tags":{"categoryClass":"","sectionClass":"","category":"","section":""}},{"extended":{"hasExtended":true,"docs":"<pre>&lt;!--- This &quot;Tag&quot; version of function accepts `name` and `selected` instead of binding to a model object ---&gt;\n&lt;cfoutput&gt;\n    ##timeSelectTags(name=&quot;timeOfMeeting&quot; selected=params.timeOfMeeting)##\n&lt;/cfoutput&gt;\n\n&lt;!--- Show fields for `hour` and `minute` only ---&gt;\n&lt;cfoutput&gt;\n\t##timeSelectTags(name=&quot;timeOfMeeting&quot;, selected=params.timeOfMeeting, order=&quot;hour,minute&quot;)##\n&lt;/cfoutput&gt;</pre>"},"hint":"Builds and returns a string containing three select form controls for hour, minute, and second based on name.","returntype":"","slug":"timeselecttags","parameters":[{"default":"","required":"true","hint":"See documentation for textFieldTag.","name":"name","type":"string"},{"default":"","required":"false","hint":"See documentation for selectTag.","name":"selected","type":"string"},{"default":"hour,minute,second","required":"false","hint":"See documentation for timeSelect.","name":"order","type":"string"},{"default":":","required":"false","hint":"See documentation for timeSelect.","name":"separator","type":"string"},{"default":"1","required":"false","hint":"See documentation for timeSelect.","name":"minuteStep","type":"numeric"},{"default":"1","required":"false","hint":"See documentation for timeSelect.","name":"secondStep","type":"numeric"},{"default":"false","required":"false","hint":"See documentation for select.","name":"includeBlank","type":"any"},{"default":"","required":"false","hint":"See documentation for dateSelect.","name":"label","type":"string"},{"default":"around","required":"false","hint":"See documentation for textField.","name":"labelPlacement","type":"string"},{"default":"","required":"false","hint":"See documentation for textField.","name":"prepend","type":"string"},{"default":"","required":"false","hint":"See documentation for textField.","name":"append","type":"string"},{"default":"","required":"false","hint":"See documentation for textField.","name":"prependToLabel","type":"string"},{"default":"","required":"false","hint":"See documentation for textField.","name":"appendToLabel","type":"string"},{"default":"","required":"false","hint":"See documentation for dateSelect.","name":"combine","type":"boolean"},{"default":"false","required":"false","hint":"See documentation for timeSelect.","name":"twelveHour","type":"boolean"}],"name":"timeSelectTags","availableIn":{},"tags":{"categoryClass":"","sectionClass":"","category":"","section":""}},{"extended":{"hasExtended":true,"docs":"<pre>timeUntilInWords(toTime [, includeSeconds, fromTime ]) &lt;cfset aLittleAhead = Now() + 30&gt;\n&lt;cfoutput&gt;#timeUntilInWords(aLittleAhead)#&lt;/cfoutput&gt;</pre>"},"hint":"Pass in a date to this method, and it will return a string describing the approximate time difference between the current date and that date.","returntype":"","slug":"timeuntilinwords","parameters":[{"default":"","required":"Yes","hint":"Date to compare to.","name":"toTime","type":"date"},{"default":"false","required":"No","hint":"Whether or not to include the number of seconds in the returned string.","name":"includeSeconds","type":"boolean"},{"default":"[runtime expression]","required":"No","hint":"Date to compare from.","name":"fromTime","type":"date"}],"name":"timeUntilInWords","availableIn":{},"tags":{"categoryClass":"","sectionClass":"","category":"","section":""}},{"extended":{"hasExtended":true,"docs":"<pre>#titleize(&quot;Wheels is a framework for ColdFusion&quot;)#\n-&gt; CFWheels Is A Framework For ColdFusion</pre>"},"hint":"Capitalizes all words in the text to create a nicer looking title.","returntype":"","slug":"titleize","parameters":[{"default":"","required":"true","hint":"The text to turn into a title.","name":"word","type":"string"}],"name":"titleize","availableIn":{},"tags":{"categoryClass":"","sectionClass":"","category":"","section":""}},{"extended":{"hasExtended":true,"docs":"<pre>toggle([ save ]) &lt;!--- Get an object, and toggle a boolean property ---&gt;\n&lt;cfset user = model(&quot;user&quot;).findByKey(58)&gt;\n&lt;cfset isSuccess = user.toggle(&quot;isActive&quot;)&gt;&lt;!--- returns whether the object was saved properly ---&gt;\n&lt;!--- You can also use a dynamic helper for this ---&gt;\n&lt;cfset isSuccess = user.toggleIsActive()&gt;</pre>"},"hint":"Assigns to the property specified the opposite of the property's current boolean value. Throws an error if the property cannot be converted to a boolean value. Returns this object if save called internally is false.","returntype":"","slug":"toggle","parameters":[{"default":"true","required":"No","hint":"Argument to decide whether save the property after it has been toggled. Defaults to true.","name":"save","type":"boolean"}],"name":"toggle","availableIn":{},"tags":{"categoryClass":"","sectionClass":"","category":"","section":""}},{"extended":{"hasExtended":true,"docs":"<pre>toXHTML(text) &lt;!--- Outputs `productId=5&amp;amp;categoryId=12&amp;amp;returningCustomer=1` ---&gt;\n&lt;cfoutput&gt;\n    #toXHTML(&quot;productId=5&amp;categoryId=12&amp;returningCustomer=1&quot;)#\n&lt;/cfoutput&gt;</pre>"},"hint":"Returns an XHTML-compliant string.","returntype":"","slug":"toxhtml","parameters":[{"default":"","required":"Yes","hint":"String to make XHTML-compliant.","name":"text","type":"string"}],"name":"toXHTML","availableIn":{},"tags":{"categoryClass":"","sectionClass":"","category":"","section":""}},{"extended":{"hasExtended":true,"docs":"<pre>#truncate(text=&quot;Wheels is a framework for ColdFusion&quot;, length=20)#\n-&gt; CFWheels is a frame...\n\n#truncate(text=&quot;Wheels is a framework for ColdFusion&quot;, truncateString=&quot; (more)&quot;)#\n-&gt; CFWheels is a framework f (more)</pre>"},"hint":"Truncates text to the specified length and replaces the last characters with the specified truncate string (which defaults to \"...\").","returntype":"","slug":"truncate","parameters":[{"default":"","required":"true","hint":"The text to truncate.","name":"text","type":"string"},{"default":"30","required":"false","hint":"Length to truncate the text to.","name":"length","type":"numeric"},{"default":"...","required":"false","hint":"String to replace the last characters with.","name":"truncateString","type":"string"}],"name":"truncate","availableIn":{},"tags":{"categoryClass":"","sectionClass":"","category":"","section":""}},{"extended":{"hasExtended":true,"docs":"<pre>update([ properties, parameterize, reload, validate, transaction, callbacks ]) &lt;!--- Get a post object and then update its title in the database ---&gt;\n&lt;cfset post = model(&quot;post&quot;).findByKey(33)&gt;\n&lt;cfset post.update(title=&quot;New version of Wheels just released&quot;)&gt;\n\n&lt;!--- Get a post object and then update its title and other properties based on what is pased in from the URL/form ---&gt;\n&lt;cfset post = model(&quot;post&quot;).findByKey(params.key)&gt;\n&lt;cfset post.update(title=&quot;New version of Wheels just released&quot;, properties=params.post)&gt;\n\n&lt;!--- If you have a `hasOne` association setup from `author` to `bio`, you can do a scoped call. (The `setBio` method below will call `bio.update(authorId=anAuthor.id)` internally.) ---&gt;\n&lt;cfset author = model(&quot;author&quot;).findByKey(params.authorId)&gt;\n&lt;cfset bio = model(&quot;bio&quot;).findByKey(params.bioId)&gt;\n&lt;cfset author.setBio(bio)&gt;\n\n&lt;!--- If you have a `hasMany` association setup from `owner` to `car`, you can do a scoped call. (The `addCar` method below will call `car.update(ownerId=anOwner.id)` internally.) ---&gt;\n&lt;cfset anOwner = model(&quot;owner&quot;).findByKey(params.ownerId)&gt;\n&lt;cfset aCar = model(&quot;car&quot;).findByKey(params.carId)&gt;\n&lt;cfset anOwner.addCar(aCar)&gt;\n\n&lt;!--- If you have a `hasMany` association setup from `post` to `comment`, you can do a scoped call. (The `removeComment` method below will call `comment.update(postId=&quot;&quot;)` internally.) ---&gt;\n&lt;cfset aPost = model(&quot;post&quot;).findByKey(params.postId)&gt;\n&lt;cfset aComment = model(&quot;comment&quot;).findByKey(params.commentId)&gt;\n&lt;cfset aPost.removeComment(aComment)&gt;&lt;!--- Get an object, and toggle a boolean property ---&gt;\n&lt;cfset user = model(&quot;user&quot;).findByKey(58)&gt;\n&lt;cfset isSuccess = user.toggle(&quot;isActive&quot;)&gt;&lt;!--- returns whether the object was saved properly ---&gt;\n&lt;!--- You can also use a dynamic helper for this ---&gt;\n&lt;cfset isSuccess = user.toggleIsActive()&gt;</pre>"},"hint":"Updates the object with the supplied properties and saves it to the database. Returns true if the object was saved successfully to the database and false otherwise.","returntype":"","slug":"update","parameters":[{"default":"[runtime expression]","required":"No","hint":"The properties you want to set on the object (can also be passed in as named arguments).","name":"properties","type":"struct"},{"default":"true","required":"No","hint":"Set to true to use cfqueryparam on all columns, or pass in a list of property names to use cfqueryparam on those only.","name":"parameterize","type":"any"},{"default":"false","required":"No","hint":"Set to true to force Wheels to query the database even though an identical query may have been run in the same request. (The default in Wheels is to get the second query from the request-level cache.)","name":"reload","type":"boolean"},{"default":"true","required":"No","hint":"Set to false to skip validations for this operation.","name":"validate","type":"boolean"},{"default":"[runtime expression]","required":"No","hint":"Set this to commit to update the database when the save has completed, rollback to run all the database queries but not commit them, or none to skip transaction handling altogether.","name":"transcation","type":"string"},{"default":"true","required":"No","hint":"Set to false to disable callbacks for this operation.","name":"callbacks","type":"boolean"}],"name":"update","availableIn":{},"tags":{"categoryClass":"","sectionClass":"","category":"","section":""}},{"extended":{"hasExtended":true,"docs":"<pre>updateAll([ where, include, properties, reload, parameterize, instantiate, validate, transaction, callbacks, includeSoftDeletes ]) &lt;!--- Update the `published` and `publishedAt` properties for all records that have `published=0` ---&gt; &lt;cfset recordsUpdated = model(&quot;post&quot;).updateAll( published=1, publishedAt=Now(), where=&quot;published=0&quot; )&gt; &lt;!--- If you have a `hasMany` association setup from `post` to `comment`, you can do a scoped call. (The `removeAllComments` method below will call `model(&quot;comment&quot;).updateAll(postid=&quot;&quot;, where=&quot;postId=#post.id#&quot;)` internally.) ---&gt; &lt;cfset post = model(&quot;post&quot;).findByKey(params.postId)&gt; &lt;cfset post.removeAllComments()&gt;</pre>"},"hint":"Updates all properties for the records that match the where argument. Property names and values can be passed in either using named arguments or as a struct to the properties argument. By default, objects will not be instantiated and therefore callbacks and validations are not invoked. You can change this behavior by passing in instantiate=true. This method returns the number of records that were updated.","returntype":"","slug":"updateall","parameters":[{"default":"","required":"No","hint":"This argument maps to the WHERE clause of the query. The following operators are supported: =, !=, <>, <, <=, >, >=, LIKE, NOT LIKE, IN, NOT IN, IS NULL, IS NOT NULL, AND, and OR. (Note that the key words need to be written in upper case.) You can also use parentheses to group statements. You do not need to specify the table name(s); Wheels will do that for you.","name":"where","type":"string"},{"default":"","required":"No","hint":"Associations that should be included in the query using INNER or LEFT OUTER joins (which join type that is used depends on how the association has been set up in your model). If all included associations are set on the current model, you can specify them in a list (e.g. department,addresses,emails). You can build more complex include strings by using parentheses when the association is set on an included model, like album(artist(genre)), for example. These complex include strings only work when returnAs is set to query though.","name":"include","type":"string"},{"default":"[runtime expression]","required":"No","hint":"The properties you want to set on the object (can also be passed in as named arguments).","name":"properties","type":"struct"},{"default":"false","required":"No","hint":"Set to true to force Wheels to query the database even though an identical query may have been run in the same request. (The default in Wheels is to get the second query from the request-level cache.)","name":"reload","type":"boolean"},{"default":"true","required":"No","hint":"Set to true to use cfqueryparam on all columns, or pass in a list of property names to use cfqueryparam on those only.","name":"parameterize","type":"any"},{"default":"false","required":"No","hint":"Whether or not to instantiate the object(s) first. When objects are not instantiated, any callbacks and validations set on them will be skipped.","name":"instantiate","type":"boolean"},{"default":"","required":"No","hint":"Set to false to skip validations for this operation.","name":"validate","type":"boolean"},{"default":"[runtime expression]","required":"No","hint":"Set this to commit to update the database when the save has completed, rollback to run all the database queries but not commit them, or none to skip transaction handling altogether.","name":"transaction","type":"string"},{"default":"true","required":"No","hint":"Set to false to disable callbacks for this operation.","name":"callbacks","type":"boolean"},{"default":"false","required":"No","hint":"You can set this argument to true to include soft-deleted records in the results.","name":"includeSoftDeletes","type":"boolean"}],"name":"updateAll","availableIn":{},"tags":{"categoryClass":"","sectionClass":"","category":"","section":""}},{"extended":{"hasExtended":true,"docs":"<pre>updateByKey(key [, properties, reload, validate, transaction, callbacks, includeSoftDeletes ]) &lt;!--- Updates the object with `33` as the primary key value with values passed in through the URL/form ---&gt;\n&lt;cfset result = model(&quot;post&quot;).updateByKey(33, params.post)&gt;\n\n&lt;!--- Updates the object with `33` as the primary key using named arguments ---&gt;\n&lt;cfset result = model(&quot;post&quot;).updateByKey(key=33, title=&quot;New version of Wheels just released&quot;, published=1)&gt;</pre>"},"hint":"Finds the object with the supplied key and saves it (if validation permits it) with the supplied properties and/or named arguments. Property names and values can be passed in either using named arguments or as a struct to the properties argument. Returns true if the object was found and updated successfully, false otherwise.","returntype":"","slug":"updatebykey","parameters":[{"default":"","required":"Yes","hint":"Primary key value(s) of the record to fetch. Separate with comma if passing in multiple primary key values. Accepts a string, list, or a numeric value.","name":"key","type":"any"},{"default":"[runtime expression]","required":"No","hint":"The properties you want to set on the object (can also be passed in as named arguments).","name":"properties","type":"struct"},{"default":"false","required":"No","hint":"Set to true to force Wheels to query the database even though an identical query may have been run in the same request. (The default in Wheels is to get the second query from the request-level cache.)","name":"reload","type":"boolean"},{"default":"true","required":"No","hint":"Set to false to skip validations for this operation.","name":"validate","type":"boolean"},{"default":"[runtime expression]","required":"No","hint":"Set this to commit to update the database when the save has completed, rollback to run all the database queries but not commit them, or none to skip transaction handling altogether.","name":"transaction","type":"string"},{"default":"true","required":"No","hint":"Set to false to disable callbacks for this operation.","name":"callbacks","type":"boolean"},{"default":"false","required":"No","hint":"You can set this argument to true to include soft-deleted records in the results.","name":"includeSoftDeletes","type":"boolean"}],"name":"updateByKey","availableIn":{},"tags":{"categoryClass":"","sectionClass":"","category":"","section":""}},{"extended":{"hasExtended":true,"docs":"<pre>updateOne([ where, order, properties, reload, validate, transaction, callbacks, includeSoftDeletes ]) &lt;!--- Sets the `new` property to `1` on the most recently released product ---&gt;\n&lt;cfset result = model(&quot;product&quot;).updateOne(order=&quot;releaseDate DESC&quot;, new=1)&gt;\n\n&lt;!--- If you have a `hasOne` association setup from `user` to `profile`, you can do a scoped call. (The `removeProfile` method below will call `model(&quot;profile&quot;).updateOne(where=&quot;userId=#aUser.id#&quot;, userId=&quot;&quot;)` internally.) ---&gt;\n&lt;cfset aUser = model(&quot;user&quot;).findByKey(params.userId)&gt;\n&lt;cfset aUser.removeProfile()&gt;</pre>"},"hint":"Gets an object based on the arguments used and updates it with the supplied properties. Returns true if an object was found and updated successfully, false otherwise.","returntype":"","slug":"updateone","parameters":[{"default":"","required":"No","hint":"This argument maps to the WHERE clause of the query. The following operators are supported: =, !=, <>, <, <=, >, >=, LIKE, NOT LIKE, IN, NOT IN, IS NULL, IS NOT NULL, AND, and `OR. (Note that the key words need to be written in upper case.) You can also use parentheses to group statements. You do not need to specify the table name(s); Wheels will do that for you.","name":"where","type":"string"},{"default":"","required":"No","hint":"Maps to the ORDER BY clause of the query. You do not need to specify the table name(s); Wheels will do that for you.","name":"order","type":"string"},{"default":"[runtime expression]","required":"No","hint":"The properties you want to set on the object (can also be passed in as named arguments).","name":"properties","type":"struct"},{"default":"false","required":"No","hint":"Set to true to force Wheels to query the database even though an identical query may have been run in the same request. (The default in Wheels is to get the second query from the request-level cache.)","name":"reload","type":"boolean"},{"default":"","required":"","hint":"","name":"validate","type":""},{"default":"[runtime expression]","required":"No","hint":"Set this to commit to update the database when the save has completed, rollback to run all the database queries but not commit them, or none to skip transaction handling altogether.","name":"transaction","type":"string"},{"default":"true","required":"No","hint":"Set to false to disable callbacks for this operation.","name":"callbacks","type":"boolean"},{"default":"false","required":"No","hint":"You can set this argument to true to include soft-deleted records in the results.","name":"includeSoftDeletes","type":"boolean"}],"name":"updateOne","availableIn":{},"tags":{"categoryClass":"","sectionClass":"","category":"","section":""}},{"extended":{"hasExtended":true,"docs":"<pre>updateProperties([ properties, parameterize, validate, transaction, callbacks ]) &lt;!--- Sets the `new` property to `1` through `updateProperties()` ---&gt;\n&lt;cfset product = model(&quot;product&quot;).findByKey(56)&gt;\n&lt;cfset product.updateProperties(new=1)&gt;</pre>"},"hint":"Updates all the properties from the properties argument or other named arguments. If the object is invalid, the save will fail and false will be returned.","returntype":"","slug":"updateproperties","parameters":[{"default":"[runtime expression]","required":"No","hint":"Struct containing key/value pairs with properties and associated values that need to be updated globally.","name":"properties","type":"struct"},{"default":"true","required":"No","hint":"Set to true to use cfqueryparam on all columns, or pass in a list of property names to use cfqueryparam on those only.","name":"parameterize","type":"any"},{"default":"","required":"No","hint":"Set to false to skip validations for this operation.","name":"validate","type":"boolean"},{"default":"[runtime expression]","required":"No","hint":"Set this to commit to update the database when the save has completed, rollback to run all the database queries but not commit them, or none to skip transaction handling altogether.","name":"transaction","type":"string"},{"default":"true","required":"No","hint":"Set to false to disable callbacks for this operation.","name":"callbacks","type":"boolean"}],"name":"updateProperties","availableIn":{},"tags":{"categoryClass":"","sectionClass":"","category":"","section":""}},{"extended":{"hasExtended":true,"docs":"<pre>updateProperty(property, value [, parameterize, transaction, callbacks ]) &lt;!--- Sets the `new` property to `1` through updateProperty() ---&gt;\n&lt;cfset product = model(&quot;product&quot;).findByKey(56)&gt;\n&lt;cfset product.updateProperty(&quot;new&quot;, 1)&gt;</pre>"},"hint":"Updates a single property and saves the record without going through the normal validation procedure. This is especially useful for boolean flags on existing records.","returntype":"","slug":"updateproperty","parameters":[{"default":"","required":"Yes","hint":"Name of the property to update the value for globally.","name":"property","type":"string"},{"default":"","required":"Yes","hint":"Value to set on the given property globally.","name":"value","type":"any"},{"default":"true","required":"No","hint":"Set to true to use cfqueryparam on all columns, or pass in a list of property names to use cfqueryparam on those only.","name":"parameterize","type":"any"},{"default":"[runtime expression]","required":"No","hint":"Set this to commit to update the database when the save has completed, rollback to run all the database queries but not commit them, or none to skip transaction handling altogether.","name":"transaction","type":"string"},{"default":"true","required":"No","hint":"Set to false to disable callbacks for this operation.","name":"callbacks","type":"boolean"}],"name":"updateProperty","availableIn":{},"tags":{"categoryClass":"","sectionClass":"","category":"","section":""}},{"extended":{"hasExtended":true,"docs":"<pre>urlFor([ route, controller, action, key, params, anchor, onlyPath, host, protocol, port ]) &lt;!--- Create the URL for the `logOut` action on the `account` controller, typically resulting in `/account/log-out` ---&gt;\n#urlFor(controller=&quot;account&quot;, action=&quot;logOut&quot;)#\n\n&lt;!--- Create a URL with an anchor set on it ---&gt;\n#urlFor(action=&quot;comments&quot;, anchor=&quot;comment10&quot;)#\n\n&lt;!--- Create a URL based on a route called `products`, which expects params for `categorySlug` and `productSlug` ---&gt;\n#urlFor(route=&quot;product&quot;, categorySlug=&quot;accessories&quot;, productSlug=&quot;battery-charger&quot;)#</pre>"},"hint":"Creates an internal URL based on supplied arguments.","returntype":"","slug":"urlfor","parameters":[{"default":"","required":"No","hint":"Name of a route that you have configured in config/routes.cfm.","name":"route","type":"string"},{"default":"","required":"No","hint":"Name of the controller to include in the URL.","name":"controller","type":"string"},{"default":"","required":"No","hint":"Name of the action to include in the URL.","name":"action","type":"string"},{"default":"","required":"No","hint":"Key(s) to include in the URL.","name":"key","type":"any"},{"default":"","required":"No","hint":"Any additional parameters to be set in the query string (example: wheels=cool&x=y). Please note that CFWheels uses the & and = characters to split the parameters and encode them properly for you (using URLEncodedFormat() internally). However, if you need to pass in & or = as part of the value, then you need to encode them (and only them), example: a=cats%26dogs%3Dtrouble!&b=1.","name":"params","type":"string"},{"default":"","required":"No","hint":"Sets an anchor name to be appended to the path.","name":"anchor","type":"string"},{"default":"true","required":"No","hint":"If true, returns only the relative URL (no protocol, host name or port).","name":"onlyPath","type":"boolean"},{"default":"","required":"No","hint":"Set this to override the current host.","name":"host","type":"string"},{"default":"","required":"No","hint":"Set this to override the current protocol.","name":"protocol","type":"string"},{"default":"0","required":"No","hint":"Set this to override the current port number.","name":"port","type":"numeric"}],"name":"urlFor","availableIn":{},"tags":{"categoryClass":"","sectionClass":"","category":"","section":""}},{"extended":{"hasExtended":true,"docs":"<pre>// We want this layout to be used as the default throughout the // entire controller, except for the `myAjax` action. usesLayout(template=&quot;myLayout&quot;, except=&quot;myAjax&quot;); // Use a custom layout for these actions but use the default // `layout.cfm` for the rest. usesLayout(template=&quot;myLayout&quot;, only=&quot;termsOfService,shippingPolicy&quot;); // Define a custom function to decide which layout to display. // // The `setLayout` function should return the name of the layout // to use or `true` to use the default one. usesLayout(&quot;setLayout&quot;);</pre>"},"hint":"Used within a controller's init() function to specify controller- or action-specific layouts.","returntype":"","slug":"useslayout","parameters":[{"default":"","required":"true","hint":"Name of the layout template or function name you want to use.","name":"template","type":"string"},{"default":"","required":"false","hint":"Name of the layout template you want to use for AJAX requests.","name":"ajax","type":"string"},{"default":"","required":"false","hint":"List of actions that should not get the layout.","name":"except","type":"string"},{"default":"","required":"false","hint":"List of actions that should only get the layout.","name":"only","type":"string"},{"default":"true","required":"false","hint":"When specifying conditions or a function, pass true to use the default layout.cfm if none of the conditions are met.","name":"useDefault","type":"boolean"}],"name":"usesLayout","availableIn":{},"tags":{"categoryClass":"","sectionClass":"","category":"","section":""}},{"extended":{"hasExtended":true,"docs":"<pre>&lt;!--- Check if a user is valid before proceeding with execution ---&gt;\n&lt;cfset user = model(&quot;user&quot;).new(params.user)&gt;\n&lt;cfif user.valid()&gt;\n    &lt;!--- Do something here ---&gt;\n&lt;/cfif&gt;</pre>"},"hint":"Runs the validation on the object and returns true if it passes it. Wheels will run the validation process automatically whenever an object is saved to the database, but sometimes it's useful to be able to run this method to see if the object is valid without saving it to the database.","returntype":"","slug":"valid","parameters":[{"default":"true","required":"false","hint":"Set to false to disable callbacks for this operation.","name":"callbacks","type":"boolean"}],"name":"valid","availableIn":{},"tags":{"categoryClass":"","sectionClass":"","category":"","section":""}},{"extended":{"hasExtended":true,"docs":"<pre>&lt;cffunction name=&quot;init&quot;&gt;\n\t&lt;cfscript&gt;\n\t\t// Register the `checkPhoneNumber` method below to be called to validate objects before they are saved\n\t\tvalidate(&quot;checkPhoneNumber&quot;);\n\t&lt;/cfscript&gt;\n&lt;/cffunction&gt;\n\n&lt;cffunction name=&quot;checkPhoneNumber&quot;&gt;\n\t&lt;cfscript&gt;\n\t\t// Make sure area code is `614`\n\t\treturn Left(this.phoneNumber, 3) == &quot;614&quot;;\n\t&lt;/cfscript&gt;\n&lt;/cffunction&gt;</pre>"},"hint":"Registers method(s) that should be called to validate objects before they are saved.","returntype":"","slug":"validate","parameters":[{"default":"","required":"false","hint":"Method name or list of method names to call. (Can also be called with the method argument.)","name":"methods","type":"string"},{"default":"","required":"false","hint":"See documentation for validatesConfirmationOf.","name":"condition","type":"string"},{"default":"","required":"false","hint":"See documentation for validatesConfirmationOf.","name":"unless","type":"string"},{"default":"onSave","required":"false","hint":"See documentation for validatesConfirmationOf.","name":"when","type":"string"}],"name":"validate","availableIn":{},"tags":{"categoryClass":"","sectionClass":"","category":"","section":""}},{"extended":{"hasExtended":true,"docs":"<pre>&lt;cffunction name=&quot;init&quot;&gt;\n\t&lt;cfscript&gt;\n\t\t// Register the `checkPhoneNumber` method below to be called to validate new objects before they are inserted\n\t\tvalidateOnCreate(&quot;checkPhoneNumber&quot;);\n\t&lt;/cfscript&gt;\n&lt;/cffunction&gt;\n\n&lt;cffunction name=&quot;checkPhoneNumber&quot;&gt;\n\t&lt;cfscript&gt;\n\t\t// Make sure area code is `614`\n\t\treturn Left(this.phoneNumber, 3) == &quot;614&quot;;\n\t&lt;/cfscript&gt;\n&lt;/cffunction&gt;</pre>"},"hint":"Registers method(s) that should be called to validate new objects before they are inserted.","returntype":"","slug":"validateoncreate","parameters":[{"default":"","required":"false","hint":"See documentation for validate.","name":"methods","type":"string"},{"default":"","required":"false","hint":"See documentation for validatesConfirmationOf.","name":"condition","type":"string"},{"default":"","required":"false","hint":"See documentation for validatesConfirmationOf.","name":"unless","type":"string"}],"name":"validateOnCreate","availableIn":{},"tags":{"categoryClass":"","sectionClass":"","category":"","section":""}},{"extended":{"hasExtended":true,"docs":"<pre>&lt;cffunction name=&quot;init&quot;&gt;\n\t&lt;cfscript&gt;\n\t\t// Register the `check` method below to be called to validate existing objects before they are updated\n\t\tvalidateOnUpdate(&quot;checkPhoneNumber&quot;);\n\t&lt;/cfscript&gt;\n&lt;/cffunction&gt;\n\n&lt;cffunction name=&quot;checkPhoneNumber&quot;&gt;\n\t&lt;cfscript&gt;\n\t\t// Make sure area code is `614`\n\t\treturn Left(this.phoneNumber, 3) == &quot;614&quot;;\n\t&lt;/cfscript&gt;\n&lt;/cffunction&gt;</pre>"},"hint":"Registers method(s) that should be called to validate existing objects before they are updated.","returntype":"","slug":"validateonupdate","parameters":[{"default":"","required":"false","hint":"See documentation for validate.","name":"methods","type":"string"},{"default":"","required":"false","hint":"See documentation for validatesConfirmationOf.","name":"condition","type":"string"},{"default":"","required":"false","hint":"See documentation for validatesConfirmationOf.","name":"unless","type":"string"}],"name":"validateOnUpdate","availableIn":{},"tags":{"categoryClass":"","sectionClass":"","category":"","section":""}},{"extended":{"hasExtended":true,"docs":"<pre>// Make sure that the user has to confirm their password correctly the first time they register (usually done by typing it again in a second form field)\nvalidatesConfirmationOf(property=&quot;password&quot;, when=&quot;onCreate&quot;, message=&quot;Your password and its confirmation do not match. Please try again.&quot;);</pre>"},"hint":"Validates that the value of the specified property also has an identical confirmation value. (This is common when having a user type in their email address a second time to confirm, confirming a password by typing it a second time, etc.) The confirmation value only exists temporarily and never gets saved to the database. By convention, the confirmation property has to be named the same as the property with \"Confirmation\" appended at the end. Using the password example, to confirm our password property, we would create a property called passwordConfirmation.","returntype":"","slug":"validatesconfirmationof","parameters":[{"default":"","required":"true","hint":"Name of property or list of property names to validate against (can also be called with the property argument).","name":"properties","type":"string"},{"default":"[property] should match confirmation","required":"false","hint":"Supply a custom error message here to override the built-in one.","name":"message","type":"string"},{"default":"onSave","required":"false","hint":"Pass in onCreate or onUpdate to limit when this validation occurs (by default validation will occur on both create and update, i.e. onSave).","name":"when","type":"string"},{"default":"","required":"false","hint":"String expression to be evaluated that decides if validation will be run (if the expression returns true validation will run).","name":"condition","type":"string"},{"default":"","required":"false","hint":"String expression to be evaluated that decides if validation will be run (if the expression returns false validation will run).","name":"unless","type":"string"}],"name":"validatesConfirmationOf","availableIn":{},"tags":{"categoryClass":"","sectionClass":"","category":"","section":""}},{"extended":{"hasExtended":true,"docs":"<pre>// Do not allow &quot;PHP&quot; or &quot;Fortran&quot; to be saved to the database as a cool language\nvalidatesExclusionOf(property=&quot;coolLanguage&quot;, list=&quot;php,fortran&quot;, message=&quot;Haha, you can not be serious. Try again, please.&quot;);</pre>"},"hint":"Validates that the value of the specified property does not exist in the supplied list.","returntype":"","slug":"validatesexclusionof","parameters":[{"default":"","required":"true","hint":"See documentation for validatesConfirmationOf.","name":"properties","type":"string"},{"default":"","required":"true","hint":"Single value or list of values that should not be allowed.","name":"list","type":"string"},{"default":"[property] is reserved","required":"false","hint":"See documentation for validatesConfirmationOf.","name":"message","type":"string"},{"default":"onSave","required":"false","hint":"See documentation for validatesConfirmationOf.","name":"when","type":"string"},{"default":"false","required":"false","hint":"If set to true, validation will be skipped if the property value is an empty string or doesn't exist at all. This is useful if you only want to run this validation after it passes the validatesPresenceOf test, thus avoiding duplicate error messages if it doesn't.","name":"allowBlank","type":"boolean"},{"default":"","required":"false","hint":"See documentation for validatesConfirmationOf.","name":"condition","type":"string"},{"default":"","required":"false","hint":"See documentation for validatesConfirmationOf.","name":"unless","type":"string"}],"name":"validatesExclusionOf","availableIn":{},"tags":{"categoryClass":"","sectionClass":"","category":"","section":""}},{"extended":{"hasExtended":true,"docs":"<pre>// Make sure that the user has entered a correct credit card validatesFormatOf(property=&quot;cc&quot;, type=&quot;creditcard&quot;); /* * Make sure that the user has entered an email address ending with the * `.se` domain when the `ipCheck()` method returns `true`, and it's not * Sunday. Also supply a custom error message that overrides the CFWheels * default one */ validatesFormatOf( property=&quot;email&quot;, regEx=&quot;^.*@.*\\.se$&quot;, condition=&quot;ipCheck()&quot;, unless=&quot;DayOfWeek() eq 1&quot; message=&quot;Sorry, you must have a Swedish email address to use this website.&quot; );</pre>"},"hint":"Validates that the value of the specified property is formatted correctly by matching it against a regular expression using the regEx argument and/or against a built-in CFML validation type using the type argument (creditcard, date, email, etc.).","returntype":"","slug":"validatesformatof","parameters":[{"default":"","required":"true","hint":"Name of property or list of property names to validate against (can also be called with the property argument).","name":"properties","type":"string"},{"default":"","required":"false","hint":"Regular expression to verify against.","name":"regEx","type":"string"},{"default":"","required":"false","hint":"One of the following types to verify against: creditcard, date, email, eurodate, guid, social_security_number, ssn, telephone, time, URL, USdate, UUID, variableName, zipcode (will be passed through to your CFML engine's IsValid() function).","name":"type","type":"string"},{"default":"[property] is invalid","required":"false","hint":"Supply a custom error message here to override the built-in one.","name":"message","type":"string"},{"default":"onSave","required":"false","hint":"Pass in onCreate or onUpdate to limit when this validation occurs (by default validation will occur on both create and update, i.e. onSave).","name":"when","type":"string"},{"default":"false","required":"false","hint":"If set to true, validation will be skipped if the property value is an empty string or doesn't exist at all. This is useful if you only want to run this validation after it passes the validatesPresenceOf test, thus avoiding duplicate error messages if it doesn't.","name":"allowBlank","type":"boolean"},{"default":"","required":"false","hint":"String expression to be evaluated that decides if validation will be run. (If the expression returns true, validation will run.)","name":"condition","type":"string"},{"default":"","required":"false","hint":"String expression to be evaluated that decides if validation will be run. (If the expression returns false, validation will run.)","name":"unless","type":"string"}],"name":"validatesFormatOf","availableIn":{},"tags":{"categoryClass":"","sectionClass":"","category":"","section":""}},{"extended":{"hasExtended":true,"docs":"<pre>// Make sure that the user selects either &quot;CFWheels&quot; or &quot;Rails&quot; as their framework validatesInclusionOf( property=&quot;frameworkOfChoice&quot;, list=&quot;cfwheels,rails&quot;, message=&quot;Please try again, and this time, select a decent framework!&quot; );</pre>"},"hint":"Validates that the value of the specified property exists in the supplied list.","returntype":"","slug":"validatesinclusionof","parameters":[{"default":"","required":"true","hint":"Name of property or list of property names to validate against (can also be called with the property argument).","name":"properties","type":"string"},{"default":"","required":"true","hint":"List of allowed values.","name":"list","type":"string"},{"default":"[property] is not included in the list","required":"false","hint":"Supply a custom error message here to override the built-in one.","name":"message","type":"string"},{"default":"onSave","required":"false","hint":"Pass in onCreate or onUpdate to limit when this validation occurs (by default validation will occur on both create and update, i.e. onSave).","name":"when","type":"string"},{"default":"false","required":"false","hint":"If set to true, validation will be skipped if the property value is an empty string or doesn't exist at all. This is useful if you only want to run this validation after it passes the validatesPresenceOf test, thus avoiding duplicate error messages if it doesn't.","name":"allowBlank","type":"boolean"},{"default":"","required":"false","hint":"String expression to be evaluated that decides if validation will be run (if the expression returns true validation will run).","name":"condition","type":"string"},{"default":"","required":"false","hint":"String expression to be evaluated that decides if validation will be run (if the expression returns false validation will run).","name":"unless","type":"string"}],"name":"validatesInclusionOf","availableIn":{},"tags":{"categoryClass":"","sectionClass":"","category":"","section":""}},{"extended":{"hasExtended":true,"docs":"<pre>// Make sure that the `firstname` and `lastName` properties are not more than\n// 50 characters and use square brackets to dynamically insert the property\n// name when the error message is displayed to the user. (The `firstName`\n// property will be displayed as &quot;first name&quot;.)\nvalidatesLengthOf(\n    properties=&quot;firstName,lastName&quot;,\n    maximum=50,\n    message=&quot;Please shorten your [property] please (50 characters max).&quot;\n);\n\n// Make sure that the `password` property is between 4 and 15 characters\nvalidatesLengthOf(\n    property=&quot;password&quot;,\n    within=&quot;4,20&quot;,\n    message=&quot;The password length must be between 4 and 20 characters.&quot;\n);</pre>"},"hint":"Validates that the value of the specified property matches the length requirements supplied. Use the exactly, maximum, minimum and within arguments to specify the length requirements.","returntype":"","slug":"validateslengthof","parameters":[{"default":"","required":"true","hint":"Name of property or list of property names to validate against (can also be called with the property argument).","name":"properties","type":"string"},{"default":"[property] is the wrong length","required":"false","hint":"Supply a custom error message here to override the built-in one.","name":"message","type":"string"},{"default":"onSave","required":"false","hint":"Pass in onCreate or onUpdate to limit when this validation occurs (by default validation will occur on both create and update, i.e. onSave).","name":"when","type":"string"},{"default":"false","required":"false","hint":"If set to true, validation will be skipped if the property value is an empty string or doesn't exist at all. This is useful if you only want to run this validation after it passes the validatesPresenceOf test, thus avoiding duplicate error messages if it doesn't.","name":"allowBlank","type":"boolean"},{"default":"0","required":"false","hint":"The exact length that the property value must be.","name":"exactly","type":"numeric"},{"default":"0","required":"false","hint":"The maximum length that the property value can be.","name":"maximum","type":"numeric"},{"default":"0","required":"false","hint":"The minimum length that the property value can be.","name":"minimum","type":"numeric"},{"default":"","required":"false","hint":"A list of two values (minimum and maximum) that the length of the property value must fall within.","name":"within","type":"string"},{"default":"","required":"false","hint":"String expression to be evaluated that decides if validation will be run (if the expression returns true validation will run).","name":"condition","type":"string"},{"default":"","required":"false","hint":"String expression to be evaluated that decides if validation will be run (if the expression returns false validation will run).","name":"unless","type":"string"}],"name":"validatesLengthOf","availableIn":{},"tags":{"categoryClass":"","sectionClass":"","category":"","section":""}},{"extended":{"hasExtended":true,"docs":"<pre>// Make sure that the score is a number with no decimals but only when a score is supplied. (Tetting `allowBlank` to `true` means that objects are allowed to be saved without scores, typically resulting in `NULL` values being inserted in the database table)\nvalidatesNumericalityOf(property=&quot;score&quot;, onlyInteger=true, allowBlank=true, message=&quot;Please enter a correct score.&quot;);</pre>"},"hint":"Validates that the value of the specified property is numeric.","returntype":"","slug":"validatesnumericalityof","parameters":[{"default":"","required":"true","hint":"See documentation for validatesConfirmationOf.","name":"properties","type":"string"},{"default":"[property] is not a number","required":"false","hint":"See documentation for validatesConfirmationOf.","name":"message","type":"string"},{"default":"onSave","required":"false","hint":"See documentation for validatesConfirmationOf.","name":"when","type":"string"},{"default":"false","required":"false","hint":"See documentation for validatesExclusionOf.","name":"allowBlank","type":"boolean"},{"default":"false","required":"false","hint":"Specifies whether the property value must be an integer.","name":"onlyInteger","type":"boolean"},{"default":"","required":"false","hint":"See documentation for validatesConfirmationOf.","name":"condition","type":"string"},{"default":"","required":"false","hint":"See documentation for validatesConfirmationOf.","name":"unless","type":"string"},{"default":"","required":"false","hint":"Specifies whether or not the value must be an odd number.","name":"odd","type":"boolean"},{"default":"","required":"false","hint":"Specifies whether or not the value must be an even number.","name":"even","type":"boolean"},{"default":"","required":"false","hint":"Specifies whether or not the value must be greater than the supplied value.","name":"greaterThan","type":"numeric"},{"default":"","required":"false","hint":"Specifies whether or not the value must be greater than or equal the supplied value.","name":"greaterThanOrEqualTo","type":"numeric"},{"default":"","required":"false","hint":"Specifies whether or not the value must be equal to the supplied value.","name":"equalTo","type":"numeric"},{"default":"","required":"false","hint":"Specifies whether or not the value must be less than the supplied value.","name":"lessThan","type":"numeric"},{"default":"","required":"false","hint":"Specifies whether or not the value must be less than or equal the supplied value.","name":"lessThanOrEqualTo","type":"numeric"}],"name":"validatesNumericalityOf","availableIn":{},"tags":{"categoryClass":"","sectionClass":"","category":"","section":""}},{"extended":{"hasExtended":true,"docs":"<pre>// Make sure that the user data can not be saved to the database without the `emailAddress` property. (It must exist and not be an empty string)\nvalidatesPresenceOf(&quot;emailAddress&quot;);</pre>"},"hint":"Validates that the specified property exists and that its value is not blank.","returntype":"","slug":"validatespresenceof","parameters":[{"default":"","required":"true","hint":"See documentation for validatesConfirmationOf.","name":"properties","type":"string"},{"default":"[property] can't be empty","required":"false","hint":"See documentation for validatesConfirmationOf.","name":"message","type":"string"},{"default":"onSave","required":"false","hint":"See documentation for validatesConfirmationOf.","name":"when","type":"string"},{"default":"","required":"false","hint":"See documentation for validatesConfirmationOf.","name":"condition","type":"string"},{"default":"","required":"false","hint":"See documentation for validatesConfirmationOf.","name":"unless","type":"string"}],"name":"validatesPresenceOf","availableIn":{},"tags":{"categoryClass":"","sectionClass":"","category":"","section":""}},{"extended":{"hasExtended":true,"docs":"<pre>// Make sure that two users with the same username won't ever exist in the database table\nvalidatesUniquenessOf(property=&quot;username&quot;, message=&quot;Sorry, that username is already taken.&quot;);\n\n// Same as above but allow identical usernames as long as they belong to a different account\nvalidatesUniquenessOf(property=&quot;username&quot;, scope=&quot;accountId&quot;);</pre>"},"hint":"Validates that the value of the specified property is unique in the database table. Useful for ensuring that two users can't sign up to a website with identical usernames for example. When a new record is created, a check is made to make sure that no record already exists in the database table with the given value for the specified property. When the record is updated, the same check is made but disregarding the record itself.","returntype":"","slug":"validatesuniquenessof","parameters":[{"default":"","required":"true","hint":"Name of property or list of property names to validate against (can also be called with the property argument).","name":"properties","type":"string"},{"default":"[property] has already been taken","required":"false","hint":"Supply a custom error message here to override the built-in one.","name":"message","type":"string"},{"default":"onSave","required":"false","hint":"Pass in onCreate or onUpdate to limit when this validation occurs (by default, validation will occur on both create and update, i.e. onSave).","name":"when","type":"string"},{"default":"false","required":"false","hint":"If set to true, validation will be skipped if the property value is an empty string or doesn't exist at all. This is useful if you only want to run this validation after it passes the validatesPresenceOf test, thus avoiding duplicate error messages if it doesn't.","name":"allowBlank","type":"boolean"},{"default":"","required":"false","hint":"One or more properties by which to limit the scope of the uniqueness constraint.","name":"scope","type":"string"},{"default":"","required":"false","hint":"String expression to be evaluated that decides if validation will be run (if the expression returns true, validation will run).","name":"condition","type":"string"},{"default":"","required":"false","hint":"String expression to be evaluated that decides if validation will be run (if the expression returns false, validation will run).","name":"unless","type":"string"},{"default":"true","required":"false","hint":"Whether to take records deleted using \"Soft Delete\" into account when performing the uniqueness check.","name":"includeSoftDeletes","type":"boolean"}],"name":"validatesUniquenessOf","availableIn":{},"tags":{"categoryClass":"","sectionClass":"","category":"","section":""}},{"extended":{"hasExtended":true,"docs":"<pre>validationTypeForProperty(property) &lt;!--- first name is a varchar(50) column ---&gt;\n&lt;cfset employee = model(&quot;employee&quot;).new()&gt;\n&lt;!--- would output &quot;string&quot; ---&gt;\n&lt;cfoutput&gt;#employee.validationTypeForProperty(&quot;firstName&quot;)&gt;#&lt;/cfoutput&gt;</pre>"},"hint":"Returns the validation type for the property","returntype":"","slug":"validationtypeforproperty","parameters":[{"default":"","required":"Yes","hint":"Name of column to retrieve data for.","name":"property","type":"string"}],"name":"validationTypeForProperty","availableIn":{},"tags":{"categoryClass":"","sectionClass":"","category":"","section":""}},{"extended":{"hasExtended":true,"docs":"<pre>// Get verification chain, remove the first item, and set it back\nmyVerificationChain = verificationChain();\nArrayDeleteAt(myVerificationChain, 1);\nsetVerificationChain(myVerificationChain);</pre>"},"hint":"Returns an array of all the verifications set on this controller in the order in which they will be executed.","returntype":"","slug":"verificationchain","parameters":[],"name":"verificationChain","availableIn":{},"tags":{"categoryClass":"","sectionClass":"","category":"","section":""}},{"extended":{"hasExtended":true,"docs":"<pre>// Tell CFWheels to verify that the `handleForm` action is always a `POST` request when executed\nverifies(only=&quot;handleForm&quot;, post=true);\n\n// Make sure that the edit action is a `GET` request, that `userId` exists in the `params` struct, and that it''s an integer\nverifies(only=&quot;edit&quot;, get=true, params=&quot;userId&quot;, paramsTypes=&quot;integer&quot;);\n\n// Just like above, only this time we want to invoke a custom function in our controller to handle the request when it is invalid\nverifies(only=&quot;edit&quot;, get=true, params=&quot;userId&quot;, paramsTypes=&quot;integer&quot;, handler=&quot;myCustomFunction&quot;);\n\n// Just like above, only this time instead of specifying a handler, we want to `redirect` the visitor to the index action of the controller and show an error in The Flash when the request is invalid\nverifies(only=&quot;edit&quot;, get=true, params=&quot;userId&quot;, paramsTypes=&quot;integer&quot;, action=&quot;index&quot;, error=&quot;Invalid userId&quot;);</pre>"},"hint":"Instructs CFWheels to verify that some specific criterias are met before running an action. Note that all undeclared arguments will be passed to redirectTo() call if a handler is not specified.","returntype":"","slug":"verifies","parameters":[{"default":"","required":"false","hint":"List of action names to limit this verification to.","name":"only","type":"string"},{"default":"","required":"false","hint":"List of action names to exclude this verification from.","name":"except","type":"string"},{"default":"","required":"false","hint":"Set to true to verify that this is a POST request.","name":"post","type":"any"},{"default":"","required":"false","hint":"Set to true to verify that this is a GET request.","name":"get","type":"any"},{"default":"","required":"false","hint":"Set to true to verify that this is an AJAX request.","name":"ajax","type":"any"},{"default":"","required":"false","hint":"Verify that the passed in variable name exists in the cookie scope.","name":"cookie","type":"string"},{"default":"","required":"false","hint":"Verify that the passed in variable name exists in the session scope.","name":"session","type":"string"},{"default":"","required":"false","hint":"Verify that the passed in variable name exists in the params struct.","name":"params","type":"string"},{"default":"","required":"false","hint":"Pass in the name of a function that should handle failed verifications. The default is to just abort the request when a verification fails.","name":"handler","type":"string"},{"default":"","required":"false","hint":"List of types to check each listed cookie value against (will be passed through to your CFML engine's IsValid function).","name":"cookieTypes","type":"string"},{"default":"","required":"false","hint":"List of types to check each list session value against (will be passed through to your CFML engine's IsValid function).","name":"sessionTypes","type":"string"},{"default":"","required":"false","hint":"List of types to check each params value against (will be passed through to your CFML engine's IsValid function).","name":"paramsTypes","type":"string"}],"name":"verifies","availableIn":{},"tags":{"categoryClass":"","sectionClass":"","category":"","section":""}},{"extended":{"hasExtended":true,"docs":"<pre>#wordTruncate(text=&quot;Wheels is a framework for ColdFusion&quot;, length=4)#\n-&gt; CFWheels is a framework...\n\n#truncate(text=&quot;Wheels is a framework for ColdFusion&quot;, truncateString=&quot; (more)&quot;)#\n-&gt; CFWheels is a framework for (more)</pre>"},"hint":"Truncates text to the specified length of words and replaces the remaining characters with the specified truncate string (which defaults to \"...\").","returntype":"","slug":"wordtruncate","parameters":[{"default":"","required":"true","hint":"The text to truncate.","name":"text","type":"string"},{"default":"5","required":"false","hint":"Number of words to truncate the text to.","name":"length","type":"numeric"},{"default":"...","required":"false","hint":"String to replace the last characters with.","name":"truncateString","type":"string"}],"name":"wordTruncate","availableIn":{},"tags":{"categoryClass":"","sectionClass":"","category":"","section":""}},{"extended":{"hasExtended":true,"docs":"<pre>&lt;!--- View code ---&gt;\n&lt;cfoutput&gt;\n    #yearSelectTag(name=&quot;yearOfBirthday&quot;, selected=params.yearOfBirthday)#\n&lt;/cfoutput&gt;\n\n&lt;!--- Only allow selection of year to be for the past 50 years, minimum being 18 years ago ---&gt;\n&lt;cfset fiftyYearsAgo = Now() - 50&gt;\n&lt;cfset eighteenYearsAgo = Now() - 18&gt;\n&lt;cfoutput&gt;\n\t#yearSelectTag(name=&quot;yearOfBirthday&quot;, selected=params.yearOfBirthday, startYear=fiftyYearsAgo, endYear=eighteenYearsAgo)#\n&lt;/cfoutput&gt;</pre>"},"hint":"Builds and returns a string containing a select form control for a range of years based on the supplied name.","returntype":"","slug":"yearselecttag","parameters":[{"default":"","required":"true","hint":"See documentation for textFieldTag.","name":"name","type":"string"},{"default":"","required":"false","hint":"The year that should be selected initially.","name":"selected","type":"string"},{"default":"2010","required":"false","hint":"See documentation for dateSelect.","name":"startYear","type":"numeric"},{"default":"2020","required":"false","hint":"See documentation for dateSelect.","name":"endYear","type":"numeric"},{"default":"false","required":"false","hint":"See documentation for select.","name":"includeBlank","type":"any"},{"default":"","required":"false","hint":"See documentation for textField.","name":"label","type":"string"},{"default":"around","required":"false","hint":"See documentation for textField.","name":"labelPlacement","type":"string"},{"default":"","required":"false","hint":"See documentation for textField.","name":"prepend","type":"string"},{"default":"","required":"false","hint":"See documentation for textField.","name":"append","type":"string"},{"default":"","required":"false","hint":"See documentation for textField.","name":"prependToLabel","type":"string"},{"default":"","required":"false","hint":"See documentation for textField.","name":"appendToLabel","type":"string"}],"name":"yearSelectTag","availableIn":{},"tags":{"categoryClass":"","sectionClass":"","category":"","section":""}}]}
